   1 0000               #----------------------------------------------------------
   2 0000               # File: $Id$
   3 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   4 0000               # Description:
   5 0000               #               This file contains the subroutines that gets the input from the
   6 0000               #               user in order to run the program
   7 0000               #----------------------------------------------------------
   8 0000               
   9 0000               # ===================
  10 0000               # || syscall codes ||
  11 0000               # ===================
  12 0000               
  13 0000               PRINT_INT =	1
  14 0000               PRINT_STRING = 	4
  15 0000               READ_INT = 	5
  16 0000               READ_STRING =	8
  17 0000               
  18 0000               # ===================
  19 0000               
  20 0000               # ==========================
  21 0000               # || param block constants||
  22 0000               # ==========================
  23 0000               
  24 0000               CELL_FRAMESIZE = 24
  25 0000               BOARD_DIM = 0
  26 0000               GENS = 4
  27 0000               A_CELLS = 8
  28 0000               B_CELLS = 12
  29 0000               NEXT_A = 16
  30 0000               NEXT_B  = 20
  31 0000               A_ARR = 24
  32 0000               B_ARR = 28
  33 0000               
  34 0000                       .text
  35 0000                       .align      2
  36 0000                       .globl      get_integer
  37 0000                       .globl      get_A_cells
  38 0000                       .globl      get_B_cells
  39 0000               
  40 0000               # ===================================================================
  41 0000               # Name:             get_integer
  42 0000               # ===================================================================
  43 0000               # Description:      This function loads the user input for
  44 0000               #                   the single integer parameters
  45 0000               # Parameters:                         
  46 0000               #       a0 -        the location where the input will be stored
  47 0000               #       a1 -        the lower bound
  48 0000               #       a2 -        the upper bound
  49 0000               #       a3 -        the location of the error message
  50 0000               # ===================================================================
  51 0000               
  52 0000               get_integer:
  53 0000 23BDFFF8	        addi    $sp, $sp, -8                       
  54 0004 AFBF0004	        sw      $ra, 4($sp)
  55 0008 AFB00000	        sw      $s0, 0($sp)                         #store s register
  56 000c               
  57 000c 34020005	        li      $v0, READ_INT                       #read int
  58 0010 0000000C	        syscall        
  59 0014                       
  60 0014 0045402A	        slt     $t0, $v0, $a1                       #if(input < lower)
  61 0018 00C2482A	        slt     $t1, $a2, $v0                       #if(input > upper
  62 001c 01095025	        or      $t2, $t0, $t1                      
  63 0020 11400006	        beq     $t2, $zero,integer_store
  64 0024                       
  65 0024 00808021	        move    $s0, $a0                            #save int addr
  66 0028 00E02021	        move    $a0, $a3                            
  67 002c 34020004	        li      $v0, PRINT_STRING
  68 0030 0000000C	        syscall                                     #print error
  69 0034 02002021	        move    $a0, $s0                            #restore int addr
  70 0038 08000000	        j       get_integer
  71 003c                       
  72 003c               
  73 003c               
  74 003c               integer_store:
  75 003c AC820000	        sw      $v0, 0($a0)                         #store in variable
  76 0040               
  77 0040 8FBF0004	        lw      $ra, 4($sp)
  78 0044 8FB00000	        lw      $s0, 0($sp)                         #restore s register 
  79 0048 23BD0008	        addi    $sp, $sp, 8
  80 004c 03E00008	        jr      $ra
  81 0050               
  82 0050               # ===================================================================
  83 0050               # Name:             get_A_cells:
  84 0050               # ===================================================================
  85 0050               # Description:      This function loads the user input for the
  86 0050               #                   locations of the live cells for colony A
  87 0050               #                   
  88 0050               # Parameters:                         
  89 0050               #       a0 -        addr the parameter block
  90 0050               #       a1 -        the location of the illegal string
  91 0050               # S Registers:
  92 0050               #       s0 -        the loop max (2xcells to place)
  93 0050               #       s1 -        the loop counter
  94 0050               #       s2 -        the location of the x buffer
  95 0050               #       s3 -        the location of the y buffer
  96 0050               #
  97 0050               # T Registers:
  98 0050               #       t0 -        end loop register
  99 0050               #       t1 -        temp for row coordinate
 100 0050               #       t2 -        temp for col coordinate
 101 0050               #
 102 0050               # ===================================================================
 103 0050               
 104 0050               get_A_cells:
 105 0050 23BDFFE8	        addi    $sp, $sp, -CELL_FRAMESIZE
 106 0054 AFBF0014	        sw      $ra, -4+CELL_FRAMESIZE($sp)
 107 0058 AFB00010	        sw      $s0, -8+CELL_FRAMESIZE($sp)       
 108 005c AFB1000C	        sw      $s1, -12+CELL_FRAMESIZE($sp)                       
 109 0060 AFB20008	        sw      $s2, -16+CELL_FRAMESIZE($sp)                       
 110 0064 AFB30004	        sw      $s3, -20+CELL_FRAMESIZE($sp)
 111 0068               
 112 0068 8C8B0000	        lw      $t3, BOARD_DIM($a0)                 
 113 006c 8D6B0000	        lw      $t3, 0($t3)
 114 0070                       
 115 0070 8C900008	        lw      $s0, A_CELLS($a0)                   #load addr of cell cnt
 116 0074 8E100000	        lw      $s0, 0($s0)                         #load int inside addr 
 117 0078                   
 118 0078 8C920010	        lw      $s2, NEXT_A($a0)                    #load addr of loc buf
 119 007c 8E520000	        lw      $s2, 0($s2)                         #load addr of next el.
 120 0080                       
 121 0080 00008821	        move    $s1, $zero                          #i = 0
 122 0084                       
 123 0084               loc_loop_A:
 124 0084 0230402A	        slt     $t0, $s1, $s0                       #if(i < max)
 125 0088 11000018	        beq     $t0, $zero, A_cells_end             #goto end
 126 008c                       
 127 008c                       # get row coordinate # 
 128 008c               
 129 008c 34020005	        li      $v0, READ_INT
 130 0090 0000000C	        syscall
 131 0094 00404821	        move    $t1, $v0
 132 0098               
 133 0098                       # get col coordinate # 
 134 0098               
 135 0098 34020005	        li      $v0, READ_INT
 136 009c 0000000C	        syscall
 137 00a0 00405021	        move    $t2, $v0
 138 00a4               
 139 00a4                       # check valid x #
 140 00a4 0120C82A	        slt     $t9, $t1, $zero                     #if(in < 0) set t9
 141 00a8 1720000B	        bne     $t9, $zero, get_A_error
 142 00ac 012BC02A	        slt     $t8, $t1, $t3                       #if(in >= dim set t8
 143 00b0 13000009	        beq     $t8, $zero, get_A_error
 144 00b4               
 145 00b4                       # check valid y #
 146 00b4 0140C82A	        slt     $t9, $t2, $zero                     #if(in < 0) set t9
 147 00b8 17200007	        bne     $t9, $zero, get_A_error
 148 00bc 014BC02A	        slt     $t8, $t2, $t3                       #if(in >= dim set t8
 149 00c0 13000005	        beq     $t8, $zero, get_A_error
 150 00c4               
 151 00c4                       # place into array #                        # 2 values placed in
 152 00c4               
 153 00c4 AE490000	        sw      $t1, 0($s2)                         # 0($s2) = x value
 154 00c8 AE4A0004	        sw      $t2, 4($s2)                         # 4($s2) = y value
 155 00cc 22520008	        addi    $s2, $s2, 8                         # increment pointer
 156 00d0               
 157 00d0                       # increment loop counter #
 158 00d0               
 159 00d0 22310001	        addi    $s1, $s1, 1
 160 00d4 08000021	        j       loc_loop_A
 161 00d8               
 162 00d8               get_A_error:
 163 00d8 00A02021	        move    $a0, $a1
 164 00dc 34020004	        li      $v0, PRINT_STRING
 165 00e0 0000000C	        syscall
 166 00e4 3402000A	        li      $v0, 10
 167 00e8 0000000C	        syscall
 168 00ec               
 169 00ec               A_cells_end:
 170 00ec               
 171 00ec 8FBF0014	        lw      $ra, -4+CELL_FRAMESIZE($sp)
 172 00f0 8FB00010	        lw      $s0, -8+CELL_FRAMESIZE($sp)       
 173 00f4 8FB1000C	        lw      $s1, -12+CELL_FRAMESIZE($sp)                       
 174 00f8 8FB20008	        lw      $s2, -16+CELL_FRAMESIZE($sp)                       
 175 00fc 8FB30004	        lw      $s3, -20+CELL_FRAMESIZE($sp)
 176 0100 23BD0018	        addi    $sp, $sp, CELL_FRAMESIZE
 177 0104                       
 178 0104 03E00008	        jr      $ra
 179 0108                       
 180 0108               # ===================================================================
 181 0108               # Name:             get_B_cells:
 182 0108               # ===================================================================
 183 0108               # Description:      This function loads the user input for the
 184 0108               #                   locations of the live cells for colony B
 185 0108               #                   
 186 0108               # Parameters:                         
 187 0108               #       a0 -        the parameter block
 188 0108               #       a1 -        the addr of error string
 189 0108               # S Registers:
 190 0108               #       s0 -        the loop max (2xcells to place)
 191 0108               #       s1 -        the loop counter
 192 0108               #       s2 -        the location of the x buffer
 193 0108               #       s3 -        the location of the y buffer
 194 0108               #
 195 0108               # T Registers:
 196 0108               #       t0 -        end loop register
 197 0108               #
 198 0108               # ===================================================================
 199 0108               
 200 0108               get_B_cells:
 201 0108 23BDFFE8	        addi    $sp, $sp, -CELL_FRAMESIZE
 202 010c AFBF0014	        sw      $ra, -4+CELL_FRAMESIZE($sp)
 203 0110 AFB00010	        sw      $s0, -8+CELL_FRAMESIZE($sp)       
 204 0114 AFB1000C	        sw      $s1, -12+CELL_FRAMESIZE($sp)                       
 205 0118 AFB20008	        sw      $s2, -16+CELL_FRAMESIZE($sp)                       
 206 011c AFB30004	        sw      $s3, -20+CELL_FRAMESIZE($sp)
 207 0120               
 208 0120 8C8B0000	        lw      $t3, BOARD_DIM($a0)                 #get dim to compare
 209 0124 8D6B0000	        lw      $t3, 0($t3)
 210 0128                       
 211 0128 8C90000C	        lw      $s0, B_CELLS($a0)                   #load addr of cell cnt
 212 012c 8E100000	        lw      $s0, 0($s0)                         #load int inside addr 
 213 0130                   
 214 0130 8C920014	        lw      $s2, NEXT_B($a0)                    #load addr of loc buf
 215 0134 8E520000	        lw      $s2, 0($s2)                         #load addr of next el.
 216 0138                       
 217 0138 00008821	        move    $s1, $zero                          #i = 0
 218 013c               
 219 013c               
 220 013c               loc_loop_B:
 221 013c 0230402A	        slt     $t0, $s1, $s0
 222 0140 11000018	        beq     $t0, $zero, B_cells_end
 223 0144                       
 224 0144                       # get row coordinate # 
 225 0144               
 226 0144 34020005	        li      $v0, READ_INT
 227 0148 0000000C	        syscall
 228 014c 00404821	        move    $t1, $v0
 229 0150               
 230 0150                       # get col coordinate # 
 231 0150               
 232 0150 34020005	        li      $v0, READ_INT
 233 0154 0000000C	        syscall
 234 0158 00405021	        move    $t2, $v0
 235 015c               
 236 015c                       # check valid y #
 237 015c 0120C82A	        slt     $t9, $t1, $zero                     #if(in < 0) set t9
 238 0160 1720000B	        bne     $t9, $zero, get_B_error
 239 0164 012BC02A	        slt     $t8, $t1, $t3                       #if(in > dim set t8
 240 0168 13000009	        beq     $t8, $zero, get_B_error
 241 016c               
 242 016c                       # check valid x #
 243 016c 0140C82A	        slt     $t9, $t2, $zero                     #if(in < 0) set t9
 244 0170 17200007	        bne     $t9, $zero, get_B_error
 245 0174 014BC02A	        slt     $t8, $t2, $t3                       #if(in > dim set t8
 246 0178 13000005	        beq     $t8, $zero, get_B_error
 247 017c               
 248 017c                       # place into array #                        # 2 values placed in
 249 017c               
 250 017c AE490000	        sw      $t1, 0($s2)                         # 0($s2) = x value
 251 0180 AE4A0004	        sw      $t2, 4($s2)                         # 4($s2) = y value
 252 0184 22520008	        addi    $s2, $s2, 8                         # increment pointer
 253 0188               
 254 0188                       # increment loop counter #
 255 0188 22310001	        addi    $s1, $s1, 1
 256 018c 0800004F	        j       loc_loop_B
 257 0190               
 258 0190               get_B_error:
 259 0190 00A02021	        move    $a0, $a1
 260 0194 34020004	        li      $v0, PRINT_STRING
 261 0198 0000000C	        syscall
 262 019c 3402000A	        li      $v0, 10
 263 01a0 0000000C	        syscall
 264 01a4               
 265 01a4               B_cells_end:
 266 01a4               
 267 01a4 8FBF0014	        lw      $ra, -4+CELL_FRAMESIZE($sp)
 268 01a8 8FB00010	        lw      $s0, -8+CELL_FRAMESIZE($sp)       
 269 01ac 8FB1000C	        lw      $s1, -12+CELL_FRAMESIZE($sp)                       
 270 01b0 8FB20008	        lw      $s2, -16+CELL_FRAMESIZE($sp)                       
 271 01b4 8FB30004	        lw      $s3, -20+CELL_FRAMESIZE($sp)
 272 01b8 23BD0018	        addi    $sp, $sp, CELL_FRAMESIZE
 273 01bc 03E00008	        jr      $ra
 274 01c0               


A_ARR           = 00000018   
A_CELLS         = 00000008   
A_cells_end       000000EC R  text 
BOARD_DIM       = 00000000   
B_ARR           = 0000001C   
B_CELLS         = 0000000C   
B_cells_end       000001A4 R  text 
CELL_FRAMESIZE  = 00000018   
GENS            = 00000004   
NEXT_A          = 00000010   
NEXT_B          = 00000014   
PRINT_INT       = 00000001   
PRINT_STRING    = 00000004   
READ_INT        = 00000005   
READ_STRING     = 00000008   
get_A_cells       00000050 RG text 
get_A_error       000000D8 R  text 
get_B_cells       00000108 RG text 
get_B_error       00000190 R  text 
get_integer       00000000 RG text 
integer_store     0000003C R  text 
loc_loop_A        00000084 R  text 
loc_loop_B        0000013C R  text 
