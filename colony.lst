   1 0000               # File: $Id$
   2 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   3 0000               # Description: this file is the main file for the
   4 0000               #               cs250 project
   5 0000               
   6 0000               
   7 0000               
   8 0000               ###########################################
   9 0000               # ======================================= #
  10 0000               # ||        CONSTANTS BLOCK            || #
  11 0000               # ======================================= #
  12 0000               ###########################################
  13 0000               
  14 0000               # ===========================
  15 0000               # || param block constants ||
  16 0000               # ===========================
  17 0000               
  18 0000               DIM_OFFSET = 0
  19 0000               GEN_OFFSET = 4
  20 0000               A_OFFSET = 8
  21 0000               B_OFFSET = 12
  22 0000               NEXT_A_OFFSET = 16
  23 0000               NEXT_B_OFFSET = 20
  24 0000               A_ARRAY_OFFSET = 24
  25 0000               B_ARRAY_OFFSET = 28
  26 0000               
  27 0000               # syscall codes
  28 0000               
  29 0000               PRINT_INT =	1
  30 0000               PRINT_STRING = 	4
  31 0000               READ_INT = 	5
  32 0000               READ_STRING =	8
  33 0000               
  34 0000               # various frame sizes used by different routines
  35 0000               
  36 0000               FRAMESIZE_8 = 	8
  37 0000               FRAMESIZE_24 =	24
  38 0000               FRAMESIZE_40 =	40
  39 0000               FRAMESIZE_48 =	48
  40 0000               
  41 0000                       .data
  42 0000                       .align      2
  43 0000               
  44 0000               # ====================
  45 0000               #    INPUT STRINGS 
  46 0000               # ====================
  47 0000               
  48 0000               enter_board_size:
  49 0000 0A456E74	        .asciiz "\nEnter board size: "
          65722062
          6F617264
          2073697A
          653A2000
  50 0014               
  51 0014               enter_generations: 
  52 0014 0A456E74	        .asciiz "\nEnter number of generations to run: "
          6572206E
          756D6265
          72206F66
          2067656E
          65726174
  53 003a               
  54 003a               live_cells_A:
  55 003a 0A456E74	        .asciiz "\nEnter number of live cells for colony A: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  56 0065               
  57 0065               live_cells_B:
  58 0065 0A456E74	        .asciiz "\nEnter number of live cells for colony B: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  59 0090               
  60 0090               enter_locations:
  61 0090 0A537461	        .asciiz "\nStart entering locations: \n"
          72742065
          6E746572
          696E6720
          6C6F6361
          74696F6E
  62 00ad               
  63 00ad               # ====================
  64 00ad               #    OTHER STRINGS 
  65 00ad               # ====================
  66 00ad               
  67 00ad               banner:
  68 00ad 0A2A2A2A	        .ascii "\n**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  69 00c5 2A2A2A2A	        .ascii "****    Colony    ****\n"
          20202020
          436F6C6F
          6E792020
          20202A2A
          2A2A0A  
  70 00dc 2A2A2A2A	        .asciiz "**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A0A00
  71 00f4               
  72 00f4               gen_banner_start:
  73 00f4 3D3D3D3D	        .asciiz "====    GENERATION "
          20202020
          47454E45
          52415449
          4F4E2000
  74 0108               
  75 0108               gen_banner_end:
  76 0108 20202020	        .asciiz "    ====\n"
          3D3D3D3D
          0A00    
  77 0112               
  78 0112               newline: 
  79 0112 0A00    	        .asciiz "\n"
  80 0114               
  81 0114               space:
  82 0114 2000    	        .asciiz " "
  83 0116               
  84 0116               # ====================
  85 0116               #    ERROR STRINGS 
  86 0116               # ====================
  87 0116               
  88 0116               illegal_size:
  89 0116 0A574152	        .asciiz "\nWARNING: illegal board size, try again: "
          4E494E47
          3A20696C
          6C656761
          6C20626F
          61726420
  90 0140               
  91 0140               illegal_gens:
  92 0140 0A574152	        .asciiz "\nWARNING: illegal number of generations, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
  93 0175               
  94 0175               illegal_cells:
  95 0175 0A574152	        .asciiz "\nWARNING: illegal number of live cells, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
  96 01a9               
  97 01a9               illegal_point:
  98 01a9 0A574152	        .asciiz "\nWARNING: illegal point location\n"
          4E494E47
          3A20696C
          6C656761
          6C20706F
          696E7420
  99 01cb               
 100 01cb               # ====================
 101 01cb               #    DEBUG STRINGS  
 102 01cb               # ====================
 103 01cb               
 104 01cb               d_dim:
 105 01cb 0A20426F	        .asciiz "\n Board Dimensions: "
          61726420
          44696D65
          6E73696F
          6E733A20
          00      
 106 01e0               
 107 01e0               d_gen:
 108 01e0 0A204765	        .asciiz "\n Generations: "
          6E657261
          74696F6E
          733A2000
 109 01f0               
 110 01f0               d_a_cells:
 111 01f0 0A20436F	        .asciiz "\n Colony A Cells: "
          6C6F6E79
          20412043
          656C6C73
          3A2000  
 112 0203               
 113 0203               d_b_cells:
 114 0203 0A20436F	        .asciiz "\n Colony B Cells: "
          6C6F6E79
          20422043
          656C6C73
          3A2000  
 115 0216               
 116 0216               d_a_loc:
 117 0216 0A204120	        .asciiz "\n A Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 118 0228               
 119 0228               d_b_loc:
 120 0228 0A204220	        .asciiz "\n B Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 121 023a               
 122 023a               lp:
 123 023a 2800    	        .asciiz "("
 124 023c               comma:
 125 023c 2C2000  	        .asciiz ", "
 126 023f               rp:
 127 023f 2900    	        .asciiz ")"
 128 0241               
 129 0241               # ====================
 130 0241               #    BOARD STRINGS  
 131 0241               # ====================
 132 0241               
 133 0241               plus:
 134 0241 2B00    	        .asciiz "+"
 135 0243               
 136 0243               hyphen:
 137 0243 2D00    	        .asciiz "-"
 138 0245               
 139 0245               bar:
 140 0245 7C00    	        .asciiz "|"
 141 0247               
 142 0247               A:
 143 0247 4100    	        .asciiz "A"
 144 0249               B:
 145 0249 4200    	        .asciiz "B"
 146 024b               
 147 024b               # ====================
 148 024b               #     GAME BUFFERS
 149 024b               # ====================
 150 024b               # These addresses will hold the values read in by the user
 151 024b               # if a negative one is detected in a register, the value will
 152 024b               # be known to not be read in correctly
 153 024b               
 154 024b               board_dim:
 155 024b 00      	        .word       -1
     024c FFFFFFFF
 156 0250               
 157 0250               generations:
 158 0250 FFFFFFFF	        .word       -1
 159 0254               
 160 0254               A_cells:
 161 0254 FFFFFFFF	        .word       -1
 162 0258               
 163 0258               B_cells:
 164 0258 FFFFFFFF	        .word       -1
 165 025c               
 166 025c               a_next:
 167 025c 00000260	        .word       a_coordinates
 168 0260               
 169 0260               a_coordinates:                                          
 170 0260 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 171 1e80                       .align      2
 172 1e80               
 173 1e80               b_next:
 174 1e80 00001E84	        .word       b_coordinates
 175 1e84               
 176 1e84               b_coordinates:
 177 1e84 00000000	        .space      7200                            #space for 300 y's
          00000000
          00000000
          00000000
          00000000
          00000000
 178 3aa4                       .align      2
 179 3aa4               
 180 3aa4                       #   === 32 byte structure ===   #
 181 3aa4               
 182 3aa4               param_block:
 183 3aa4 0000024C	        .word       board_dim                       #0 offset
 184 3aa8 00000250	        .word       generations                     #4 offset
 185 3aac 00000254	        .word       A_cells                         #8 offset
 186 3ab0 00000258	        .word       B_cells                         #12 offset
 187 3ab4 0000025C	        .word       a_next                          #16 offset
 188 3ab8 00001E80	        .word       b_next                          #20 offset
 189 3abc 00000260	        .word       a_coordinates                   #24 offset
 190 3ac0 00001E84	        .word       b_coordinates                   #28 offset
 191 3ac4               
 192 3ac4               board_1:
 193 3ac4 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 194 3e48                       .align      2
 195 3e48                       
 196 3e48               board_2:
 197 3e48 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 198 41cc                       .align      2
 199 41cc               
 200 41cc               ###########################################
 201 41cc               # ======================================= #
 202 41cc               # ||        MAIN CODE BLOCK            || #
 203 41cc               # ======================================= #
 204 41cc               ###########################################
 205 0000                       .text
 206 0000                       .align      2
 207 0000                       .globl      main
 208 0000                       .globl      get_integer
 209 0000                       .globl      get_A_cells
 210 0000                       .globl      get_B_cells
 211 0000               
 212 0000               main:       
 213 0000 23BDFFD0	        addi    $sp, $sp, -FRAMESIZE_48
 214 0004 AFBF002C	        sw      $ra, -4+FRAMESIZE_48($sp)
 215 0008                       
 216 0008 34020004	        li      $v0, PRINT_STRING                   #print banner
 217 000c 3C040000	        la      $a0, banner
     0010 34840000
 218 0014 0000000C	        syscall
 219 0018                       
 220 0018                       # ---------------------------- #
 221 0018                       #       Get user input         #
 222 0018                       # ---------------------------- #
 223 0018               
 224 0018                       # print and get board dimensions #
 225 0018               
 226 0018 34020004	        li      $v0, PRINT_STRING                    
 227 001c 3C040000	        la      $a0, enter_board_size
     0020 34840000
 228 0024 0000000C	        syscall
 229 0028                       
 230 0028 3C040000	        la      $a0, board_dim 
     002c 34840000
 231 0030 34050004	        li      $a1, 4
 232 0034 3406001E	        li      $a2, 30
 233 0038 3C070000	        la      $a3, illegal_size
     003c 34E70000
 234 0040 0C000000	        jal     get_integer
 235 0044                       
 236 0044                       # print and get generations #
 237 0044               
 238 0044 34020004	        li      $v0, PRINT_STRING                    
 239 0048 3C040000	        la      $a0, enter_generations
     004c 34840000
 240 0050 0000000C	        syscall
 241 0054                       
 242 0054 3C040000	        la      $a0, generations
     0058 34840000
 243 005c 34050000	        li      $a1, 0
 244 0060 34060014	        li      $a2, 20
 245 0064 3C070000	        la      $a3, illegal_gens
     0068 34E70000
 246 006c 0C000000	        jal     get_integer
 247 0070               
 248 0070                       # print and get A colony size #
 249 0070               
 250 0070 34020004	        li      $v0, PRINT_STRING                    
 251 0074 3C040000	        la      $a0, live_cells_A
     0078 34840000
 252 007c 0000000C	        syscall
 253 0080                       
 254 0080 3C040000	        la      $a0, A_cells
     0084 34840000
 255 0088 34050000	        li      $a1, 0
 256 008c 3C060000	        la      $a2, board_dim
     0090 34C60000
 257 0094 8CC60000	        lw      $a2, 0($a2)
 258 0098 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     009c 00003012
 259 00a0 3C070000	        la      $a3, illegal_cells
     00a4 34E70000
 260 00a8 0C000000	        jal     get_integer
 261 00ac               
 262 00ac                       # print and get A colony locations #
 263 00ac               
 264 00ac 34020004	        li      $v0, PRINT_STRING                    
 265 00b0 3C040000	        la      $a0, enter_locations
     00b4 34840000
 266 00b8 0000000C	        syscall
 267 00bc                       
 268 00bc 3C040000	        la      $a0, param_block
     00c0 34840000
 269 00c4 3C050000	        la      $a1, illegal_point
     00c8 34A50000
 270 00cc 0C000000	        jal     get_A_cells
 271 00d0               
 272 00d0                       # print and get B colony size #
 273 00d0               
 274 00d0 34020004	        li      $v0, PRINT_STRING                    
 275 00d4 3C040000	        la      $a0, live_cells_B
     00d8 34840000
 276 00dc 0000000C	        syscall
 277 00e0                       
 278 00e0 3C040000	        la      $a0, B_cells
     00e4 34840000
 279 00e8 34050000	        li      $a1, 0
 280 00ec 3C060000	        la      $a2, board_dim
     00f0 34C60000
 281 00f4 8CC60000	        lw      $a2, 0($a2)
 282 00f8 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     00fc 00003012
 283 0100 3C070000	        la      $a3, illegal_cells
     0104 34E70000
 284 0108 0C000000	        jal     get_integer
 285 010c                       
 286 010c                       # print and get B colony locations #
 287 010c               
 288 010c 34020004	        li      $v0, PRINT_STRING                    
 289 0110 3C040000	        la      $a0, enter_locations
     0114 34840000
 290 0118 0000000C	        syscall
 291 011c                       
 292 011c 3C040000	        la      $a0, param_block
     0120 34840000
 293 0124 3C050000	        la      $a1, illegal_point
     0128 34A50000
 294 012c 0C000000	        jal     get_B_cells
 295 0130                       
 296 0130               
 297 0130                       # == test input grabbing == #
 298 0130 3C040000	        la      $a0, param_block
     0134 34840000
 299 0138 0C0000D2	        jal     debug_params
 300 013c                       
 301 013c               
 302 013c                       #set up board       
 303 013c 0C000089	        jal     setup_board
 304 0140                       #jal     print_board
 305 0140                       #jal     run_conway
 306 0140               
 307 0140               end_main:
 308 0140 8FBF002C	        lw      $ra, -4+FRAMESIZE_48($sp)
 309 0144 23BD0030	        addi    $sp, $sp, FRAMESIZE_48
 310 0148 03E00008	        jr      $ra
 311 014c               
 312 014c               # =========================================================
 313 014c               # Name:             print_board 
 314 014c               # =========================================================
 315 014c               # Description:      print the board as a 2D array
 316 014c               #                   
 317 014c               #
 318 014c               # Parameters:
 319 014c               #       s0 -        the dim of the board
 320 014c               #       s1 -        the pointer to the row to print
 321 014c               #       s2 -        the addr ofthe array
 322 014c               #
 323 014c               # T Registers:
 324 014c               #       t0 -        row loop flag
 325 014c               #       t1 -        row loop counter
 326 014c               #       t2 -        col loop counter
 327 014c               #       t3 -        pointer for col in row
 328 014c               #       t4 -        column loop flag
 329 014c               #
 330 014c               # =========================================================
 331 014c               
 332 014c               print_board: 
 333 014c 23BDFFF0	        addi    $sp, $sp, -16 
 334 0150 AFBF000C	        sw      $ra, 12($sp)
 335 0154 AFB00008	        sw      $s0, 8($sp)
 336 0158 AFB10004	        sw      $s1, 4($sp)
 337 015c 8FB20000	        lw      $s2, 0($sp)
 338 0160               
 339 0160                       # get board dim #
 340 0160               
 341 0160 0C0000A1	        jal     get_board_dim
 342 0164 00408021	        move    $s0, $v0
 343 0168               
 344 0168                       # get board space #
 345 0168               
 346 0168 3C110000	        la      $s1, board_1
     016c 36310000
 347 0170 3C120000	        la      $s2, board_1
     0174 36520000
 348 0178               
 349 0178                       # calculate row to start at#
 350 0178               
 351 0178 2209FFFF	        addi    $t1, $s0, -1                        # row = dim - 1
 352 017c 00005021	        move    $t2, $zero                          # col = 0
 353 0180                       
 354 0180               print_row_loop:
 355 0180 2928FFFF	        slti    $t0, $t1, -1                        #while(row >= 0)
 356 0184 15000021	        bne     $t0, $zero, print_board_end 
 357 0188               
 358 0188 3C040000	        la      $a0, bar                            #print("|")
     018c 34840000
 359 0190 34020004	        li      $v0, PRINT_STRING 
 360 0194 0000000C	        syscall
 361 0198               
 362 0198                       # calculate row address #
 363 0198 34010001	        mul     $s1, $s0, 1                         # len_c = size(char) * dim
     019c 02010018
     01a0 00008812
 364 01a4 02290018	        mul     $s1, $s1, $t1                       # offset = len_c * row
     01a8 00008812
 365 01ac 02518820	        add     $s1, $s2, $s1                       # r_addr = base + offset
 366 01b0                       
 367 01b0               print_col_loop:
 368 01b0 0150602A	        slt     $t4, $t2, $s0                       #while(col < dim)
 369 01b4 1180000A	        beq     $t4, $zero, end_col_loop
 370 01b8               
 371 01b8 02205821	        move    $t3, $s1                            #load addr of arr[row][0]
 372 01bc               
 373 01bc 34010001	        mul     $t5, $t2, 1                         #sizeof(char)*col_index
     01c0 01410018
     01c4 00006812
 374 01c8 016D5820	        add     $t3, $t3, $t5                       #row base + offset
 375 01cc               
 376 01cc 81640000	        lb      $a0, 0($t3)
 377 01d0 34020004	        li      $v0, PRINT_STRING
 378 01d4 0000000C	        syscall                                     #print(arr[row][col])
 379 01d8                       
 380 01d8 214A0001	        addi    $t2, $t2, 1                         #col++
 381 01dc 0800006C	        j       print_col_loop
 382 01e0               
 383 01e0               end_col_loop:
 384 01e0                       
 385 01e0 3C040000	        la      $a0, bar                            #print("|")
     01e4 34840000
 386 01e8 34020004	        li      $v0, PRINT_STRING 
 387 01ec 0000000C	        syscall
 388 01f0               
 389 01f0 3C040000	        la      $a0, newline                       #print("\n")
     01f4 34840000
 390 01f8 34020004	        li      $v0, PRINT_STRING 
 391 01fc 0000000C	        syscall
 392 0200                       
 393 0200 00005021	        move    $t2, $zero                          # col = 0
 394 0204 2129FFFF	        addi    $t1, $t1, -1                        # row--
 395 0208 08000060	        j       print_row_loop
 396 020c               
 397 020c               
 398 020c               print_board_end:
 399 020c 8FBF000C	        lw      $ra, 12($sp)
 400 0210 8FB00008	        lw      $s0, 8($sp)
 401 0214 8FB10004	        lw      $s1, 4($sp)
 402 0218 8FB20000	        lw      $s2, 0($sp)
 403 021c 23BD0010	        addi    $sp, $sp, 16
 404 0220 03E00008	        jr      $ra
 405 0224                       
 406 0224               
 407 0224               
 408 0224               # =========================================================
 409 0224               # Name:             setup_board
 410 0224               # =========================================================
 411 0224               # Description:      this fills the spots in the array with 
 412 0224               #                   either an "A", "B", or " "(space)
 413 0224               #
 414 0224               # Parameters:
 415 0224               #       - s0        the board dimension
 416 0224               #       - s1        the pointer to pos in 2d array
 417 0224               #       - s2        the addr of the end 2d array
 418 0224               #
 419 0224               # T Registers:
 420 0224               #       - t2        addr of a_coordinates
 421 0224               #       - t3        addr of b_coordinates
 422 0224               #       - t9        pointer to curr in array
 423 0224               #
 424 0224               #
 425 0224               # =========================================================
 426 0224               setup_board:
 427 0224 23BDFFF0	        addi    $sp, $sp, -16
 428 0228 AFBF000C	        sw      $ra, 12($sp)
 429 022c AFB00008	        sw      $s0, 8($sp)
 430 0230 AFB10004	        sw      $s1, 4($sp)
 431 0234 AFB20000	        sw      $s2, 0($sp)
 432 0238               
 433 0238 0C0000A1	        jal     get_board_dim                       #get board dim
 434 023c 00408021	        move    $s0, $v0
 435 0240 3C110000	        la      $s1, board_1                        #get board addr
     0244 36310000
 436 0248                       #lw      $s1, 0($s1)
 437 0248                   
 438 0248 02100018	        mul     $t0, $s0, $s0                       #dim^2
     024c 00004012
 439 0250 01119020	        add     $s2, $t0, $s1                       #pointer to end of array
 440 0254               
 441 0254 34090020	        li      $t1, 32                             #t1 = ascii " "
 442 0258               load_blanks:
 443 0258 0251402A	        slt     $t0, $s2, $s1                       # i == dim; break
 444 025c 15000003	        bne     $t0, $zero, fill_array
 445 0260                       
 446 0260 A2290000	        sb      $t1, 0($s1)                         #arr[i] = ' ';
 447 0264               
 448 0264 22310001	        addi    $s1, $s1, 1                         #i++
 449 0268 08000096	        j       load_blanks
 450 026c               
 451 026c               fill_array:
 452 026c               
 453 026c               setup_end:
 454 026c 8FBF000C	        lw      $ra, 12($sp)
 455 0270 8FB00008	        lw      $s0, 8($sp)
 456 0274 8FB10004	        lw      $s1, 4($sp)
 457 0278 8FB20000	        lw      $s2, 0($sp)
 458 027c 23BD0010	        addi    $sp, $sp, 16
 459 0280 03E00008	        jr      $ra
 460 0284               
 461 0284               ###########################################
 462 0284               # ======================================= #
 463 0284               # ||        Helper Code                || #
 464 0284               # ======================================= #
 465 0284               ###########################################
 466 0284               
 467 0284               get_board_dim:
 468 0284 3C080000	        la      $t0, board_dim
     0288 35080000
 469 028c 8D020000	        lw      $v0, 0($t0)
 470 0290 03E00008	        jr      $ra
 471 0294               
 472 0294               get_generations:
 473 0294 3C080000	        la      $t0, generations
     0298 35080000
 474 029c 8D020000	        lw      $v0, 0($t0)
 475 02a0 03E00008	        jr      $ra
 476 02a4               
 477 02a4               get_a:
 478 02a4 3C080000	        la      $t0, A_cells
     02a8 35080000
 479 02ac 8D020000	        lw      $v0, 0($t0)
 480 02b0 03E00008	        jr      $ra
 481 02b4               
 482 02b4               get_b:
 483 02b4 3C080000	        la      $t0, B_cells
     02b8 35080000
 484 02bc 8D020000	        lw      $v0, 0($t0)
 485 02c0 03E00008	        jr      $ra
 486 02c4               
 487 02c4               
 488 02c4               # =========================================================
 489 02c4               # Name:             print_locations
 490 02c4               # =========================================================
 491 02c4               # Description:      prints an array of location "structs"
 492 02c4               #                   each structure is 8 bytes long where:
 493 02c4               #                       - 0 -> x coordinate
 494 02c4               #                       - 4 offset -> y coordinate
 495 02c4               #
 496 02c4               # Parameters:
 497 02c4               #       a0 -        the location of array to print
 498 02c4               #       a1 -        the size of the array
 499 02c4               #
 500 02c4               # T Registers:
 501 02c4               #       t0 -        loop counter
 502 02c4               #     
 503 02c4               # =========================================================
 504 02c4               
 505 02c4               print_locations:
 506 02c4 34080000	        li      $t0, 0                              # i == 0
 507 02c8 00804821	        move    $t1, $a0                            # pointer
 508 02cc               
 509 02cc               print_loop:
 510 02cc 11050019	        beq     $t0, $a1, print_done                #done if i == n 
 511 02d0               
 512 02d0 3C040000	        la      $a0, newline
     02d4 34840000
 513 02d8 34020004	        li      $v0, PRINT_STRING                   #print \n
 514 02dc 0000000C	        syscall
 515 02e0                       
 516 02e0 3C040000	        la      $a0, lp
     02e4 34840000
 517 02e8 34020004	        li      $v0, PRINT_STRING                   #print (
 518 02ec 0000000C	        syscall
 519 02f0                       
 520 02f0 8D240000	        lw      $a0, 0($t1)                         #get a[i].x
 521 02f4 34020001	        li      $v0, PRINT_INT
 522 02f8 0000000C	        syscall                                     #print a[i].x
 523 02fc               
 524 02fc 3C040000	        la      $a0, comma
     0300 34840000
 525 0304 34020004	        li      $v0, PRINT_STRING                   #print ,
 526 0308 0000000C	        syscall
 527 030c                       
 528 030c 8D240004	        lw      $a0, 4($t1)                         #get a[i].y
 529 0310 34020001	        li      $v0, PRINT_INT
 530 0314 0000000C	        syscall                                     #print a[i].y
 531 0318                       
 532 0318 3C040000	        la      $a0, rp
     031c 34840000
 533 0320 34020004	        li      $v0, PRINT_STRING                   #print )
 534 0324 0000000C	        syscall
 535 0328                       
 536 0328 21290008	        addi    $t1, $t1, 8                         #update pointer
 537 032c 21080001	        addi    $t0, $t0, 1                         #i++
 538 0330 080000B3	        j       print_loop
 539 0334               
 540 0334               print_done:
 541 0334 3C040000	        la      $a0, newline
     0338 34840000
 542 033c 34020004	        li      $v0, PRINT_STRING
 543 0340 0000000C	        syscall
 544 0344                       
 545 0344 03E00008	        jr      $ra
 546 0348               
 547 0348               # =========================================================
 548 0348               # Name:             debug_params
 549 0348               # =========================================================
 550 0348               # Description:      print the inputs in the param block
 551 0348               #
 552 0348               # Parameters:
 553 0348               #       a0 -        the parameter block
 554 0348               # S Registers:
 555 0348               #       s0 -        the saved parameter block
 556 0348               # =========================================================
 557 0348               
 558 0348               debug_params:
 559 0348                       
 560 0348 23BDFFF8	        addi    $sp, $sp, -8
 561 034c AFBF0004	        sw      $ra, 4($sp)
 562 0350 AFB00000	        sw      $s0, 0($sp)
 563 0354                       
 564 0354 00808021	        move    $s0, $a0                            #save param block
 565 0358               
 566 0358                       # print board dimensions #
 567 0358               
 568 0358 34020004	        li      $v0, PRINT_STRING
 569 035c 3C040000	        la      $a0, d_dim
     0360 34840000
 570 0364 0000000C	        syscall
 571 0368               
 572 0368 0C0000A1	        jal     get_board_dim                       #get the value of board dim
 573 036c 00402021	        move    $a0, $v0
 574 0370 34020001	        li      $v0, PRINT_INT                      #print board dim
 575 0374 0000000C	        syscall
 576 0378               
 577 0378                       # print generations #
 578 0378               
 579 0378 34020004	        li      $v0, PRINT_STRING
 580 037c 3C040000	        la      $a0, d_gen
     0380 34840000
 581 0384 0000000C	        syscall
 582 0388 0C0000A5	        jal     get_generations                     #value of generations
 583 038c 00402021	        move    $a0, $v0
 584 0390 34020001	        li      $v0, PRINT_INT                      #print generations
 585 0394 0000000C	        syscall
 586 0398               
 587 0398                       # print colony A size #
 588 0398               
 589 0398 34020004	        li      $v0, PRINT_STRING
 590 039c 3C040000	        la      $a0, d_a_cells
     03a0 34840000
 591 03a4 0000000C	        syscall
 592 03a8 0C0000A9	        jal     get_a                               #get size a
 593 03ac 00402021	        move    $a0, $v0
 594 03b0 34020001	        li      $v0, PRINT_INT                      #print size of a
 595 03b4 0000000C	        syscall
 596 03b8               
 597 03b8                       # print locations #
 598 03b8 34020004	        li      $v0, PRINT_STRING
 599 03bc 3C040000	        la      $a0, d_a_loc
     03c0 34840000
 600 03c4 0000000C	        syscall
 601 03c8               
 602 03c8 3C040000	        la      $a0, a_coordinates
     03cc 34840000
 603 03d0 0C0000A9	        jal     get_a                               #get size a
 604 03d4 00402821	        move    $a1, $v0
 605 03d8 0C0000B1	        jal     print_locations
 606 03dc               
 607 03dc               
 608 03dc                       # print colony B size#
 609 03dc               
 610 03dc 34020004	        li      $v0, PRINT_STRING
 611 03e0 3C040000	        la      $a0, d_b_cells
     03e4 34840000
 612 03e8 0000000C	        syscall
 613 03ec 0C0000AD	        jal     get_b                               #get size b
 614 03f0 00402021	        move    $a0, $v0
 615 03f4 34020001	        li      $v0, PRINT_INT                      #print it
 616 03f8 0000000C	        syscall
 617 03fc               
 618 03fc                       # print locations#
 619 03fc 34020004	        li      $v0, PRINT_STRING
 620 0400 3C040000	        la      $a0, d_b_loc
     0404 34840000
 621 0408 0000000C	        syscall
 622 040c               
 623 040c 3C040000	        la      $a0, b_coordinates                  #get addr of arr
     0410 34840000
 624 0414 0C0000AD	        jal     get_b                               #get size b
 625 0418 00402821	        move    $a1, $v0
 626 041c 0C0000B1	        jal     print_locations
 627 0420               
 628 0420 34020004	        li      $v0, PRINT_STRING
 629 0424 3C040000	        la      $a0, newline
     0428 34840000
 630 042c 0000000C	        syscall
 631 0430                       
 632 0430 8FBF0004	        lw      $ra, 4($sp)
 633 0434 8FB00000	        lw      $s0, 0($sp)
 634 0438 23BD0008	        addi    $sp, $sp, 8
 635 043c 03E00008	        jr      $ra
 636 0440               


A                    00000247 R  data 
A_ARRAY_OFFSET     = 00000018   
A_OFFSET           = 00000008   
A_cells              00000254 R  data 
B                    00000249 R  data 
B_ARRAY_OFFSET     = 0000001C   
B_OFFSET           = 0000000C   
B_cells              00000258 R  data 
DIM_OFFSET         = 00000000   
FRAMESIZE_24       = 00000018   
FRAMESIZE_40       = 00000028   
FRAMESIZE_48       = 00000030   
FRAMESIZE_8        = 00000008   
GEN_OFFSET         = 00000004   
NEXT_A_OFFSET      = 00000010   
NEXT_B_OFFSET      = 00000014   
PRINT_INT          = 00000001   
PRINT_STRING       = 00000004   
READ_INT           = 00000005   
READ_STRING        = 00000008   
a_coordinates        00000260 R  data 
a_next               0000025C R  data 
b_coordinates        00001E84 R  data 
b_next               00001E80 R  data 
banner               000000AD R  data 
bar                  00000245 R  data 
board_1              00003AC4 R  data 
board_2              00003E48 R  data 
board_dim            0000024C R  data 
comma                0000023C R  data 
d_a_cells            000001F0 R  data 
d_a_loc              00000216 R  data 
d_b_cells            00000203 R  data 
d_b_loc              00000228 R  data 
d_dim                000001CB R  data 
d_gen                000001E0 R  data 
debug_params         00000348 R  text 
end_col_loop         000001E0 R  text 
end_main             00000140 R  text 
enter_board_size     00000000 R  data 
enter_generations    00000014 R  data 
enter_locations      00000090 R  data 
fill_array           0000026C R  text 
gen_banner_end       00000108 R  data 
gen_banner_start     000000F4 R  data 
generations          00000250 R  data 
get_A_cells          ******** XG
get_B_cells          ******** XG
get_a                000002A4 R  text 
get_b                000002B4 R  text 
get_board_dim        00000284 R  text 
get_generations      00000294 R  text 
get_integer          ******** XG
hyphen               00000243 R  data 
illegal_cells        00000175 R  data 
illegal_gens         00000140 R  data 
illegal_point        000001A9 R  data 
illegal_size         00000116 R  data 
live_cells_A         0000003A R  data 
live_cells_B         00000065 R  data 
load_blanks          00000258 R  text 
lp                   0000023A R  data 
main                 00000000 RG text 
newline              00000112 R  data 
param_block          00003AA4 R  data 
plus                 00000241 R  data 
print_board          0000014C R  text 
print_board_end      0000020C R  text 
print_col_loop       000001B0 R  text 
print_done           00000334 R  text 
print_locations      000002C4 R  text 
print_loop           000002CC R  text 
print_row_loop       00000180 R  text 
rp                   0000023F R  data 
setup_board          00000224 R  text 
setup_end            0000026C R  text 
space                00000114 R  data 
