   1 0000               # File: $Id$
   2 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   3 0000               # Description: this file is the main file for the
   4 0000               #               cs250 project
   5 0000               
   6 0000               
   7 0000               
   8 0000               ###########################################
   9 0000               # ======================================= #
  10 0000               # ||        CONSTANTS BLOCK            || #
  11 0000               # ======================================= #
  12 0000               ###########################################
  13 0000               
  14 0000               # ===========================
  15 0000               # || param block constants ||
  16 0000               # ===========================
  17 0000               
  18 0000               DIM_OFFSET = 0
  19 0000               GEN_OFFSET = 4
  20 0000               A_OFFSET = 8
  21 0000               B_OFFSET = 12
  22 0000               NEXT_A_OFFSET = 16
  23 0000               NEXT_B_OFFSET = 20
  24 0000               A_ARRAY_OFFSET = 24
  25 0000               B_ARRAY_OFFSET = 28
  26 0000               
  27 0000               # syscall codes
  28 0000               
  29 0000               PRINT_INT =	1
  30 0000               PRINT_STRING = 	4
  31 0000               READ_INT = 	5
  32 0000               READ_STRING =	8
  33 0000               PRINT_CHAR = 11 
  34 0000               
  35 0000               # various frame sizes used by different routines
  36 0000               REGISTER_1 = 8
  37 0000               REGISTERS_2 = 12
  38 0000               REGISTERS_3 = 16
  39 0000               REGISTERS_4 = 20
  40 0000               REGISTERS_5 = 24
  41 0000               REGISTERS_6 = 28
  42 0000               REGISTERS_7 = 32
  43 0000               REGISTERS_8 = 36
  44 0000               
  45 0000               FRAMESIZE_48 =	48
  46 0000               
  47 0000                       .data
  48 0000                       .align      2
  49 0000               
  50 0000               # ====================
  51 0000               #    INPUT STRINGS 
  52 0000               # ====================
  53 0000               
  54 0000               enter_board_size:
  55 0000 0A456E74	        .asciiz "\nEnter board size: "
          65722062
          6F617264
          2073697A
          653A2000
  56 0014               
  57 0014               enter_generations: 
  58 0014 0A456E74	        .asciiz "\nEnter number of generations to run: "
          6572206E
          756D6265
          72206F66
          2067656E
          65726174
  59 003a               
  60 003a               live_cells_A:
  61 003a 0A456E74	        .asciiz "\nEnter number of live cells for colony A: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  62 0065               
  63 0065               live_cells_B:
  64 0065 0A456E74	        .asciiz "\nEnter number of live cells for colony B: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  65 0090               
  66 0090               enter_locations:
  67 0090 0A537461	        .asciiz "\nStart entering locations: \n"
          72742065
          6E746572
          696E6720
          6C6F6361
          74696F6E
  68 00ad               
  69 00ad               # ====================
  70 00ad               #    OTHER STRINGS 
  71 00ad               # ====================
  72 00ad               
  73 00ad               banner:
  74 00ad 0A2A2A2A	        .ascii "\n**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  75 00c5 2A2A2A2A	        .ascii "****    Colony    ****\n"
          20202020
          436F6C6F
          6E792020
          20202A2A
          2A2A0A  
  76 00dc 2A2A2A2A	        .asciiz "**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A0A00
  77 00f4               
  78 00f4               gen_banner_start:
  79 00f4 3D3D3D3D	        .asciiz "====    GENERATION "
          20202020
          47454E45
          52415449
          4F4E2000
  80 0108               
  81 0108               gen_banner_end:
  82 0108 20202020	        .asciiz "    ====\n"
          3D3D3D3D
          0A00    
  83 0112               
  84 0112               newline: 
  85 0112 0A00    	        .asciiz "\n"
  86 0114               
  87 0114               space:
  88 0114 2000    	        .asciiz " "
  89 0116               
  90 0116               # ====================
  91 0116               #    ERROR STRINGS 
  92 0116               # ====================
  93 0116               
  94 0116               illegal_size:
  95 0116 0A574152	        .asciiz "\nWARNING: illegal board size, try again: "
          4E494E47
          3A20696C
          6C656761
          6C20626F
          61726420
  96 0140               
  97 0140               illegal_gens:
  98 0140 0A574152	        .asciiz "\nWARNING: illegal number of generations, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
  99 0175               
 100 0175               illegal_cells:
 101 0175 0A574152	        .asciiz "\nWARNING: illegal number of live cells, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 102 01a9               
 103 01a9               illegal_point:
 104 01a9 0A574152	        .asciiz "\nWARNING: illegal point location\n"
          4E494E47
          3A20696C
          6C656761
          6C20706F
          696E7420
 105 01cb               
 106 01cb               # ====================
 107 01cb               #    DEBUG STRINGS  
 108 01cb               # ====================
 109 01cb               
 110 01cb               d_dim:
 111 01cb 0A20426F	        .asciiz "\n Board Dimensions: "
          61726420
          44696D65
          6E73696F
          6E733A20
          00      
 112 01e0               
 113 01e0               d_gen:
 114 01e0 0A204765	        .asciiz "\n Generations: "
          6E657261
          74696F6E
          733A2000
 115 01f0               
 116 01f0               d_a_cells:
 117 01f0 0A20436F	        .asciiz "\n Colony A Cells: "
          6C6F6E79
          20412043
          656C6C73
          3A2000  
 118 0203               
 119 0203               d_b_cells:
 120 0203 0A20436F	        .asciiz "\n Colony B Cells: "
          6C6F6E79
          20422043
          656C6C73
          3A2000  
 121 0216               
 122 0216               d_a_loc:
 123 0216 0A204120	        .asciiz "\n A Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 124 0228               
 125 0228               d_b_loc:
 126 0228 0A204220	        .asciiz "\n B Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 127 023a               
 128 023a               lp:
 129 023a 2800    	        .asciiz "("
 130 023c               comma:
 131 023c 2C2000  	        .asciiz ", "
 132 023f               rp:
 133 023f 2900    	        .asciiz ")"
 134 0241               
 135 0241               # ====================
 136 0241               #    BOARD STRINGS  
 137 0241               # ====================
 138 0241               
 139 0241               plus:
 140 0241 2B00    	        .asciiz "+"
 141 0243               
 142 0243               minus:
 143 0243 2D00    	        .asciiz "-"
 144 0245               
 145 0245               bar:
 146 0245 7C00    	        .asciiz "|"
 147 0247               
 148 0247               A:
 149 0247 4100    	        .asciiz "A"
 150 0249               B:
 151 0249 4200    	        .asciiz "B"
 152 024b               
 153 024b               # ====================
 154 024b               #     GAME BUFFERS
 155 024b               # ====================
 156 024b               # These addresses will hold the values read in by the user
 157 024b               # if a negative one is detected in a register, the value will
 158 024b               # be known to not be read in correctly
 159 024b               
 160 024b               board_dim:
 161 024b 00      	        .word       -1
     024c FFFFFFFF
 162 0250               
 163 0250               generations:
 164 0250 FFFFFFFF	        .word       -1
 165 0254               
 166 0254               A_cells:
 167 0254 FFFFFFFF	        .word       -1
 168 0258               
 169 0258               B_cells:
 170 0258 FFFFFFFF	        .word       -1
 171 025c               
 172 025c               a_next:
 173 025c 00000260	        .word       a_coordinates
 174 0260               
 175 0260               a_coordinates:                                          
 176 0260 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 177 1e80                       .align      2
 178 1e80               
 179 1e80               b_next:
 180 1e80 00001E84	        .word       b_coordinates
 181 1e84               
 182 1e84               b_coordinates:
 183 1e84 00000000	        .space      7200                            #space for 300 y's
          00000000
          00000000
          00000000
          00000000
          00000000
 184 3aa4                       .align      2
 185 3aa4               
 186 3aa4                       #   === 32 byte structure ===   #
 187 3aa4               
 188 3aa4               param_block:
 189 3aa4 0000024C	        .word       board_dim                       #0 offset
 190 3aa8 00000250	        .word       generations                     #4 offset
 191 3aac 00000254	        .word       A_cells                         #8 offset
 192 3ab0 00000258	        .word       B_cells                         #12 offset
 193 3ab4 0000025C	        .word       a_next                          #16 offset
 194 3ab8 00001E80	        .word       b_next                          #20 offset
 195 3abc 00000260	        .word       a_coordinates                   #24 offset
 196 3ac0 00001E84	        .word       b_coordinates                   #28 offset
 197 3ac4               
 198 3ac4               board_1:
 199 3ac4 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 200 3e48                       .align      2
 201 3e48                       
 202 3e48               board_2:
 203 3e48 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 204 41cc                       .align      2
 205 41cc               
 206 41cc               a_coordinates_2:                                          
 207 41cc 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 208 5dec                       .align      2
 209 5dec               
 210 5dec               b_coordinates_2:                                          
 211 5dec 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 212 7a0c                       .align      2
 213 7a0c               ###########################################
 214 7a0c               # ======================================= #
 215 7a0c               # ||        MAIN CODE BLOCK            || #
 216 7a0c               # ======================================= #
 217 7a0c               ###########################################
 218 0000                       .text
 219 0000                       .align      2
 220 0000                       .globl      main
 221 0000                       .globl      get_integer
 222 0000                       .globl      get_A_cells
 223 0000                       .globl      get_B_cells
 224 0000               
 225 0000               main:       
 226 0000 23BDFFD0	        addi    $sp, $sp, -FRAMESIZE_48
 227 0004 AFBF002C	        sw      $ra, -4+FRAMESIZE_48($sp)
 228 0008                       
 229 0008 34020004	        li      $v0, PRINT_STRING                   #print banner
 230 000c 3C040000	        la      $a0, banner
     0010 34840000
 231 0014 0000000C	        syscall
 232 0018                       
 233 0018                       # ---------------------------- #
 234 0018                       #       Get user input         #
 235 0018                       # ---------------------------- #
 236 0018               
 237 0018                       # print and get board dimensions #
 238 0018               
 239 0018 34020004	        li      $v0, PRINT_STRING                    
 240 001c 3C040000	        la      $a0, enter_board_size
     0020 34840000
 241 0024 0000000C	        syscall
 242 0028                       
 243 0028 3C040000	        la      $a0, board_dim 
     002c 34840000
 244 0030 34050004	        li      $a1, 4
 245 0034 3406001E	        li      $a2, 30
 246 0038 3C070000	        la      $a3, illegal_size
     003c 34E70000
 247 0040 0C000000	        jal     get_integer
 248 0044                       
 249 0044                       # print and get generations #
 250 0044               
 251 0044 34020004	        li      $v0, PRINT_STRING                    
 252 0048 3C040000	        la      $a0, enter_generations
     004c 34840000
 253 0050 0000000C	        syscall
 254 0054                       
 255 0054 3C040000	        la      $a0, generations
     0058 34840000
 256 005c 34050000	        li      $a1, 0
 257 0060 34060014	        li      $a2, 20
 258 0064 3C070000	        la      $a3, illegal_gens
     0068 34E70000
 259 006c 0C000000	        jal     get_integer
 260 0070               
 261 0070                       # print and get A colony size #
 262 0070               
 263 0070 34020004	        li      $v0, PRINT_STRING                    
 264 0074 3C040000	        la      $a0, live_cells_A
     0078 34840000
 265 007c 0000000C	        syscall
 266 0080                       
 267 0080 3C040000	        la      $a0, A_cells
     0084 34840000
 268 0088 34050000	        li      $a1, 0
 269 008c 3C060000	        la      $a2, board_dim
     0090 34C60000
 270 0094 8CC60000	        lw      $a2, 0($a2)
 271 0098 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     009c 00003012
 272 00a0 3C070000	        la      $a3, illegal_cells
     00a4 34E70000
 273 00a8 0C000000	        jal     get_integer
 274 00ac               
 275 00ac                       # print and get A colony locations #
 276 00ac               
 277 00ac 34020004	        li      $v0, PRINT_STRING                    
 278 00b0 3C040000	        la      $a0, enter_locations
     00b4 34840000
 279 00b8 0000000C	        syscall
 280 00bc                       
 281 00bc 3C040000	        la      $a0, param_block
     00c0 34840000
 282 00c4 3C050000	        la      $a1, illegal_point
     00c8 34A50000
 283 00cc 3C060000	        la      $a2, a_coordinates_2
     00d0 34C60000
 284 00d4 0C000000	        jal     get_A_cells
 285 00d8               
 286 00d8                       # print and get B colony size #
 287 00d8               
 288 00d8 34020004	        li      $v0, PRINT_STRING                    
 289 00dc 3C040000	        la      $a0, live_cells_B
     00e0 34840000
 290 00e4 0000000C	        syscall
 291 00e8                       
 292 00e8 3C040000	        la      $a0, B_cells
     00ec 34840000
 293 00f0 34050000	        li      $a1, 0
 294 00f4 3C060000	        la      $a2, board_dim
     00f8 34C60000
 295 00fc 8CC60000	        lw      $a2, 0($a2)
 296 0100 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     0104 00003012
 297 0108 3C070000	        la      $a3, illegal_cells
     010c 34E70000
 298 0110 0C000000	        jal     get_integer
 299 0114                       
 300 0114                       # print and get B colony locations #
 301 0114               
 302 0114 34020004	        li      $v0, PRINT_STRING                    
 303 0118 3C040000	        la      $a0, enter_locations
     011c 34840000
 304 0120 0000000C	        syscall
 305 0124                       
 306 0124 3C040000	        la      $a0, param_block
     0128 34840000
 307 012c 3C050000	        la      $a1, illegal_point
     0130 34A50000
 308 0134 3C060000	        la      $a2, b_coordinates_2
     0138 34C60000
 309 013c 0C000000	        jal     get_B_cells
 310 0140                       
 311 0140                       # == test input grabbing == #
 312 0140               
 313 0140 3C040000	        la      $a0, param_block
     0144 34840000
 314 0148 0C000252	        jal     debug_params
 315 014c               
 316 014c                       # == set up board == #
 317 014c               
 318 014c                       # print generation 0
 319 014c 3C040000	        la      $a0, board_1
     0150 34840000
 320 0154 0C0001CD	        jal     setup_board
 321 0158                       
 322 0158 00002021	        move    $a0, $zero
 323 015c 0C0001C0	        jal     print_generation_banner
 324 0160               
 325 0160 3C040000	        la      $a0, board_1
     0164 34840000
 326 0168 0C00016E	        jal     print_board
 327 016c               
 328 016c 3C040000	        la      $a0, board_2
     0170 34840000
 329 0174 0C0001CD	        jal     setup_board
 330 0178 3C040000	        la      $a0, board_2
     017c 34840000
 331 0180                       #jal     print_board
 332 0180               
 333 0180 0C00021D	        jal     get_generations
 334 0184 00402021	        move    $a0, $v0
 335 0188               
 336 0188 0C000219	        jal     get_board_dim
 337 018c 00402821	        move    $a1, $v0
 338 0190                       
 339 0190 0C000068	        jal     run_conway
 340 0194               
 341 0194               end_main:
 342 0194 8FBF002C	        lw      $ra, -4+FRAMESIZE_48($sp)
 343 0198 23BD0030	        addi    $sp, $sp, FRAMESIZE_48
 344 019c 03E00008	        jr      $ra
 345 01a0               
 346 01a0               # =========================================================
 347 01a0               # Name:             run_conway
 348 01a0               # =========================================================
 349 01a0               # Description:      this is the main function for running
 350 01a0               #                   the game of life variation
 351 01a0               #                   
 352 01a0               # Parameters:
 353 01a0               #       a0 -        generations needed to run
 354 01a0               #       a1 -        board dimension
 355 01a0               #
 356 01a0               # S Registers:
 357 01a0               #       s0 -        the generation toggle
 358 01a0               #       s1 -        gen count
 359 01a0               #       s2 -        the addr of the current board
 360 01a0               #       s3 -        the curr row
 361 01a0               #       s4 -        the current col
 362 01a0               #       s5 -        n = number of neighbors
 363 01a0               #       s6 -        register == 1 if at dead cell
 364 01a0               #
 365 01a0               # T Registers:
 366 01a0               # =========================================================
 367 01a0               
 368 01a0               run_conway:
 369 01a0 23BDFFE0	        addi    $sp, $sp, -REGISTERS_7
 370 01a4 AFBF001C	        sw      $ra, -4+REGISTERS_7($sp)
 371 01a8 AFB00018	        sw      $s0, -8+REGISTERS_7($sp)
 372 01ac AFB10014	        sw      $s1, -12+REGISTERS_7($sp)
 373 01b0 AFB20010	        sw      $s2, -16+REGISTERS_7($sp)
 374 01b4 AFB3000C	        sw      $s3, -20+REGISTERS_7($sp)
 375 01b8 AFB40008	        sw      $s4, -24+REGISTERS_7($sp)
 376 01bc AFB50004	        sw      $s5, -28+REGISTERS_7($sp)
 377 01c0 AFB60000	        sw      $s6, -32+REGISTERS_7($sp)
 378 01c4                   
 379 01c4 34100000	        li      $s0, 0                              # gen_toggle = 0
 380 01c8 00008821	        move    $s1, $zero                          # gen_count = 0
 381 01cc               
 382 01cc               conway_loop:
 383 01cc 0224482A	        slt     $t1, $s1, $a0                       # while(i < gens)
 384 01d0 11200090	        beq     $t1, $zero, conway_end              # {
 385 01d4               
 386 01d4 12000001	        beq     $s0, $zero, even_generation         #if(toggle = 0) then even;
 387 01d8 16000003	        bne     $s0, $zero, odd_generation          #else odd;
 388 01dc               
 389 01dc               even_generation:
 390 01dc 3C120000	        la      $s2, board_1
     01e0 36520000
 391 01e4 0800007C	        j       start_loop
 392 01e8               odd_generation:
 393 01e8 3C120000	        la      $s2, board_2
     01ec 36520000
 394 01f0               
 395 01f0               start_loop:
 396 01f0 00009821	        move    $s3, $zero                          # row = 0
 397 01f4 0000A021	        move    $s4, $zero                          # col = 0
 398 01f8               
 399 01f8                       # for(i = 0; i < row; i++) {
 400 01f8                       
 401 01f8               even_row_loop:
 402 01f8 0265402A	        slt     $t0, $s3, $a1                       # if(row < dim)                    
 403 01fc 11000073	        beq     $t0, $zero, end_conway_loop
 404 0200                       
 405 0200                       # for(j = 0; j < col; j++)
 406 0200               
 407 0200               even_col_loop:
 408 0200 0285402A	        slt     $t0, $s4, $a1                       #while(col < dim)
 409 0204 1100006E	        beq     $t0, $zero, even_row_end
 410 0208               
 411 0208                       # == store parameters == #
 412 0208               
 413 0208 23BDFFF8	        addi    $sp, $sp, -8
 414 020c AFA40000	        sw      $a0, 0($sp)
 415 0210 AFA50004	        sw      $a1, 4($sp)
 416 0214               
 417 0214                       # == counting neighbors == #
 418 0214               
 419 0214 02402021	        move    $a0, $s2                            # p1 = board addr
 420 0218 02602821	        move    $a1, $s3                            # p2 = row
 421 021c 02803021	        move    $a2, $s4                            # p3 = col
 422 0220 8FA70004	        lw      $a3, 4($sp)                         # p4 = dim
 423 0224 0C000229	        jal     get_pos                             # get board[row][col]
 424 0228 00405821	        move    $t3, $v0
 425 022c 816B0000	        lb      $t3, 0($t3)
 426 0230               
 427 0230 340C0041	        li      $t4, 65
 428 0234 340D0042	        li      $t5, 66
 429 0238               
 430 0238                       # == set generation i - 1 == #
 431 0238               
 432 0238 12000003	        beq     $s0, $zero, set_odd_board           # if(toggle = 0)
 433 023c 3C120000	        la      $s2, board_1                        # { set odd (board 1) }
     0240 36520000
 434 0244 08000094	        j       set_prev_done
 435 0248               
 436 0248               set_odd_board:
 437 0248 3C120000	        la      $s2, board_2                        # else { set board2 }
     024c 36520000
 438 0250               
 439 0250               set_prev_done:
 440 0250 116C001C	        beq     $t3, $t4, a_neighbors               #if(baord[row][col] == 'A')
 441 0254 116D000E	        beq     $t3, $t5, b_neighbors               #if(board[row][col] == B)
 442 0258               
 443 0258                       # == dead cells case == #
 444 0258                       
 445 0258 02402021	        move    $a0, $s2                            # param1 = prev_board
 446 025c 02602821	        move    $a1, $s3                            # param2 = curr row
 447 0260 02803021	        move    $a2, $s4                            # param3 = curr col
 448 0264 34070042	        li      $a3, 66                             # param4 = B
 449 0268 0C00010F	        jal     count_neighbors
 450 026c 0040A821	        move    $s5, $v0                            # N = #B's
 451 0270               
 452 0270 02402021	        move    $a0, $s2
 453 0274 02602821	        move    $a1, $s3
 454 0278 02803021	        move    $a2, $s4
 455 027c 34070041	        li      $a3, 65                             
 456 0280 0C00010F	        jal     count_neighbors                     # ret = #A's
 457 0284 02A2A822	        sub     $s5, $s5, $v0                       # N = Bs - As
 458 0288 34160001	        li      $s6, 1
 459 028c 080000BD	        j       live_die_logic
 460 0290               
 461 0290               b_neighbors:
 462 0290 02402021	        move    $a0, $s2                            # param1 = prev_board
 463 0294 02602821	        move    $a1, $s3                            # param2 = curr row
 464 0298 02803021	        move    $a2, $s4                            # param3 = curr col
 465 029c 34070042	        li      $a3, 66                             # param4 = B
 466 02a0 0C00010F	        jal     count_neighbors
 467 02a4 0040A821	        move    $s5, $v0                            # N = #B's
 468 02a8               
 469 02a8 02402021	        move    $a0, $s2
 470 02ac 02602821	        move    $a1, $s3
 471 02b0 02803021	        move    $a2, $s4
 472 02b4 34070041	        li      $a3, 65                             
 473 02b8 0C00010F	        jal     count_neighbors                     # ret = #A's
 474 02bc 02A2A822	        sub     $s5, $s5, $v0                       # N = Bs - As
 475 02c0 080000BD	        j       live_die_logic
 476 02c4               
 477 02c4                       
 478 02c4               a_neighbors:
 479 02c4 02402021	        move    $a0, $s2
 480 02c8 02602821	        move    $a1, $s3
 481 02cc 02803021	        move    $a2, $s4
 482 02d0 34070041	        li      $a3, 65                             # param4 = A
 483 02d4 0C00010F	        jal     count_neighbors
 484 02d8 0040A821	        move    $s5, $v0
 485 02dc                       
 486 02dc 02402021	        move    $a0, $s2
 487 02e0 02602821	        move    $a1, $s3
 488 02e4 02803021	        move    $a2, $s4
 489 02e8 34070042	        li      $a3, 66                             
 490 02ec 0C00010F	        jal     count_neighbors                     # ret = #Bs
 491 02f0 02A2A822	        sub     $s5, $s5, $v0                       # N = As - Bs
 492 02f4               
 493 02f4                       # now do the rest of the logic #
 494 02f4               
 495 02f4               live_die_logic:
 496 02f4               
 497 02f4                       #   get generation i  #
 498 02f4               
 499 02f4 12000001	        beq     $s0, $zero, reset_to_even           #if(toggle = 0) then even;
 500 02f8 16000008	        bne     $s0, $zero, reset_to_odd            #else odd;
 501 02fc               
 502 02fc               reset_to_even:
 503 02fc 3C120000	        la      $s2, board_1
     0300 36520000
 504 0304 02402021	        move    $a0, $s2                            # set params for later use
 505 0308 02602821	        move    $a1, $s3
 506 030c 02803021	        move    $a2, $s4
 507 0310 0C000219	        jal     get_board_dim
 508 0314 00403821	        move    $a3, $v0
 509 0318 080000CF	        j       is_dead
 510 031c               
 511 031c               reset_to_odd:
 512 031c 3C120000	        la      $s2, board_2
     0320 36520000
 513 0324 02402021	        move    $a0, $s2                            #set params for later use
 514 0328 02602821	        move    $a1, $s3
 515 032c 02803021	        move    $a2, $s4
 516 0330 0C000219	        jal     get_board_dim
 517 0334 00403821	        move    $a3, $v0
 518 0338 080000CF	        j       is_dead
 519 033c               
 520 033c               is_dead:
 521 033c 16C0000D	        bne     $s6, $zero, resurrect               # if(dead) goto resurrect
 522 0340                                                                   # else do normal checks
 523 0340               n_lt_2:
 524 0340               
 525 0340                       # == if N < 2 == #
 526 0340               
 527 0340 2AA90002	        slti    $t1, $s5, 2                       
 528 0344 11200004	        beq     $t1, $zero, n_gt_3
 529 0348 0C000229	        jal     get_pos                             # get board_i[col][row]
 530 034c 34090020	        li      $t1, 32
 531 0350 A0490000	        sb      $t1, 0($v0)
 532 0354 080000EB	        j       even_col_end
 533 0358               
 534 0358               
 535 0358               n_gt_3:
 536 0358               
 537 0358                       # == if N >= 4 == #
 538 0358               
 539 0358 2AA90004	        slti    $t1, $s5, 4
 540 035c 15200004	        bne     $t1, $zero, n_2_or_3
 541 0360 0C000229	        jal     get_pos
 542 0364 34090020	        li      $t1, 32
 543 0368 A0490000	        sb      $t1, 0($v0)
 544 036c 080000EB	        j       even_col_end
 545 0370                       
 546 0370               n_2_or_3:
 547 0370                      
 548 0370                       # == if N == 2 or 3 == #
 549 0370                       # do nothing because the cell stays alive
 550 0370 080000EB	        j       even_col_end
 551 0374               
 552 0374               resurrect:
 553 0374 0000B021	        move    $s6, $zero                          # reset bit for next loop
 554 0378 34080003	        li      $t0, 3
 555 037c 12A80007	        beq     $s5, $t0, become_B
 556 0380 2408FFFD	        li      $t0, -3
 557 0384 12A80001	        beq     $s5, $t0, become_A
 558 0388 080000EB	        j       even_col_end
 559 038c               
 560 038c               become_A:
 561 038c 0C000229	        jal     get_pos
 562 0390 34090041	        li      $t1, 65
 563 0394 A0490000	        sb      $t1, 0($v0)                         # dead cell = A
 564 0398 080000EB	        j       even_col_end
 565 039c               
 566 039c               become_B:
 567 039c 0C000229	        jal     get_pos
 568 03a0 34090042	        li      $t1, 66
 569 03a4 A0490000	        sb      $t1, 0($v0)                         # dead cell = B
 570 03a8 080000EB	        j       even_col_end
 571 03ac                       
 572 03ac               even_col_end:
 573 03ac               
 574 03ac                       # restore original params #
 575 03ac               
 576 03ac 8FA40000	        lw      $a0, 0($sp)
 577 03b0 8FA50004	        lw      $a1, 4($sp)
 578 03b4 23BD0008	        addi    $sp, $sp, 8
 579 03b8               
 580 03b8               
 581 03b8 22940001	        addi    $s4, $s4, 1                         # col++
 582 03bc 08000080	        j       even_col_loop
 583 03c0               
 584 03c0               even_row_end:
 585 03c0 0000A021	        move    $s4, $zero                          # col = 0
 586 03c4 22730001	        addi    $s3, $s3, 1                         # row++
 587 03c8 0800007E	        j       even_row_loop
 588 03cc               
 589 03cc               end_conway_loop:
 590 03cc                       
 591 03cc                       # == print board == #
 592 03cc 23BDFFFC	        addi    $sp, $sp, -4
 593 03d0 AFA40000	        sw      $a0, 0($sp)
 594 03d4                       
 595 03d4 22240001	        addi    $a0, $s1, 1
 596 03d8 0C0001C0	        jal     print_generation_banner
 597 03dc               
 598 03dc 12000003	        beq     $s0, $zero, prt_b_1
 599 03e0 3C040000	        la      $a0, board_1
     03e4 34840000
 600 03e8 080000FD	        j       print_generation
 601 03ec               
 602 03ec               prt_b_1:
 603 03ec 3C040000	        la      $a0, board_1
     03f0 34840000
 604 03f4               
 605 03f4               print_generation:
 606 03f4 0C00016E	        jal     print_board
 607 03f8 8FA40000	        lw      $a0, 0($sp)
 608 03fc 23BD0004	        addi    $sp, $sp, 4
 609 0400               
 610 0400 22310001	        addi    $s1, $s1, 1                         #gens ++
 611 0404 34010002	        rem     $s0, $s1, 2                         #toggle = gen_count % 2
     0408 0221001A
     040c 00008010
 612 0410 08000073	        j       conway_loop
 613 0414                                                                   # }
 614 0414               conway_end:
 615 0414 8FBF001C	        lw      $ra, -4+REGISTERS_7($sp)
 616 0418 8FB00018	        lw      $s0, -8+REGISTERS_7($sp)
 617 041c 8FB10014	        lw      $s1, -12+REGISTERS_7($sp)
 618 0420 8FB20010	        lw      $s2, -16+REGISTERS_7($sp)
 619 0424 8FB3000C	        lw      $s3, -20+REGISTERS_7($sp)
 620 0428 8FB40008	        lw      $s4, -24+REGISTERS_7($sp)
 621 042c 8FB50004	        lw      $s5, -28+REGISTERS_7($sp)
 622 0430 8FB60000	        lw      $s6, -32+REGISTERS_7($sp)
 623 0434 23BD0020	        addi    $sp, $sp, REGISTERS_7
 624 0438 03E00008	        jr      $ra
 625 043c               
 626 043c               # =========================================================
 627 043c               # Name:             count_neighbors
 628 043c               # =========================================================
 629 043c               # Description:      count neihbors of cell (a2, a1) that
 630 043c               #                   are 'A's
 631 043c               #                   
 632 043c               # Parameters:
 633 043c               #       a0 -        the addr of the board to check
 634 043c               #       a1 -        row number
 635 043c               #       a2 -        col number
 636 043c               #       a3 -        char to check against
 637 043c               #
 638 043c               # S Registers:
 639 043c               #       s0 -        the board dim
 640 043c               #       s1 -        the current row
 641 043c               #       s2 -        the current col
 642 043c               #       s3 -        the char to check against
 643 043c               #       s4 -        the count
 644 043c               #       s5 -        the opposite char
 645 043c               #
 646 043c               # T Registers:
 647 043c               #       t1 -        bot
 648 043c               #       t2 -        top 
 649 043c               #       t3 -        left
 650 043c               #       t4 -        right
 651 043c               #
 652 043c               # =========================================================
 653 043c               
 654 043c               count_neighbors:
 655 043c 23BDFFE4	        addi    $sp, $sp, -REGISTERS_6
 656 0440 AFBF0018	        sw      $ra, -4+REGISTERS_6($sp)
 657 0444 AFB00014	        sw      $s0, -8+REGISTERS_6($sp)
 658 0448 AFB10010	        sw      $s1, -12+REGISTERS_6($sp)
 659 044c AFB2000C	        sw      $s2, -16+REGISTERS_6($sp)
 660 0450 AFB30008	        sw      $s3, -20+REGISTERS_6($sp)
 661 0454 AFB40004	        sw      $s4, -24+REGISTERS_6($sp)
 662 0458 AFB50000	        sw      $s5, -28+REGISTERS_6($sp)
 663 045c               
 664 045c 0C000219	        jal     get_board_dim
 665 0460 00408021	        move    $s0, $v0
 666 0464               
 667 0464 0000C021	        move    $t8, $zero
 668 0468               
 669 0468 00A08821	        move    $s1, $a1
 670 046c 00C09021	        move    $s2, $a2
 671 0470 00E09821	        move    $s3, $a3
 672 0474 0000A021	        move    $s4, $zero                          #count = 0
 673 0478               
 674 0478 34090041	        li      $t1, 65
 675 047c 12690002	        beq     $s3, $t1, opp_is_B                  # if(char == A) {
 676 0480 34150041	        li      $s5, 65                             # opp == B
 677 0484 08000123	        j       start_count                         # } else {
 678 0488               
 679 0488               opp_is_B:                               
 680 0488 34150042	        li      $s5, 66                             # opp == A }
 681 048c               
 682 048c               start_count: 
 683 048c 20A9FFFF	        addi    $t1, $a1, -1                        # bot = row - 1
 684 0490 20AA0001	        addi    $t2, $a1, 1                         # top = row + 1
 685 0494 20CBFFFF	        addi    $t3, $a2, -1                        # lft = col - 1
 686 0498 20CC0001	        addi    $t4, $a2, 1                         # rht = col + 1
 687 049c               
 688 049c                       # if(bot < 0) bot = dim - 1 #
 689 049c 0120C82A	        slt     $t9, $t1, $zero
 690 04a0 13200001	        beq     $t9, $zero, check_top
 691 04a4 2209FFFF	        addi    $t1, $s0, -1
 692 04a8               
 693 04a8               check_top:
 694 04a8 0150C82A	        slt     $t9, $t2, $s0                       
 695 04ac 17200001	        bne     $t9, $zero, check_left              # if(top < dim) skip wrap
 696 04b0 00005021	        move    $t2, $zero
 697 04b4               
 698 04b4               check_left:
 699 04b4 0160C82A	        slt     $t9, $t3, $zero
 700 04b8 13200001	        beq     $t9, $zero, check_right
 701 04bc 220BFFFF	        addi    $t3, $s0, -1
 702 04c0               
 703 04c0               check_right:
 704 04c0 0190C82A	        slt     $t9, $t4, $s0
 705 04c4 17200001	        bne     $t9, $zero, validate_nbrs
 706 04c8 00006021	        move    $t4, $zero
 707 04cc               
 708 04cc               validate_nbrs:
 709 04cc               
 710 04cc 02003821	        move    $a3, $s0                            # param 4 = dim
 711 04d0                       # == check above == #
 712 04d0 01202821	        move    $a1, $t1
 713 04d4 02403021	        move    $a2, $s2
 714 04d8 0C000229	        jal     get_pos                             # get (col, top)
 715 04dc 80420000	        lb      $v0, 0($v0)
 716 04e0                       
 717 04e0 14530001	        bne     $v0, $s3, cmp_bot
 718 04e4 23180001	        addi    $t8, $t8, 1
 719 04e8                       
 720 04e8               cmp_bot:
 721 04e8                       # == check below== #
 722 04e8 01402821	        move    $a1, $t2
 723 04ec 02403021	        move    $a2, $s2
 724 04f0 0C000229	        jal     get_pos                             #get board[col][bot]
 725 04f4 80420000	        lb      $v0, 0($v0)
 726 04f8               
 727 04f8 14530001	        bne     $v0, $s3, cmp_left
 728 04fc 23180001	        addi    $t8, $t8, 1
 729 0500               
 730 0500               cmp_left:
 731 0500                       # == check left == #
 732 0500 02202821	        move    $a1, $s1
 733 0504 01603021	        move    $a2, $t3
 734 0508 0C000229	        jal     get_pos
 735 050c 80420000	        lb      $v0, 0($v0)                         #get board[lft][row]
 736 0510               
 737 0510 14530001	        bne     $v0, $s3, cmp_right
 738 0514 23180001	        addi    $t8, $t8, 1
 739 0518               
 740 0518               cmp_right:
 741 0518                       # == check right == #
 742 0518 02202821	        move    $a1, $s1
 743 051c 01803021	        move    $a2, $t4
 744 0520 0C000229	        jal     get_pos
 745 0524 80420000	        lb      $v0, 0($v0)                         #get board[rht][row]
 746 0528               
 747 0528 14530001	        bne     $v0, $s3, cmp_top_left
 748 052c 23180001	        addi    $t8, $t8, 1
 749 0530               
 750 0530               cmp_top_left:
 751 0530 01202821	        move    $a1, $t1                            #top
 752 0534 01603021	        move    $a2, $t3                            #left
 753 0538 0C000229	        jal     get_pos
 754 053c 80420000	        lb      $v0, 0($v0)                         #get board[left][top]
 755 0540               
 756 0540 14530001	        bne     $v0, $s3, cmp_top_right
 757 0544 23180001	        addi    $t8, $t8, 1
 758 0548               
 759 0548               cmp_top_right:
 760 0548 01202821	        move    $a1, $t1                            #top
 761 054c 01803021	        move    $a2, $t4                            #right
 762 0550 0C000229	        jal     get_pos
 763 0554 80420000	        lb      $v0, 0($v0)                         #get board[right][top]
 764 0558               
 765 0558 14530001	        bne     $v0, $s3, cmp_bot_left
 766 055c 23180001	        addi    $t8, $t8, 1
 767 0560               
 768 0560               cmp_bot_left:
 769 0560 01402821	        move    $a1, $t2                            #bot
 770 0564 01603021	        move    $a2, $t3                            #left
 771 0568 0C000229	        jal     get_pos
 772 056c 80420000	        lb      $v0, 0($v0)                         #get board[left][bot]
 773 0570               
 774 0570 14530001	        bne     $v0, $s3, cmp_bot_right
 775 0574 23180001	        addi    $t8, $t8, 1
 776 0578               
 777 0578               cmp_bot_right:
 778 0578 01402821	        move    $a1, $t2                            #bot
 779 057c 01803021	        move    $a2, $t4                            #right
 780 0580 0C000229	        jal     get_pos
 781 0584 80420000	        lb      $v0, 0($v0)                         #get board[right][bot]
 782 0588               
 783 0588 14530001	        bne     $v0, $s3, count_neighbors_end
 784 058c 23180001	        addi    $t8, $t8, 1
 785 0590               
 786 0590               count_neighbors_end:
 787 0590               
 788 0590 03001021	        move    $v0, $t8    
 789 0594                   
 790 0594 8FBF0018	        lw      $ra, -4+REGISTERS_6($sp)
 791 0598 8FB00014	        lw      $s0, -8+REGISTERS_6($sp)
 792 059c 8FB10010	        lw      $s1, -12+REGISTERS_6($sp)
 793 05a0 8FB2000C	        lw      $s2, -16+REGISTERS_6($sp)
 794 05a4 8FB30008	        lw      $s3, -20+REGISTERS_6($sp)
 795 05a8 8FB40004	        lw      $s4, -24+REGISTERS_6($sp)
 796 05ac 8FB50000	        lw      $s5, -28+REGISTERS_6($sp)
 797 05b0 23BD001C	        addi    $sp, $sp, REGISTERS_6
 798 05b4 03E00008	        jr      $ra
 799 05b8               
 800 05b8               # =========================================================
 801 05b8               # Name:             print_board 
 802 05b8               # =========================================================
 803 05b8               # Description:      print the board as a 2D array
 804 05b8               #                   
 805 05b8               # Parameters:
 806 05b8               #       a0 -        the addr of the board to print
 807 05b8               #
 808 05b8               # Parameters:
 809 05b8               #       s0 -        the dim of the board
 810 05b8               #       s1 -        the pointer to the row to print
 811 05b8               #       s2 -        the addr ofthe array
 812 05b8               #
 813 05b8               # T Registers:
 814 05b8               #       t0 -        row loop flag
 815 05b8               #       t1 -        row loop counter
 816 05b8               #       t2 -        col loop counter
 817 05b8               #       t3 -        pointer for col in row / banner counter
 818 05b8               #       t4 -        column loop flag
 819 05b8               #
 820 05b8               # =========================================================
 821 05b8               
 822 05b8               print_board: 
 823 05b8 23BDFFF0	        addi    $sp, $sp, -16 
 824 05bc AFBF000C	        sw      $ra, 12($sp)
 825 05c0 AFB00008	        sw      $s0, 8($sp)
 826 05c4 AFB10004	        sw      $s1, 4($sp)
 827 05c8 8FB20000	        lw      $s2, 0($sp)
 828 05cc               
 829 05cc 00808821	        move     $s1, $a0 
 830 05d0 00809021	        move     $s2, $a0 
 831 05d4               
 832 05d4                       # print top of board #
 833 05d4               
 834 05d4 0C0001A4	        jal     print_top_bottom
 835 05d8               
 836 05d8                       # get board dim #
 837 05d8               
 838 05d8 0C000219	        jal     get_board_dim
 839 05dc 00408021	        move    $s0, $v0
 840 05e0               
 841 05e0                       # calculate row to start at#
 842 05e0               
 843 05e0 2209FFFF	        addi    $t1, $s0, -1                        # row = dim - 1
 844 05e4 00005021	        move    $t2, $zero                          # col = 0
 845 05e8               
 846 05e8                       
 847 05e8               print_row_loop:
 848 05e8 0120402A	        slt     $t0, $t1, $zero                     #while(row >= 0)
 849 05ec 15000021	        bne     $t0, $zero, print_board_end 
 850 05f0 3C040000	        la      $a0, bar                            #print("|")
     05f4 34840000
 851 05f8 34020004	        li      $v0, PRINT_STRING 
 852 05fc 0000000C	        syscall
 853 0600               
 854 0600                       # calculate row address #
 855 0600 34010001	        mul     $s1, $s0, 1                         # len_c = size(char) * dim
     0604 02010018
     0608 00008812
 856 060c 02290018	        mul     $s1, $s1, $t1                       # offset = len_c * row
     0610 00008812
 857 0614 02518820	        add     $s1, $s2, $s1                       # r_addr = base + offset
 858 0618                       
 859 0618               print_col_loop:
 860 0618 0150602A	        slt     $t4, $t2, $s0                       #while(col < dim)
 861 061c 1180000A	        beq     $t4, $zero, end_col_loop
 862 0620               
 863 0620 02205821	        move    $t3, $s1                            #load addr of arr[row][0]
 864 0624               
 865 0624 34010001	        mul     $t5, $t2, 1                         #sizeof(char)*col_index
     0628 01410018
     062c 00006812
 866 0630 016D5820	        add     $t3, $t3, $t5                       #row base + offset
 867 0634               
 868 0634 81640000	        lb      $a0, 0($t3)
 869 0638 3402000B	        li      $v0, PRINT_CHAR
 870 063c 0000000C	        syscall                                     #print(arr[row][col])
 871 0640                       
 872 0640 214A0001	        addi    $t2, $t2, 1                         #col++
 873 0644 08000186	        j       print_col_loop
 874 0648               
 875 0648               end_col_loop:
 876 0648                       
 877 0648 3C040000	        la      $a0, bar                            #print("|")
     064c 34840000
 878 0650 34020004	        li      $v0, PRINT_STRING 
 879 0654 0000000C	        syscall
 880 0658               
 881 0658 3C040000	        la      $a0, newline                       #print("\n")
     065c 34840000
 882 0660 34020004	        li      $v0, PRINT_STRING 
 883 0664 0000000C	        syscall
 884 0668                       
 885 0668 00005021	        move    $t2, $zero                          # col = 0
 886 066c 2129FFFF	        addi    $t1, $t1, -1                        # row--
 887 0670 0800017A	        j       print_row_loop
 888 0674               
 889 0674               
 890 0674               print_board_end:
 891 0674 0C0001A4	        jal     print_top_bottom                    #print bottom board
 892 0678               
 893 0678 8FBF000C	        lw      $ra, 12($sp)
 894 067c 8FB00008	        lw      $s0, 8($sp)
 895 0680 8FB10004	        lw      $s1, 4($sp)
 896 0684 8FB20000	        lw      $s2, 0($sp)
 897 0688 23BD0010	        addi    $sp, $sp, 16
 898 068c 03E00008	        jr      $ra
 899 0690               
 900 0690               # =========================================================
 901 0690               # Name:             print_top_bottom
 902 0690               # =========================================================
 903 0690               # Description:      this prints the top banner of the board
 904 0690               #
 905 0690               # T Registers:
 906 0690               #       t0  -       loop counter
 907 0690               #       t1  -       board dimension
 908 0690               # =========================================================
 909 0690               
 910 0690               print_top_bottom:
 911 0690 23BDFFFC	        addi    $sp, $sp, -4
 912 0694 AFBF0000	        sw      $ra, 0($sp)
 913 0698               
 914 0698                       
 915 0698 0C000219	        jal     get_board_dim
 916 069c 00404821	        move    $t1, $v0
 917 06a0               
 918 06a0 3C040000	        la      $a0, plus                           #print("+")
     06a4 34840000
 919 06a8 34020004	        li      $v0, PRINT_STRING 
 920 06ac 0000000C	        syscall
 921 06b0               
 922 06b0 00004021	        move    $t0, $zero
 923 06b4                       
 924 06b4               tb_loop:
 925 06b4 0109582A	        slt     $t3, $t0, $t1                       #while(i < dim)
 926 06b8 11600006	        beq     $t3, $zero, tb_end
 927 06bc               
 928 06bc 3C040000	        la      $a0, minus                          #print("-")
     06c0 34840000
 929 06c4 34020004	        li      $v0, PRINT_STRING 
 930 06c8 0000000C	        syscall
 931 06cc                       
 932 06cc 21080001	        addi    $t0, $t0, 1
 933 06d0 080001AD	        j       tb_loop
 934 06d4               tb_end:
 935 06d4               
 936 06d4 3C040000	        la      $a0, plus                           #print("+")
     06d8 34840000
 937 06dc 34020004	        li      $v0, PRINT_STRING 
 938 06e0 0000000C	        syscall
 939 06e4               
 940 06e4 3C040000	        la      $a0, newline                        #print("\n")
     06e8 34840000
 941 06ec 34020004	        li      $v0, PRINT_STRING 
 942 06f0 0000000C	        syscall
 943 06f4                       
 944 06f4 8FBF0000	        lw      $ra, 0($sp)
 945 06f8 23BD0004	        addi    $sp, $sp, 4
 946 06fc 03E00008	        jr      $ra
 947 0700               
 948 0700               # =========================================================
 949 0700               # Name:             print_generation_banner
 950 0700               # =========================================================
 951 0700               # Description:      this prints the generation number
 952 0700               #
 953 0700               # Parameters:
 954 0700               #       a0  -       the current generation number
 955 0700               # T Registers:
 956 0700               #       t0  -       gen_banner_start
 957 0700               #       t1  -       gen_banner_end
 958 0700               #       t3  -       the current generation
 959 0700               # =========================================================
 960 0700               
 961 0700               print_generation_banner:
 962 0700 00805821	        move    $t3, $a0
 963 0704 34020004	        li      $v0, PRINT_STRING
 964 0708 3C040000	        la      $a0, gen_banner_start
     070c 34840000
 965 0710 0000000C	        syscall
 966 0714               
 967 0714 34020001	        li      $v0, PRINT_INT
 968 0718 01602021	        move    $a0, $t3
 969 071c 0000000C	        syscall
 970 0720               
 971 0720 34020004	        li      $v0, PRINT_STRING
 972 0724 3C040000	        la      $a0, gen_banner_end
     0728 34840000
 973 072c 0000000C	        syscall
 974 0730                       
 975 0730 03E00008	        jr      $ra
 976 0734               
 977 0734               
 978 0734               # =========================================================
 979 0734               # Name:             setup_board
 980 0734               # =========================================================
 981 0734               # Description:      this fills the spots in the array with 
 982 0734               #                   either an "A", "B", or " "(space)
 983 0734               #
 984 0734               # Parameters:
 985 0734               #       - a0        location of board to set up
 986 0734               # S Registers:
 987 0734               #       - s0        the board dimension
 988 0734               #       - s1        the pointer to pos in 2d array
 989 0734               #       - s2        the addr of the end 2d array
 990 0734               #
 991 0734               # T Registers:
 992 0734               #       - t2        addr of a_coordinates
 993 0734               #       - t3        addr of b_coordinates
 994 0734               #       - t9        pointer to curr in array
 995 0734               # =========================================================
 996 0734               
 997 0734               setup_board:
 998 0734 23BDFFF0	        addi    $sp, $sp, -16
 999 0738 AFBF000C	        sw      $ra, 12($sp)
1000 073c AFB00008	        sw      $s0, 8($sp)
1001 0740 AFB10004	        sw      $s1, 4($sp)
1002 0744 AFB20000	        sw      $s2, 0($sp)
1003 0748               
1004 0748 0C000219	        jal     get_board_dim                       #get board dim
1005 074c 00408021	        move    $s0, $v0
1006 0750 00808821	        move    $s1, $a0
1007 0754                   
1008 0754 02100018	        mul     $t0, $s0, $s0                       #dim^2
     0758 00004012
1009 075c 01119020	        add     $s2, $t0, $s1                       #pointer to end of array
1010 0760               
1011 0760 34090020	        li      $t1, 32                             #t1 = ascii " "
1012 0764               
1013 0764               load_blanks:
1014 0764 0251402A	        slt     $t0, $s2, $s1                       # i == dim; break
1015 0768 15000003	        bne     $t0, $zero, fill_array
1016 076c                       
1017 076c A2290000	        sb      $t1, 0($s1)                         #arr[i] = ' ';
1018 0770               
1019 0770 22310001	        addi    $s1, $s1, 1                         #i++
1020 0774 080001D9	        j       load_blanks
1021 0778               
1022 0778               fill_array:
1023 0778 0C0001E5	        jal     fill_positions
1024 077c                       
1025 077c               
1026 077c               setup_end:
1027 077c 8FBF000C	        lw      $ra, 12($sp)
1028 0780 8FB00008	        lw      $s0, 8($sp)
1029 0784 8FB10004	        lw      $s1, 4($sp)
1030 0788 8FB20000	        lw      $s2, 0($sp)
1031 078c 23BD0010	        addi    $sp, $sp, 16
1032 0790 03E00008	        jr      $ra
1033 0794               
1034 0794               
1035 0794               # =========================================================
1036 0794               # Name:             fill_positions
1037 0794               # =========================================================
1038 0794               # Description:      this function takes the given board 
1039 0794               #                   passed in through a0 and fills it
1040 0794               #                   with positions from the a_coordinate
1041 0794               #                   and b_coordinate arrays
1042 0794               #
1043 0794               # Parameters:
1044 0794               #       - a0        location of board to set up
1045 0794               #
1046 0794               # S Registers:
1047 0794               #       - s0        number of values in a/b
1048 0794               #       - s1        current array (a or b)
1049 0794               #       - s2        board dimensions
1050 0794               #       - s3        current ascii value
1051 0794               #
1052 0794               # T Registers:
1053 0794               #       - t0        location of the a coordinate array
1054 0794               #       - t2        pointer to board[row][col]
1055 0794               #       - t3        x coordinate from array
1056 0794               #       - t4        y coordinate from array
1057 0794               # =========================================================
1058 0794               
1059 0794               fill_positions:
1060 0794 23BDFFE8	        addi    $sp, $sp, -REGISTERS_5
1061 0798 AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
1062 079c AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
1063 07a0 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
1064 07a4 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
1065 07a8 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
1066 07ac AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
1067 07b0               
1068 07b0 0C000219	        jal     get_board_dim
1069 07b4 00409021	        move    $s2, $v0
1070 07b8                   
1071 07b8 0C000221	        jal     get_a
1072 07bc 00408021	        move    $s0, $v0
1073 07c0               
1074 07c0 3C110000	        la      $s1, a_coordinates
     07c4 36310000
1075 07c8 34130041	        li      $s3, 65
1076 07cc                       
1077 07cc 00805021	        move    $t2, $a0                            # pointer to boar_arr[0]
1078 07d0 0000C821	        move    $t9, $zero                          # i = 0
1079 07d4               
1080 07d4               fill_a:
1081 07d4 0330C02A	        slt     $t8, $t9, $s0                       # while(i < a_size)
1082 07d8 13000009	        beq     $t8, $zero, fill_a_end
1083 07dc                       
1084 07dc                       # add values into 2d board
1085 07dc               
1086 07dc 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
1087 07e0 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
1088 07e4 02403821	        move    $a3, $s2                            # get dim of board
1089 07e8                       
1090 07e8 0C000229	        jal     get_pos
1091 07ec                       
1092 07ec A0530000	        sb      $s3, 0($v0)      
1093 07f0                       
1094 07f0 23390001	        addi    $t9, $t9, 1                         # i++
1095 07f4 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
1096 07f8 00805021	        move    $t2, $a0
1097 07fc 080001F5	        j       fill_a
1098 0800               
1099 0800               fill_a_end:
1100 0800               
1101 0800 0C000225	        jal     get_b           
1102 0804 00408021	        move    $s0, $v0                            # get b address
1103 0808 3C110000	        la      $s1, b_coordinates                  # get base of b_arr
     080c 36310000
1104 0810 34130042	        li      $s3, 66                             # ascii 'B'
1105 0814 0000C821	        move    $t9, $zero                          # i = 0
1106 0818               
1107 0818               fill_b:
1108 0818 0330C02A	        slt     $t8, $t9, $s0                       # while(i < b_size)
1109 081c 13000009	        beq     $t8, $zero, fill_positions_end
1110 0820                       
1111 0820                       # add values into 2d board
1112 0820               
1113 0820 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
1114 0824 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
1115 0828 02403821	        move    $a3, $s2                            # get dim of board
1116 082c                       
1117 082c 0C000229	        jal     get_pos
1118 0830                       
1119 0830 A0530000	        sb      $s3, 0($v0)      
1120 0834                       
1121 0834 23390001	        addi    $t9, $t9, 1                         # i++
1122 0838 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
1123 083c 00805021	        move    $t2, $a0
1124 0840 08000206	        j       fill_b
1125 0844               
1126 0844               fill_positions_end:
1127 0844               
1128 0844 8FBF0014	        lw      $ra, -4+REGISTERS_5($sp)
1129 0848 8FB00010	        lw      $s0, -8+REGISTERS_5($sp)
1130 084c 8FB1000C	        lw      $s1, -12+REGISTERS_5($sp)
1131 0850 8FB20008	        lw      $s2, -16+REGISTERS_5($sp)
1132 0854 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
1133 0858 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
1134 085c 23BD0018	        addi    $sp, $sp, REGISTERS_5
1135 0860 03E00008	        jr      $ra
1136 0864               
1137 0864               ###########################################
1138 0864               # ======================================= #
1139 0864               # ||        Helper Code                || #
1140 0864               # ======================================= #
1141 0864               ###########################################
1142 0864               
1143 0864               get_board_dim:
1144 0864 3C080000	        la      $t0, board_dim
     0868 35080000
1145 086c 8D020000	        lw      $v0, 0($t0)
1146 0870 03E00008	        jr      $ra
1147 0874               
1148 0874               get_generations:
1149 0874 3C080000	        la      $t0, generations
     0878 35080000
1150 087c 8D020000	        lw      $v0, 0($t0)
1151 0880 03E00008	        jr      $ra
1152 0884               
1153 0884               get_a:
1154 0884 3C080000	        la      $t0, A_cells
     0888 35080000
1155 088c 8D020000	        lw      $v0, 0($t0)
1156 0890 03E00008	        jr      $ra
1157 0894               
1158 0894               get_b:
1159 0894 3C080000	        la      $t0, B_cells
     0898 35080000
1160 089c 8D020000	        lw      $v0, 0($t0)
1161 08a0 03E00008	        jr      $ra
1162 08a4               
1163 08a4               # =========================================================
1164 08a4               # Name:             get_pos
1165 08a4               # =========================================================
1166 08a4               # Description:      gets the addr of board[row][col] in 
1167 08a4               #                   the given array
1168 08a4               #
1169 08a4               # Parameters:
1170 08a4               #       a0 -        the location of array to access
1171 08a4               #       a1 -        the row value
1172 08a4               #       a2 -        the col value
1173 08a4               #       a3 -        the dim of the board
1174 08a4               #
1175 08a4               # Returns:
1176 08a4               #       v0 - the addr of board[row][col]
1177 08a4               #     
1178 08a4               # =========================================================
1179 08a4               
1180 08a4               get_pos:
1181 08a4               
1182 08a4                       # calculate row address #
1183 08a4               
1184 08a4 34010001	        mul     $v0, $a3, 1                         # len_c = size(char) * dim
     08a8 00E10018
     08ac 00001012
1185 08b0 00450018	        mul     $v0, $v0, $a1                       # roffset = len_c * row
     08b4 00001012
1186 08b8 00821020	        add     $v0, $a0, $v0                      # r_addr = base + roffset
1187 08bc                       
1188 08bc                       # calculate column address #
1189 08bc               
1190 08bc 00461020	        add     $v0, $v0, $a2                       # addr = r_addr + col
1191 08c0                       
1192 08c0 03E00008	        jr      $ra
1193 08c4                       
1194 08c4               
1195 08c4               # =========================================================
1196 08c4               # Name:             print_locations
1197 08c4               # =========================================================
1198 08c4               # Description:      prints an array of location "structs"
1199 08c4               #                   each structure is 8 bytes long where:
1200 08c4               #                       - 0 -> x coordinate
1201 08c4               #                       - 4 offset -> y coordinate
1202 08c4               #
1203 08c4               # Parameters:
1204 08c4               #       a0 -        the location of array to print
1205 08c4               #       a1 -        the size of the array
1206 08c4               #
1207 08c4               # T Registers:
1208 08c4               #       t0 -        loop counter
1209 08c4               #     
1210 08c4               # =========================================================
1211 08c4               
1212 08c4               print_locations:
1213 08c4 34080000	        li      $t0, 0                              # i == 0
1214 08c8 00804821	        move    $t1, $a0                            # pointer
1215 08cc               
1216 08cc               print_loop:
1217 08cc 11050019	        beq     $t0, $a1, print_done                #done if i == n 
1218 08d0               
1219 08d0 3C040000	        la      $a0, newline
     08d4 34840000
1220 08d8 34020004	        li      $v0, PRINT_STRING                   #print \n
1221 08dc 0000000C	        syscall
1222 08e0                       
1223 08e0 3C040000	        la      $a0, lp
     08e4 34840000
1224 08e8 34020004	        li      $v0, PRINT_STRING                   #print (
1225 08ec 0000000C	        syscall
1226 08f0                       
1227 08f0 8D240000	        lw      $a0, 0($t1)                         #get a[i].x
1228 08f4 34020001	        li      $v0, PRINT_INT
1229 08f8 0000000C	        syscall                                     #print a[i].x
1230 08fc               
1231 08fc 3C040000	        la      $a0, comma
     0900 34840000
1232 0904 34020004	        li      $v0, PRINT_STRING                   #print ,
1233 0908 0000000C	        syscall
1234 090c                       
1235 090c 8D240004	        lw      $a0, 4($t1)                         #get a[i].y
1236 0910 34020001	        li      $v0, PRINT_INT
1237 0914 0000000C	        syscall                                     #print a[i].y
1238 0918                       
1239 0918 3C040000	        la      $a0, rp
     091c 34840000
1240 0920 34020004	        li      $v0, PRINT_STRING                   #print )
1241 0924 0000000C	        syscall
1242 0928                       
1243 0928 21290008	        addi    $t1, $t1, 8                         #update pointer
1244 092c 21080001	        addi    $t0, $t0, 1                         #i++
1245 0930 08000233	        j       print_loop
1246 0934               
1247 0934               print_done:
1248 0934 3C040000	        la      $a0, newline
     0938 34840000
1249 093c 34020004	        li      $v0, PRINT_STRING
1250 0940 0000000C	        syscall
1251 0944                       
1252 0944 03E00008	        jr      $ra
1253 0948               
1254 0948               # =========================================================
1255 0948               # Name:             debug_params
1256 0948               # =========================================================
1257 0948               # Description:      print the inputs in the param block
1258 0948               #
1259 0948               # Parameters:
1260 0948               #       a0 -        the parameter block
1261 0948               # S Registers:
1262 0948               #       s0 -        the saved parameter block
1263 0948               # =========================================================
1264 0948               
1265 0948               debug_params:
1266 0948                       
1267 0948 23BDFFF8	        addi    $sp, $sp, -8
1268 094c AFBF0004	        sw      $ra, 4($sp)
1269 0950 AFB00000	        sw      $s0, 0($sp)
1270 0954                       
1271 0954 00808021	        move    $s0, $a0                            #save param block
1272 0958               
1273 0958                       # print board dimensions #
1274 0958               
1275 0958 34020004	        li      $v0, PRINT_STRING
1276 095c 3C040000	        la      $a0, d_dim
     0960 34840000
1277 0964 0000000C	        syscall
1278 0968               
1279 0968 0C000219	        jal     get_board_dim                       #get the value of board dim
1280 096c 00402021	        move    $a0, $v0
1281 0970 34020001	        li      $v0, PRINT_INT                      #print board dim
1282 0974 0000000C	        syscall
1283 0978               
1284 0978                       # print generations #
1285 0978               
1286 0978 34020004	        li      $v0, PRINT_STRING
1287 097c 3C040000	        la      $a0, d_gen
     0980 34840000
1288 0984 0000000C	        syscall
1289 0988 0C00021D	        jal     get_generations                     #value of generations
1290 098c 00402021	        move    $a0, $v0
1291 0990 34020001	        li      $v0, PRINT_INT                      #print generations
1292 0994 0000000C	        syscall
1293 0998               
1294 0998                       # print colony A size #
1295 0998               
1296 0998 34020004	        li      $v0, PRINT_STRING
1297 099c 3C040000	        la      $a0, d_a_cells
     09a0 34840000
1298 09a4 0000000C	        syscall
1299 09a8 0C000221	        jal     get_a                               #get size a
1300 09ac 00402021	        move    $a0, $v0
1301 09b0 34020001	        li      $v0, PRINT_INT                      #print size of a
1302 09b4 0000000C	        syscall
1303 09b8               
1304 09b8                       # print locations #
1305 09b8 34020004	        li      $v0, PRINT_STRING
1306 09bc 3C040000	        la      $a0, d_a_loc
     09c0 34840000
1307 09c4 0000000C	        syscall
1308 09c8               
1309 09c8 3C040000	        la      $a0, a_coordinates
     09cc 34840000
1310 09d0 0C000221	        jal     get_a                               #get size a
1311 09d4 00402821	        move    $a1, $v0
1312 09d8 0C000231	        jal     print_locations
1313 09dc               
1314 09dc               
1315 09dc                       # print colony B size#
1316 09dc               
1317 09dc 34020004	        li      $v0, PRINT_STRING
1318 09e0 3C040000	        la      $a0, d_b_cells
     09e4 34840000
1319 09e8 0000000C	        syscall
1320 09ec 0C000225	        jal     get_b                               #get size b
1321 09f0 00402021	        move    $a0, $v0
1322 09f4 34020001	        li      $v0, PRINT_INT                      #print it
1323 09f8 0000000C	        syscall
1324 09fc               
1325 09fc                       # print locations#
1326 09fc 34020004	        li      $v0, PRINT_STRING
1327 0a00 3C040000	        la      $a0, d_b_loc
     0a04 34840000
1328 0a08 0000000C	        syscall
1329 0a0c               
1330 0a0c 3C040000	        la      $a0, b_coordinates                  #get addr of arr
     0a10 34840000
1331 0a14 0C000225	        jal     get_b                               #get size b
1332 0a18 00402821	        move    $a1, $v0
1333 0a1c 0C000231	        jal     print_locations
1334 0a20               
1335 0a20 34020004	        li      $v0, PRINT_STRING
1336 0a24 3C040000	        la      $a0, newline
     0a28 34840000
1337 0a2c 0000000C	        syscall
1338 0a30                       
1339 0a30 8FBF0004	        lw      $ra, 4($sp)
1340 0a34 8FB00000	        lw      $s0, 0($sp)
1341 0a38 23BD0008	        addi    $sp, $sp, 8
1342 0a3c 03E00008	        jr      $ra
1343 0a40               


A                          00000247 R  data 
A_ARRAY_OFFSET           = 00000018   
A_OFFSET                 = 00000008   
A_cells                    00000254 R  data 
B                          00000249 R  data 
B_ARRAY_OFFSET           = 0000001C   
B_OFFSET                 = 0000000C   
B_cells                    00000258 R  data 
DIM_OFFSET               = 00000000   
FRAMESIZE_48             = 00000030   
GEN_OFFSET               = 00000004   
NEXT_A_OFFSET            = 00000010   
NEXT_B_OFFSET            = 00000014   
PRINT_CHAR               = 0000000B   
PRINT_INT                = 00000001   
PRINT_STRING             = 00000004   
READ_INT                 = 00000005   
READ_STRING              = 00000008   
REGISTERS_2              = 0000000C   
REGISTERS_3              = 00000010   
REGISTERS_4              = 00000014   
REGISTERS_5              = 00000018   
REGISTERS_6              = 0000001C   
REGISTERS_7              = 00000020   
REGISTERS_8              = 00000024   
REGISTER_1               = 00000008   
a_coordinates              00000260 R  data 
a_coordinates_2            000041CC R  data 
a_neighbors                000002C4 R  text 
a_next                     0000025C R  data 
b_coordinates              00001E84 R  data 
b_coordinates_2            00005DEC R  data 
b_neighbors                00000290 R  text 
b_next                     00001E80 R  data 
banner                     000000AD R  data 
bar                        00000245 R  data 
become_A                   0000038C R  text 
become_B                   0000039C R  text 
board_1                    00003AC4 R  data 
board_2                    00003E48 R  data 
board_dim                  0000024C R  data 
check_left                 000004B4 R  text 
check_right                000004C0 R  text 
check_top                  000004A8 R  text 
cmp_bot                    000004E8 R  text 
cmp_bot_left               00000560 R  text 
cmp_bot_right              00000578 R  text 
cmp_left                   00000500 R  text 
cmp_right                  00000518 R  text 
cmp_top_left               00000530 R  text 
cmp_top_right              00000548 R  text 
comma                      0000023C R  data 
conway_end                 00000414 R  text 
conway_loop                000001CC R  text 
count_neighbors            0000043C R  text 
count_neighbors_end        00000590 R  text 
d_a_cells                  000001F0 R  data 
d_a_loc                    00000216 R  data 
d_b_cells                  00000203 R  data 
d_b_loc                    00000228 R  data 
d_dim                      000001CB R  data 
d_gen                      000001E0 R  data 
debug_params               00000948 R  text 
end_col_loop               00000648 R  text 
end_conway_loop            000003CC R  text 
end_main                   00000194 R  text 
enter_board_size           00000000 R  data 
enter_generations          00000014 R  data 
enter_locations            00000090 R  data 
even_col_end               000003AC R  text 
even_col_loop              00000200 R  text 
even_generation            000001DC R  text 
even_row_end               000003C0 R  text 
even_row_loop              000001F8 R  text 
fill_a                     000007D4 R  text 
fill_a_end                 00000800 R  text 
fill_array                 00000778 R  text 
fill_b                     00000818 R  text 
fill_positions             00000794 R  text 
fill_positions_end         00000844 R  text 
gen_banner_end             00000108 R  data 
gen_banner_start           000000F4 R  data 
generations                00000250 R  data 
get_A_cells                ******** XG
get_B_cells                ******** XG
get_a                      00000884 R  text 
get_b                      00000894 R  text 
get_board_dim              00000864 R  text 
get_generations            00000874 R  text 
get_integer                ******** XG
get_pos                    000008A4 R  text 
illegal_cells              00000175 R  data 
illegal_gens               00000140 R  data 
illegal_point              000001A9 R  data 
illegal_size               00000116 R  data 
is_dead                    0000033C R  text 
live_cells_A               0000003A R  data 
live_cells_B               00000065 R  data 
live_die_logic             000002F4 R  text 
load_blanks                00000764 R  text 
lp                         0000023A R  data 
main                       00000000 RG text 
minus                      00000243 R  data 
n_2_or_3                   00000370 R  text 
n_gt_3                     00000358 R  text 
n_lt_2                     00000340 R  text 
newline                    00000112 R  data 
odd_generation             000001E8 R  text 
opp_is_B                   00000488 R  text 
param_block                00003AA4 R  data 
plus                       00000241 R  data 
print_board                000005B8 R  text 
print_board_end            00000674 R  text 
print_col_loop             00000618 R  text 
print_done                 00000934 R  text 
print_generation           000003F4 R  text 
print_generation_banner    00000700 R  text 
print_locations            000008C4 R  text 
print_loop                 000008CC R  text 
print_row_loop             000005E8 R  text 
print_top_bottom           00000690 R  text 
prt_b_1                    000003EC R  text 
reset_to_even              000002FC R  text 
reset_to_odd               0000031C R  text 
resurrect                  00000374 R  text 
rp                         0000023F R  data 
run_conway                 000001A0 R  text 
set_odd_board              00000248 R  text 
set_prev_done              00000250 R  text 
setup_board                00000734 R  text 
setup_end                  0000077C R  text 
space                      00000114 R  data 
start_count                0000048C R  text 
start_loop                 000001F0 R  text 
tb_end                     000006D4 R  text 
tb_loop                    000006B4 R  text 
validate_nbrs              000004CC R  text 
