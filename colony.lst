   1 0000               # File: $Id$
   2 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   3 0000               # Description: this file is the main file for the
   4 0000               #               cs250 project
   5 0000               
   6 0000               
   7 0000               
   8 0000               ###########################################
   9 0000               # ======================================= #
  10 0000               # ||        CONSTANTS BLOCK            || #
  11 0000               # ======================================= #
  12 0000               ###########################################
  13 0000               
  14 0000               # ===========================
  15 0000               # || param block constants ||
  16 0000               # ===========================
  17 0000               
  18 0000               DIM_OFFSET = 0
  19 0000               GEN_OFFSET = 4
  20 0000               A_OFFSET = 8
  21 0000               B_OFFSET = 12
  22 0000               NEXT_A_OFFSET = 16
  23 0000               NEXT_B_OFFSET = 20
  24 0000               A_ARRAY_OFFSET = 24
  25 0000               B_ARRAY_OFFSET = 28
  26 0000               
  27 0000               # syscall codes
  28 0000               
  29 0000               PRINT_INT =	1
  30 0000               PRINT_STRING = 	4
  31 0000               READ_INT = 	5
  32 0000               READ_STRING =	8
  33 0000               
  34 0000               # various frame sizes used by different routines
  35 0000               
  36 0000               FRAMESIZE_8 = 	8
  37 0000               FRAMESIZE_24 =	24
  38 0000               FRAMESIZE_40 =	40
  39 0000               FRAMESIZE_48 =	48
  40 0000               
  41 0000                       .data
  42 0000                       .align      2
  43 0000               
  44 0000               # ====================
  45 0000               #    INPUT STRINGS 
  46 0000               # ====================
  47 0000               
  48 0000               enter_board_size:
  49 0000 0A456E74	        .asciiz "\nEnter board size: "
          65722062
          6F617264
          2073697A
          653A2000
  50 0014               
  51 0014               enter_generations: 
  52 0014 0A456E74	        .asciiz "\nEnter number of generations to run: "
          6572206E
          756D6265
          72206F66
          2067656E
          65726174
  53 003a               
  54 003a               live_cells_A:
  55 003a 0A456E74	        .asciiz "\nEnter number of live cells for colony A: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  56 0065               
  57 0065               live_cells_B:
  58 0065 0A456E74	        .asciiz "\nEnter number of live cells for colony B: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  59 0090               
  60 0090               enter_locations:
  61 0090 0A537461	        .asciiz "\nStart entering locations: \n"
          72742065
          6E746572
          696E6720
          6C6F6361
          74696F6E
  62 00ad               
  63 00ad               # ====================
  64 00ad               #    OTHER STRINGS 
  65 00ad               # ====================
  66 00ad               
  67 00ad               banner:
  68 00ad 0A2A2A2A	        .ascii "\n**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  69 00c5 2A2A2A2A	        .ascii "****    Colony    ****\n"
          20202020
          436F6C6F
          6E792020
          20202A2A
          2A2A0A  
  70 00dc 2A2A2A2A	        .asciiz "**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A0A00
  71 00f4               
  72 00f4               gen_banner_start:
  73 00f4 3D3D3D3D	        .asciiz "====    GENERATION "
          20202020
          47454E45
          52415449
          4F4E2000
  74 0108               
  75 0108               gen_banner_end:
  76 0108 20202020	        .asciiz "    ====\n"
          3D3D3D3D
          0A00    
  77 0112               
  78 0112               newline: 
  79 0112 0A00    	        .asciiz "\n"
  80 0114               
  81 0114               space:
  82 0114 2000    	        .asciiz " "
  83 0116               
  84 0116               # ====================
  85 0116               #    ERROR STRINGS 
  86 0116               # ====================
  87 0116               
  88 0116               illegal_size:
  89 0116 0A574152	        .asciiz "\nWARNING: illegal board size, try again: "
          4E494E47
          3A20696C
          6C656761
          6C20626F
          61726420
  90 0140               
  91 0140               illegal_gens:
  92 0140 0A574152	        .asciiz "\nWARNING: illegal number of generations, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
  93 0175               
  94 0175               illegal_cells:
  95 0175 0A574152	        .asciiz "\nWARNING: illegal number of live cells, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
  96 01a9               
  97 01a9               illegal_point:
  98 01a9 0A574152	        .asciiz "\nWARNING: illegal point location\n"
          4E494E47
          3A20696C
          6C656761
          6C20706F
          696E7420
  99 01cb               
 100 01cb               # ====================
 101 01cb               #    DEBUG STRINGS  
 102 01cb               # ====================
 103 01cb               
 104 01cb               d_dim:
 105 01cb 0A20426F	        .asciiz "\n Board Dimensions: "
          61726420
          44696D65
          6E73696F
          6E733A20
          00      
 106 01e0               
 107 01e0               d_gen:
 108 01e0 0A204765	        .asciiz "\n Generations: "
          6E657261
          74696F6E
          733A2000
 109 01f0               
 110 01f0               d_a_cells:
 111 01f0 0A20436F	        .asciiz "\n Colony A Cells: "
          6C6F6E79
          20412043
          656C6C73
          3A2000  
 112 0203               
 113 0203               d_b_cells:
 114 0203 0A20436F	        .asciiz "\n Colony B Cells: "
          6C6F6E79
          20422043
          656C6C73
          3A2000  
 115 0216               
 116 0216               d_a_loc:
 117 0216 0A204120	        .asciiz "\n A Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 118 0228               
 119 0228               d_b_loc:
 120 0228 0A204220	        .asciiz "\n B Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 121 023a               
 122 023a               lp:
 123 023a 2800    	        .asciiz "("
 124 023c               comma:
 125 023c 2C2000  	        .asciiz ", "
 126 023f               rp:
 127 023f 2900    	        .asciiz ")"
 128 0241               
 129 0241               # ====================
 130 0241               #    BOARD STRINGS  
 131 0241               # ====================
 132 0241               
 133 0241               plus:
 134 0241 2B00    	        .asciiz "+"
 135 0243               
 136 0243               minus:
 137 0243 2D00    	        .asciiz "-"
 138 0245               
 139 0245               bar:
 140 0245 7C00    	        .asciiz "|"
 141 0247               
 142 0247               A:
 143 0247 4100    	        .asciiz "A"
 144 0249               B:
 145 0249 4200    	        .asciiz "B"
 146 024b               
 147 024b               # ====================
 148 024b               #     GAME BUFFERS
 149 024b               # ====================
 150 024b               # These addresses will hold the values read in by the user
 151 024b               # if a negative one is detected in a register, the value will
 152 024b               # be known to not be read in correctly
 153 024b               
 154 024b               board_dim:
 155 024b 00      	        .word       -1
     024c FFFFFFFF
 156 0250               
 157 0250               generations:
 158 0250 FFFFFFFF	        .word       -1
 159 0254               
 160 0254               A_cells:
 161 0254 FFFFFFFF	        .word       -1
 162 0258               
 163 0258               B_cells:
 164 0258 FFFFFFFF	        .word       -1
 165 025c               
 166 025c               a_next:
 167 025c 00000260	        .word       a_coordinates
 168 0260               
 169 0260               a_coordinates:                                          
 170 0260 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 171 1e80                       .align      2
 172 1e80               
 173 1e80               b_next:
 174 1e80 00001E84	        .word       b_coordinates
 175 1e84               
 176 1e84               b_coordinates:
 177 1e84 00000000	        .space      7200                            #space for 300 y's
          00000000
          00000000
          00000000
          00000000
          00000000
 178 3aa4                       .align      2
 179 3aa4               
 180 3aa4                       #   === 32 byte structure ===   #
 181 3aa4               
 182 3aa4               param_block:
 183 3aa4 0000024C	        .word       board_dim                       #0 offset
 184 3aa8 00000250	        .word       generations                     #4 offset
 185 3aac 00000254	        .word       A_cells                         #8 offset
 186 3ab0 00000258	        .word       B_cells                         #12 offset
 187 3ab4 0000025C	        .word       a_next                          #16 offset
 188 3ab8 00001E80	        .word       b_next                          #20 offset
 189 3abc 00000260	        .word       a_coordinates                   #24 offset
 190 3ac0 00001E84	        .word       b_coordinates                   #28 offset
 191 3ac4               
 192 3ac4               board_1:
 193 3ac4 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 194 3e48                       .align      2
 195 3e48                       
 196 3e48               board_2:
 197 3e48 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 198 41cc                       .align      2
 199 41cc               
 200 41cc               ###########################################
 201 41cc               # ======================================= #
 202 41cc               # ||        MAIN CODE BLOCK            || #
 203 41cc               # ======================================= #
 204 41cc               ###########################################
 205 0000                       .text
 206 0000                       .align      2
 207 0000                       .globl      main
 208 0000                       .globl      get_integer
 209 0000                       .globl      get_A_cells
 210 0000                       .globl      get_B_cells
 211 0000               
 212 0000               main:       
 213 0000 23BDFFD0	        addi    $sp, $sp, -FRAMESIZE_48
 214 0004 AFBF002C	        sw      $ra, -4+FRAMESIZE_48($sp)
 215 0008                       
 216 0008 34020004	        li      $v0, PRINT_STRING                   #print banner
 217 000c 3C040000	        la      $a0, banner
     0010 34840000
 218 0014 0000000C	        syscall
 219 0018                       
 220 0018                       # ---------------------------- #
 221 0018                       #       Get user input         #
 222 0018                       # ---------------------------- #
 223 0018               
 224 0018                       # print and get board dimensions #
 225 0018               
 226 0018 34020004	        li      $v0, PRINT_STRING                    
 227 001c 3C040000	        la      $a0, enter_board_size
     0020 34840000
 228 0024 0000000C	        syscall
 229 0028                       
 230 0028 3C040000	        la      $a0, board_dim 
     002c 34840000
 231 0030 34050004	        li      $a1, 4
 232 0034 3406001E	        li      $a2, 30
 233 0038 3C070000	        la      $a3, illegal_size
     003c 34E70000
 234 0040 0C000000	        jal     get_integer
 235 0044                       
 236 0044                       # print and get generations #
 237 0044               
 238 0044 34020004	        li      $v0, PRINT_STRING                    
 239 0048 3C040000	        la      $a0, enter_generations
     004c 34840000
 240 0050 0000000C	        syscall
 241 0054                       
 242 0054 3C040000	        la      $a0, generations
     0058 34840000
 243 005c 34050000	        li      $a1, 0
 244 0060 34060014	        li      $a2, 20
 245 0064 3C070000	        la      $a3, illegal_gens
     0068 34E70000
 246 006c 0C000000	        jal     get_integer
 247 0070               
 248 0070                       # print and get A colony size #
 249 0070               
 250 0070 34020004	        li      $v0, PRINT_STRING                    
 251 0074 3C040000	        la      $a0, live_cells_A
     0078 34840000
 252 007c 0000000C	        syscall
 253 0080                       
 254 0080 3C040000	        la      $a0, A_cells
     0084 34840000
 255 0088 34050000	        li      $a1, 0
 256 008c 3C060000	        la      $a2, board_dim
     0090 34C60000
 257 0094 8CC60000	        lw      $a2, 0($a2)
 258 0098 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     009c 00003012
 259 00a0 3C070000	        la      $a3, illegal_cells
     00a4 34E70000
 260 00a8 0C000000	        jal     get_integer
 261 00ac               
 262 00ac                       # print and get A colony locations #
 263 00ac               
 264 00ac 34020004	        li      $v0, PRINT_STRING                    
 265 00b0 3C040000	        la      $a0, enter_locations
     00b4 34840000
 266 00b8 0000000C	        syscall
 267 00bc                       
 268 00bc 3C040000	        la      $a0, param_block
     00c0 34840000
 269 00c4 3C050000	        la      $a1, illegal_point
     00c8 34A50000
 270 00cc 0C000000	        jal     get_A_cells
 271 00d0               
 272 00d0                       # print and get B colony size #
 273 00d0               
 274 00d0 34020004	        li      $v0, PRINT_STRING                    
 275 00d4 3C040000	        la      $a0, live_cells_B
     00d8 34840000
 276 00dc 0000000C	        syscall
 277 00e0                       
 278 00e0 3C040000	        la      $a0, B_cells
     00e4 34840000
 279 00e8 34050000	        li      $a1, 0
 280 00ec 3C060000	        la      $a2, board_dim
     00f0 34C60000
 281 00f4 8CC60000	        lw      $a2, 0($a2)
 282 00f8 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     00fc 00003012
 283 0100 3C070000	        la      $a3, illegal_cells
     0104 34E70000
 284 0108 0C000000	        jal     get_integer
 285 010c                       
 286 010c                       # print and get B colony locations #
 287 010c               
 288 010c 34020004	        li      $v0, PRINT_STRING                    
 289 0110 3C040000	        la      $a0, enter_locations
     0114 34840000
 290 0118 0000000C	        syscall
 291 011c                       
 292 011c 3C040000	        la      $a0, param_block
     0120 34840000
 293 0124 3C050000	        la      $a1, illegal_point
     0128 34A50000
 294 012c 0C000000	        jal     get_B_cells
 295 0130                       
 296 0130               
 297 0130                       # == test input grabbing == #
 298 0130 3C040000	        la      $a0, param_block
     0134 34840000
 299 0138 0C0000F1	        jal     debug_params
 300 013c                       
 301 013c               #set up board       
 302 013c 0C0000A8	        jal     setup_board
 303 0140 0C000054	        jal     print_board
 304 0144                       #jal     run_conway
 305 0144               
 306 0144               end_main:
 307 0144 8FBF002C	        lw      $ra, -4+FRAMESIZE_48($sp)
 308 0148 23BD0030	        addi    $sp, $sp, FRAMESIZE_48
 309 014c 03E00008	        jr      $ra
 310 0150               
 311 0150               # =========================================================
 312 0150               # Name:             print_board 
 313 0150               # =========================================================
 314 0150               # Description:      print the board as a 2D array
 315 0150               #                   
 316 0150               #
 317 0150               # Parameters:
 318 0150               #       s0 -        the dim of the board
 319 0150               #       s1 -        the pointer to the row to print
 320 0150               #       s2 -        the addr ofthe array
 321 0150               #
 322 0150               # T Registers:
 323 0150               #       t0 -        row loop flag
 324 0150               #       t1 -        row loop counter
 325 0150               #       t2 -        col loop counter
 326 0150               #       t3 -        pointer for col in row / banner counter
 327 0150               #       t4 -        column loop flag
 328 0150               #
 329 0150               # =========================================================
 330 0150               
 331 0150               print_board: 
 332 0150 23BDFFF0	        addi    $sp, $sp, -16 
 333 0154 AFBF000C	        sw      $ra, 12($sp)
 334 0158 AFB00008	        sw      $s0, 8($sp)
 335 015c AFB10004	        sw      $s1, 4($sp)
 336 0160 8FB20000	        lw      $s2, 0($sp)
 337 0164               
 338 0164                       # print top of board #
 339 0164 0C00008C	        jal     print_top_bottom
 340 0168               
 341 0168                       # get board dim #
 342 0168               
 343 0168 0C0000C0	        jal     get_board_dim
 344 016c 00408021	        move    $s0, $v0
 345 0170               
 346 0170                       # get board space #
 347 0170               
 348 0170 3C110000	        la      $s1, board_1
     0174 36310000
 349 0178 3C120000	        la      $s2, board_1
     017c 36520000
 350 0180               
 351 0180                       # calculate row to start at#
 352 0180               
 353 0180 2209FFFF	        addi    $t1, $s0, -1                        # row = dim - 1
 354 0184 00005021	        move    $t2, $zero                          # col = 0
 355 0188               
 356 0188                       
 357 0188               print_row_loop:
 358 0188 0120402A	        slt     $t0, $t1, $zero                      #while(row >= 0)
 359 018c 15000021	        bne     $t0, $zero, print_board_end 
 360 0190               
 361 0190 3C040000	        la      $a0, bar                            #print("|")
     0194 34840000
 362 0198 34020004	        li      $v0, PRINT_STRING 
 363 019c 0000000C	        syscall
 364 01a0               
 365 01a0                       # calculate row address #
 366 01a0 34010001	        mul     $s1, $s0, 1                         # len_c = size(char) * dim
     01a4 02010018
     01a8 00008812
 367 01ac 02290018	        mul     $s1, $s1, $t1                       # offset = len_c * row
     01b0 00008812
 368 01b4 02518820	        add     $s1, $s2, $s1                       # r_addr = base + offset
 369 01b8                       
 370 01b8               print_col_loop:
 371 01b8 0150602A	        slt     $t4, $t2, $s0                       #while(col < dim)
 372 01bc 1180000A	        beq     $t4, $zero, end_col_loop
 373 01c0               
 374 01c0 02205821	        move    $t3, $s1                            #load addr of arr[row][0]
 375 01c4               
 376 01c4 34010001	        mul     $t5, $t2, 1                         #sizeof(char)*col_index
     01c8 01410018
     01cc 00006812
 377 01d0 016D5820	        add     $t3, $t3, $t5                       #row base + offset
 378 01d4               
 379 01d4 81640000	        lb      $a0, 0($t3)
 380 01d8 3402000B	        li      $v0, 11
 381 01dc 0000000C	        syscall                                     #print(arr[row][col])
 382 01e0                       
 383 01e0 214A0001	        addi    $t2, $t2, 1                         #col++
 384 01e4 0800006E	        j       print_col_loop
 385 01e8               
 386 01e8               end_col_loop:
 387 01e8                       
 388 01e8 3C040000	        la      $a0, bar                            #print("|")
     01ec 34840000
 389 01f0 34020004	        li      $v0, PRINT_STRING 
 390 01f4 0000000C	        syscall
 391 01f8               
 392 01f8 3C040000	        la      $a0, newline                       #print("\n")
     01fc 34840000
 393 0200 34020004	        li      $v0, PRINT_STRING 
 394 0204 0000000C	        syscall
 395 0208                       
 396 0208 00005021	        move    $t2, $zero                          # col = 0
 397 020c 2129FFFF	        addi    $t1, $t1, -1                        # row--
 398 0210 08000062	        j       print_row_loop
 399 0214               
 400 0214               
 401 0214               print_board_end:
 402 0214 0C00008C	        jal     print_top_bottom                    #print bottom board
 403 0218               
 404 0218 8FBF000C	        lw      $ra, 12($sp)
 405 021c 8FB00008	        lw      $s0, 8($sp)
 406 0220 8FB10004	        lw      $s1, 4($sp)
 407 0224 8FB20000	        lw      $s2, 0($sp)
 408 0228 23BD0010	        addi    $sp, $sp, 16
 409 022c 03E00008	        jr      $ra
 410 0230               
 411 0230               # =========================================================
 412 0230               # Name:             print_top_bottom
 413 0230               # =========================================================
 414 0230               # Description:      this prints the top banner of the board
 415 0230               #
 416 0230               # T Registers:
 417 0230               #       t0  -       loop counter
 418 0230               #       t1  -       board dimension
 419 0230               # =========================================================
 420 0230               print_top_bottom:
 421 0230 23BDFFFC	        addi    $sp, $sp, -4
 422 0234 AFBF0000	        sw      $ra, 0($sp)
 423 0238               
 424 0238                       
 425 0238 0C0000C0	        jal     get_board_dim
 426 023c 00404821	        move    $t1, $v0
 427 0240               
 428 0240 3C040000	        la      $a0, plus                           #print("+")
     0244 34840000
 429 0248 34020004	        li      $v0, PRINT_STRING 
 430 024c 0000000C	        syscall
 431 0250               
 432 0250 00004021	        move    $t0, $zero
 433 0254                       
 434 0254               tb_loop:
 435 0254 0109582A	        slt     $t3, $t0, $t1                       #while(i < dim)
 436 0258 11600006	        beq     $t3, $zero, tb_end
 437 025c               
 438 025c 3C040000	        la      $a0, minus                          #print("-")
     0260 34840000
 439 0264 34020004	        li      $v0, PRINT_STRING 
 440 0268 0000000C	        syscall
 441 026c                       
 442 026c 21080001	        addi    $t0, $t0, 1
 443 0270 08000095	        j       tb_loop
 444 0274               tb_end:
 445 0274               
 446 0274 3C040000	        la      $a0, plus                           #print("+")
     0278 34840000
 447 027c 34020004	        li      $v0, PRINT_STRING 
 448 0280 0000000C	        syscall
 449 0284               
 450 0284 3C040000	        la      $a0, newline                        #print("\n")
     0288 34840000
 451 028c 34020004	        li      $v0, PRINT_STRING 
 452 0290 0000000C	        syscall
 453 0294                       
 454 0294 8FBF0000	        lw      $ra, 0($sp)
 455 0298 23BD0004	        addi    $sp, $sp, 4
 456 029c 03E00008	        jr      $ra
 457 02a0               
 458 02a0               
 459 02a0               # =========================================================
 460 02a0               # Name:             setup_board
 461 02a0               # =========================================================
 462 02a0               # Description:      this fills the spots in the array with 
 463 02a0               #                   either an "A", "B", or " "(space)
 464 02a0               #
 465 02a0               # S Registers:
 466 02a0               #       - s0        the board dimension
 467 02a0               #       - s1        the pointer to pos in 2d array
 468 02a0               #       - s2        the addr of the end 2d array
 469 02a0               #
 470 02a0               # T Registers:
 471 02a0               #       - t2        addr of a_coordinates
 472 02a0               #       - t3        addr of b_coordinates
 473 02a0               #       - t9        pointer to curr in array
 474 02a0               # =========================================================
 475 02a0               setup_board:
 476 02a0 23BDFFF0	        addi    $sp, $sp, -16
 477 02a4 AFBF000C	        sw      $ra, 12($sp)
 478 02a8 AFB00008	        sw      $s0, 8($sp)
 479 02ac AFB10004	        sw      $s1, 4($sp)
 480 02b0 AFB20000	        sw      $s2, 0($sp)
 481 02b4               
 482 02b4 0C0000C0	        jal     get_board_dim                       #get board dim
 483 02b8 00408021	        move    $s0, $v0
 484 02bc 3C110000	        la      $s1, board_1                        #get board addr
     02c0 36310000
 485 02c4                       #lw      $s1, 0($s1)
 486 02c4                   
 487 02c4 02100018	        mul     $t0, $s0, $s0                       #dim^2
     02c8 00004012
 488 02cc 01119020	        add     $s2, $t0, $s1                       #pointer to end of array
 489 02d0               
 490 02d0 34090020	        li      $t1, 32                             #t1 = ascii " "
 491 02d4               load_blanks:
 492 02d4 0251402A	        slt     $t0, $s2, $s1                       # i == dim; break
 493 02d8 15000003	        bne     $t0, $zero, fill_array
 494 02dc                       
 495 02dc A2290000	        sb      $t1, 0($s1)                         #arr[i] = ' ';
 496 02e0               
 497 02e0 22310001	        addi    $s1, $s1, 1                         #i++
 498 02e4 080000B5	        j       load_blanks
 499 02e8               
 500 02e8               fill_array:
 501 02e8               
 502 02e8               setup_end:
 503 02e8 8FBF000C	        lw      $ra, 12($sp)
 504 02ec 8FB00008	        lw      $s0, 8($sp)
 505 02f0 8FB10004	        lw      $s1, 4($sp)
 506 02f4 8FB20000	        lw      $s2, 0($sp)
 507 02f8 23BD0010	        addi    $sp, $sp, 16
 508 02fc 03E00008	        jr      $ra
 509 0300               
 510 0300               ###########################################
 511 0300               # ======================================= #
 512 0300               # ||        Helper Code                || #
 513 0300               # ======================================= #
 514 0300               ###########################################
 515 0300               
 516 0300               get_board_dim:
 517 0300 3C080000	        la      $t0, board_dim
     0304 35080000
 518 0308 8D020000	        lw      $v0, 0($t0)
 519 030c 03E00008	        jr      $ra
 520 0310               
 521 0310               get_generations:
 522 0310 3C080000	        la      $t0, generations
     0314 35080000
 523 0318 8D020000	        lw      $v0, 0($t0)
 524 031c 03E00008	        jr      $ra
 525 0320               
 526 0320               get_a:
 527 0320 3C080000	        la      $t0, A_cells
     0324 35080000
 528 0328 8D020000	        lw      $v0, 0($t0)
 529 032c 03E00008	        jr      $ra
 530 0330               
 531 0330               get_b:
 532 0330 3C080000	        la      $t0, B_cells
     0334 35080000
 533 0338 8D020000	        lw      $v0, 0($t0)
 534 033c 03E00008	        jr      $ra
 535 0340               
 536 0340               
 537 0340               # =========================================================
 538 0340               # Name:             print_locations
 539 0340               # =========================================================
 540 0340               # Description:      prints an array of location "structs"
 541 0340               #                   each structure is 8 bytes long where:
 542 0340               #                       - 0 -> x coordinate
 543 0340               #                       - 4 offset -> y coordinate
 544 0340               #
 545 0340               # Parameters:
 546 0340               #       a0 -        the location of array to print
 547 0340               #       a1 -        the size of the array
 548 0340               #
 549 0340               # T Registers:
 550 0340               #       t0 -        loop counter
 551 0340               #     
 552 0340               # =========================================================
 553 0340               
 554 0340               print_locations:
 555 0340 34080000	        li      $t0, 0                              # i == 0
 556 0344 00804821	        move    $t1, $a0                            # pointer
 557 0348               
 558 0348               print_loop:
 559 0348 11050019	        beq     $t0, $a1, print_done                #done if i == n 
 560 034c               
 561 034c 3C040000	        la      $a0, newline
     0350 34840000
 562 0354 34020004	        li      $v0, PRINT_STRING                   #print \n
 563 0358 0000000C	        syscall
 564 035c                       
 565 035c 3C040000	        la      $a0, lp
     0360 34840000
 566 0364 34020004	        li      $v0, PRINT_STRING                   #print (
 567 0368 0000000C	        syscall
 568 036c                       
 569 036c 8D240000	        lw      $a0, 0($t1)                         #get a[i].x
 570 0370 34020001	        li      $v0, PRINT_INT
 571 0374 0000000C	        syscall                                     #print a[i].x
 572 0378               
 573 0378 3C040000	        la      $a0, comma
     037c 34840000
 574 0380 34020004	        li      $v0, PRINT_STRING                   #print ,
 575 0384 0000000C	        syscall
 576 0388                       
 577 0388 8D240004	        lw      $a0, 4($t1)                         #get a[i].y
 578 038c 34020001	        li      $v0, PRINT_INT
 579 0390 0000000C	        syscall                                     #print a[i].y
 580 0394                       
 581 0394 3C040000	        la      $a0, rp
     0398 34840000
 582 039c 34020004	        li      $v0, PRINT_STRING                   #print )
 583 03a0 0000000C	        syscall
 584 03a4                       
 585 03a4 21290008	        addi    $t1, $t1, 8                         #update pointer
 586 03a8 21080001	        addi    $t0, $t0, 1                         #i++
 587 03ac 080000D2	        j       print_loop
 588 03b0               
 589 03b0               print_done:
 590 03b0 3C040000	        la      $a0, newline
     03b4 34840000
 591 03b8 34020004	        li      $v0, PRINT_STRING
 592 03bc 0000000C	        syscall
 593 03c0                       
 594 03c0 03E00008	        jr      $ra
 595 03c4               
 596 03c4               # =========================================================
 597 03c4               # Name:             debug_params
 598 03c4               # =========================================================
 599 03c4               # Description:      print the inputs in the param block
 600 03c4               #
 601 03c4               # Parameters:
 602 03c4               #       a0 -        the parameter block
 603 03c4               # S Registers:
 604 03c4               #       s0 -        the saved parameter block
 605 03c4               # =========================================================
 606 03c4               
 607 03c4               debug_params:
 608 03c4                       
 609 03c4 23BDFFF8	        addi    $sp, $sp, -8
 610 03c8 AFBF0004	        sw      $ra, 4($sp)
 611 03cc AFB00000	        sw      $s0, 0($sp)
 612 03d0                       
 613 03d0 00808021	        move    $s0, $a0                            #save param block
 614 03d4               
 615 03d4                       # print board dimensions #
 616 03d4               
 617 03d4 34020004	        li      $v0, PRINT_STRING
 618 03d8 3C040000	        la      $a0, d_dim
     03dc 34840000
 619 03e0 0000000C	        syscall
 620 03e4               
 621 03e4 0C0000C0	        jal     get_board_dim                       #get the value of board dim
 622 03e8 00402021	        move    $a0, $v0
 623 03ec 34020001	        li      $v0, PRINT_INT                      #print board dim
 624 03f0 0000000C	        syscall
 625 03f4               
 626 03f4                       # print generations #
 627 03f4               
 628 03f4 34020004	        li      $v0, PRINT_STRING
 629 03f8 3C040000	        la      $a0, d_gen
     03fc 34840000
 630 0400 0000000C	        syscall
 631 0404 0C0000C4	        jal     get_generations                     #value of generations
 632 0408 00402021	        move    $a0, $v0
 633 040c 34020001	        li      $v0, PRINT_INT                      #print generations
 634 0410 0000000C	        syscall
 635 0414               
 636 0414                       # print colony A size #
 637 0414               
 638 0414 34020004	        li      $v0, PRINT_STRING
 639 0418 3C040000	        la      $a0, d_a_cells
     041c 34840000
 640 0420 0000000C	        syscall
 641 0424 0C0000C8	        jal     get_a                               #get size a
 642 0428 00402021	        move    $a0, $v0
 643 042c 34020001	        li      $v0, PRINT_INT                      #print size of a
 644 0430 0000000C	        syscall
 645 0434               
 646 0434                       # print locations #
 647 0434 34020004	        li      $v0, PRINT_STRING
 648 0438 3C040000	        la      $a0, d_a_loc
     043c 34840000
 649 0440 0000000C	        syscall
 650 0444               
 651 0444 3C040000	        la      $a0, a_coordinates
     0448 34840000
 652 044c 0C0000C8	        jal     get_a                               #get size a
 653 0450 00402821	        move    $a1, $v0
 654 0454 0C0000D0	        jal     print_locations
 655 0458               
 656 0458               
 657 0458                       # print colony B size#
 658 0458               
 659 0458 34020004	        li      $v0, PRINT_STRING
 660 045c 3C040000	        la      $a0, d_b_cells
     0460 34840000
 661 0464 0000000C	        syscall
 662 0468 0C0000CC	        jal     get_b                               #get size b
 663 046c 00402021	        move    $a0, $v0
 664 0470 34020001	        li      $v0, PRINT_INT                      #print it
 665 0474 0000000C	        syscall
 666 0478               
 667 0478                       # print locations#
 668 0478 34020004	        li      $v0, PRINT_STRING
 669 047c 3C040000	        la      $a0, d_b_loc
     0480 34840000
 670 0484 0000000C	        syscall
 671 0488               
 672 0488 3C040000	        la      $a0, b_coordinates                  #get addr of arr
     048c 34840000
 673 0490 0C0000CC	        jal     get_b                               #get size b
 674 0494 00402821	        move    $a1, $v0
 675 0498 0C0000D0	        jal     print_locations
 676 049c               
 677 049c 34020004	        li      $v0, PRINT_STRING
 678 04a0 3C040000	        la      $a0, newline
     04a4 34840000
 679 04a8 0000000C	        syscall
 680 04ac                       
 681 04ac 8FBF0004	        lw      $ra, 4($sp)
 682 04b0 8FB00000	        lw      $s0, 0($sp)
 683 04b4 23BD0008	        addi    $sp, $sp, 8
 684 04b8 03E00008	        jr      $ra
 685 04bc               


A                    00000247 R  data 
A_ARRAY_OFFSET     = 00000018   
A_OFFSET           = 00000008   
A_cells              00000254 R  data 
B                    00000249 R  data 
B_ARRAY_OFFSET     = 0000001C   
B_OFFSET           = 0000000C   
B_cells              00000258 R  data 
DIM_OFFSET         = 00000000   
FRAMESIZE_24       = 00000018   
FRAMESIZE_40       = 00000028   
FRAMESIZE_48       = 00000030   
FRAMESIZE_8        = 00000008   
GEN_OFFSET         = 00000004   
NEXT_A_OFFSET      = 00000010   
NEXT_B_OFFSET      = 00000014   
PRINT_INT          = 00000001   
PRINT_STRING       = 00000004   
READ_INT           = 00000005   
READ_STRING        = 00000008   
a_coordinates        00000260 R  data 
a_next               0000025C R  data 
b_coordinates        00001E84 R  data 
b_next               00001E80 R  data 
banner               000000AD R  data 
bar                  00000245 R  data 
board_1              00003AC4 R  data 
board_2              00003E48 R  data 
board_dim            0000024C R  data 
comma                0000023C R  data 
d_a_cells            000001F0 R  data 
d_a_loc              00000216 R  data 
d_b_cells            00000203 R  data 
d_b_loc              00000228 R  data 
d_dim                000001CB R  data 
d_gen                000001E0 R  data 
debug_params         000003C4 R  text 
end_col_loop         000001E8 R  text 
end_main             00000144 R  text 
enter_board_size     00000000 R  data 
enter_generations    00000014 R  data 
enter_locations      00000090 R  data 
fill_array           000002E8 R  text 
gen_banner_end       00000108 R  data 
gen_banner_start     000000F4 R  data 
generations          00000250 R  data 
get_A_cells          ******** XG
get_B_cells          ******** XG
get_a                00000320 R  text 
get_b                00000330 R  text 
get_board_dim        00000300 R  text 
get_generations      00000310 R  text 
get_integer          ******** XG
illegal_cells        00000175 R  data 
illegal_gens         00000140 R  data 
illegal_point        000001A9 R  data 
illegal_size         00000116 R  data 
live_cells_A         0000003A R  data 
live_cells_B         00000065 R  data 
load_blanks          000002D4 R  text 
lp                   0000023A R  data 
main                 00000000 RG text 
minus                00000243 R  data 
newline              00000112 R  data 
param_block          00003AA4 R  data 
plus                 00000241 R  data 
print_board          00000150 R  text 
print_board_end      00000214 R  text 
print_col_loop       000001B8 R  text 
print_done           000003B0 R  text 
print_locations      00000340 R  text 
print_loop           00000348 R  text 
print_row_loop       00000188 R  text 
print_top_bottom     00000230 R  text 
rp                   0000023F R  data 
setup_board          000002A0 R  text 
setup_end            000002E8 R  text 
space                00000114 R  data 
tb_end               00000274 R  text 
tb_loop              00000254 R  text 
