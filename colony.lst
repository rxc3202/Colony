   1 0000               # File: $Id$
   2 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   3 0000               # Description: this file is the main file for the
   4 0000               #               cs250 project
   5 0000               
   6 0000               
   7 0000               
   8 0000               ###########################################
   9 0000               # ======================================= #
  10 0000               # ||        CONSTANTS BLOCK            || #
  11 0000               # ======================================= #
  12 0000               ###########################################
  13 0000               
  14 0000               # ===========================
  15 0000               # || param block constants ||
  16 0000               # ===========================
  17 0000               
  18 0000               DIM_OFFSET = 0
  19 0000               GEN_OFFSET = 4
  20 0000               A_OFFSET = 8
  21 0000               B_OFFSET = 12
  22 0000               NEXT_A_OFFSET = 16
  23 0000               NEXT_B_OFFSET = 20
  24 0000               A_ARRAY_OFFSET = 24
  25 0000               B_ARRAY_OFFSET = 28
  26 0000               
  27 0000               # syscall codes
  28 0000               
  29 0000               PRINT_INT =	1
  30 0000               PRINT_STRING = 	4
  31 0000               READ_INT = 	5
  32 0000               READ_STRING =	8
  33 0000               PRINT_CHAR = 11 
  34 0000               
  35 0000               # various frame sizes used by different routines
  36 0000               REGISTER_1 = 8
  37 0000               REGISTERS_2 = 12
  38 0000               REGISTERS_3 = 16
  39 0000               REGISTERS_4 = 20
  40 0000               REGISTERS_5 = 24
  41 0000               REGISTERS_6 = 28
  42 0000               
  43 0000               FRAMESIZE_8 = 	8
  44 0000               FRAMESIZE_24 =	24
  45 0000               FRAMESIZE_40 =	40
  46 0000               FRAMESIZE_48 =	48
  47 0000               
  48 0000                       .data
  49 0000                       .align      2
  50 0000               
  51 0000               # ====================
  52 0000               #    INPUT STRINGS 
  53 0000               # ====================
  54 0000               
  55 0000               enter_board_size:
  56 0000 0A456E74	        .asciiz "\nEnter board size: "
          65722062
          6F617264
          2073697A
          653A2000
  57 0014               
  58 0014               enter_generations: 
  59 0014 0A456E74	        .asciiz "\nEnter number of generations to run: "
          6572206E
          756D6265
          72206F66
          2067656E
          65726174
  60 003a               
  61 003a               live_cells_A:
  62 003a 0A456E74	        .asciiz "\nEnter number of live cells for colony A: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  63 0065               
  64 0065               live_cells_B:
  65 0065 0A456E74	        .asciiz "\nEnter number of live cells for colony B: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  66 0090               
  67 0090               enter_locations:
  68 0090 0A537461	        .asciiz "\nStart entering locations: \n"
          72742065
          6E746572
          696E6720
          6C6F6361
          74696F6E
  69 00ad               
  70 00ad               # ====================
  71 00ad               #    OTHER STRINGS 
  72 00ad               # ====================
  73 00ad               
  74 00ad               banner:
  75 00ad 0A2A2A2A	        .ascii "\n**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  76 00c5 2A2A2A2A	        .ascii "****    Colony    ****\n"
          20202020
          436F6C6F
          6E792020
          20202A2A
          2A2A0A  
  77 00dc 2A2A2A2A	        .asciiz "**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A0A00
  78 00f4               
  79 00f4               gen_banner_start:
  80 00f4 3D3D3D3D	        .asciiz "====    GENERATION "
          20202020
          47454E45
          52415449
          4F4E2000
  81 0108               
  82 0108               gen_banner_end:
  83 0108 20202020	        .asciiz "    ====\n"
          3D3D3D3D
          0A00    
  84 0112               
  85 0112               newline: 
  86 0112 0A00    	        .asciiz "\n"
  87 0114               
  88 0114               space:
  89 0114 2000    	        .asciiz " "
  90 0116               
  91 0116               # ====================
  92 0116               #    ERROR STRINGS 
  93 0116               # ====================
  94 0116               
  95 0116               illegal_size:
  96 0116 0A574152	        .asciiz "\nWARNING: illegal board size, try again: "
          4E494E47
          3A20696C
          6C656761
          6C20626F
          61726420
  97 0140               
  98 0140               illegal_gens:
  99 0140 0A574152	        .asciiz "\nWARNING: illegal number of generations, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 100 0175               
 101 0175               illegal_cells:
 102 0175 0A574152	        .asciiz "\nWARNING: illegal number of live cells, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 103 01a9               
 104 01a9               illegal_point:
 105 01a9 0A574152	        .asciiz "\nWARNING: illegal point location\n"
          4E494E47
          3A20696C
          6C656761
          6C20706F
          696E7420
 106 01cb               
 107 01cb               # ====================
 108 01cb               #    DEBUG STRINGS  
 109 01cb               # ====================
 110 01cb               
 111 01cb               d_dim:
 112 01cb 0A20426F	        .asciiz "\n Board Dimensions: "
          61726420
          44696D65
          6E73696F
          6E733A20
          00      
 113 01e0               
 114 01e0               d_gen:
 115 01e0 0A204765	        .asciiz "\n Generations: "
          6E657261
          74696F6E
          733A2000
 116 01f0               
 117 01f0               d_a_cells:
 118 01f0 0A20436F	        .asciiz "\n Colony A Cells: "
          6C6F6E79
          20412043
          656C6C73
          3A2000  
 119 0203               
 120 0203               d_b_cells:
 121 0203 0A20436F	        .asciiz "\n Colony B Cells: "
          6C6F6E79
          20422043
          656C6C73
          3A2000  
 122 0216               
 123 0216               d_a_loc:
 124 0216 0A204120	        .asciiz "\n A Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 125 0228               
 126 0228               d_b_loc:
 127 0228 0A204220	        .asciiz "\n B Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 128 023a               
 129 023a               lp:
 130 023a 2800    	        .asciiz "("
 131 023c               comma:
 132 023c 2C2000  	        .asciiz ", "
 133 023f               rp:
 134 023f 2900    	        .asciiz ")"
 135 0241               
 136 0241               # ====================
 137 0241               #    BOARD STRINGS  
 138 0241               # ====================
 139 0241               
 140 0241               plus:
 141 0241 2B00    	        .asciiz "+"
 142 0243               
 143 0243               minus:
 144 0243 2D00    	        .asciiz "-"
 145 0245               
 146 0245               bar:
 147 0245 7C00    	        .asciiz "|"
 148 0247               
 149 0247               A:
 150 0247 4100    	        .asciiz "A"
 151 0249               B:
 152 0249 4200    	        .asciiz "B"
 153 024b               
 154 024b               # ====================
 155 024b               #     GAME BUFFERS
 156 024b               # ====================
 157 024b               # These addresses will hold the values read in by the user
 158 024b               # if a negative one is detected in a register, the value will
 159 024b               # be known to not be read in correctly
 160 024b               
 161 024b               board_dim:
 162 024b 00      	        .word       -1
     024c FFFFFFFF
 163 0250               
 164 0250               generations:
 165 0250 FFFFFFFF	        .word       -1
 166 0254               
 167 0254               A_cells:
 168 0254 FFFFFFFF	        .word       -1
 169 0258               
 170 0258               B_cells:
 171 0258 FFFFFFFF	        .word       -1
 172 025c               
 173 025c               a_next:
 174 025c 00000260	        .word       a_coordinates
 175 0260               
 176 0260               a_coordinates:                                          
 177 0260 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 178 1e80                       .align      2
 179 1e80               
 180 1e80               b_next:
 181 1e80 00001E84	        .word       b_coordinates
 182 1e84               
 183 1e84               b_coordinates:
 184 1e84 00000000	        .space      7200                            #space for 300 y's
          00000000
          00000000
          00000000
          00000000
          00000000
 185 3aa4                       .align      2
 186 3aa4               
 187 3aa4                       #   === 32 byte structure ===   #
 188 3aa4               
 189 3aa4               param_block:
 190 3aa4 0000024C	        .word       board_dim                       #0 offset
 191 3aa8 00000250	        .word       generations                     #4 offset
 192 3aac 00000254	        .word       A_cells                         #8 offset
 193 3ab0 00000258	        .word       B_cells                         #12 offset
 194 3ab4 0000025C	        .word       a_next                          #16 offset
 195 3ab8 00001E80	        .word       b_next                          #20 offset
 196 3abc 00000260	        .word       a_coordinates                   #24 offset
 197 3ac0 00001E84	        .word       b_coordinates                   #28 offset
 198 3ac4               
 199 3ac4               board_1:
 200 3ac4 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 201 3e48                       .align      2
 202 3e48                       
 203 3e48               board_2:
 204 3e48 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 205 41cc                       .align      2
 206 41cc               
 207 41cc               ###########################################
 208 41cc               # ======================================= #
 209 41cc               # ||        MAIN CODE BLOCK            || #
 210 41cc               # ======================================= #
 211 41cc               ###########################################
 212 0000                       .text
 213 0000                       .align      2
 214 0000                       .globl      main
 215 0000                       .globl      get_integer
 216 0000                       .globl      get_A_cells
 217 0000                       .globl      get_B_cells
 218 0000               
 219 0000               main:       
 220 0000 23BDFFD0	        addi    $sp, $sp, -FRAMESIZE_48
 221 0004 AFBF002C	        sw      $ra, -4+FRAMESIZE_48($sp)
 222 0008                       
 223 0008 34020004	        li      $v0, PRINT_STRING                   #print banner
 224 000c 3C040000	        la      $a0, banner
     0010 34840000
 225 0014 0000000C	        syscall
 226 0018                       
 227 0018                       # ---------------------------- #
 228 0018                       #       Get user input         #
 229 0018                       # ---------------------------- #
 230 0018               
 231 0018                       # print and get board dimensions #
 232 0018               
 233 0018 34020004	        li      $v0, PRINT_STRING                    
 234 001c 3C040000	        la      $a0, enter_board_size
     0020 34840000
 235 0024 0000000C	        syscall
 236 0028                       
 237 0028 3C040000	        la      $a0, board_dim 
     002c 34840000
 238 0030 34050004	        li      $a1, 4
 239 0034 3406001E	        li      $a2, 30
 240 0038 3C070000	        la      $a3, illegal_size
     003c 34E70000
 241 0040 0C000000	        jal     get_integer
 242 0044                       
 243 0044                       # print and get generations #
 244 0044               
 245 0044 34020004	        li      $v0, PRINT_STRING                    
 246 0048 3C040000	        la      $a0, enter_generations
     004c 34840000
 247 0050 0000000C	        syscall
 248 0054                       
 249 0054 3C040000	        la      $a0, generations
     0058 34840000
 250 005c 34050000	        li      $a1, 0
 251 0060 34060014	        li      $a2, 20
 252 0064 3C070000	        la      $a3, illegal_gens
     0068 34E70000
 253 006c 0C000000	        jal     get_integer
 254 0070               
 255 0070                       # print and get A colony size #
 256 0070               
 257 0070 34020004	        li      $v0, PRINT_STRING                    
 258 0074 3C040000	        la      $a0, live_cells_A
     0078 34840000
 259 007c 0000000C	        syscall
 260 0080                       
 261 0080 3C040000	        la      $a0, A_cells
     0084 34840000
 262 0088 34050000	        li      $a1, 0
 263 008c 3C060000	        la      $a2, board_dim
     0090 34C60000
 264 0094 8CC60000	        lw      $a2, 0($a2)
 265 0098 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     009c 00003012
 266 00a0 3C070000	        la      $a3, illegal_cells
     00a4 34E70000
 267 00a8 0C000000	        jal     get_integer
 268 00ac               
 269 00ac                       # print and get A colony locations #
 270 00ac               
 271 00ac 34020004	        li      $v0, PRINT_STRING                    
 272 00b0 3C040000	        la      $a0, enter_locations
     00b4 34840000
 273 00b8 0000000C	        syscall
 274 00bc                       
 275 00bc 3C040000	        la      $a0, param_block
     00c0 34840000
 276 00c4 3C050000	        la      $a1, illegal_point
     00c8 34A50000
 277 00cc 0C000000	        jal     get_A_cells
 278 00d0               
 279 00d0                       # print and get B colony size #
 280 00d0               
 281 00d0 34020004	        li      $v0, PRINT_STRING                    
 282 00d4 3C040000	        la      $a0, live_cells_B
     00d8 34840000
 283 00dc 0000000C	        syscall
 284 00e0                       
 285 00e0 3C040000	        la      $a0, B_cells
     00e4 34840000
 286 00e8 34050000	        li      $a1, 0
 287 00ec 3C060000	        la      $a2, board_dim
     00f0 34C60000
 288 00f4 8CC60000	        lw      $a2, 0($a2)
 289 00f8 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     00fc 00003012
 290 0100 3C070000	        la      $a3, illegal_cells
     0104 34E70000
 291 0108 0C000000	        jal     get_integer
 292 010c                       
 293 010c                       # print and get B colony locations #
 294 010c               
 295 010c 34020004	        li      $v0, PRINT_STRING                    
 296 0110 3C040000	        la      $a0, enter_locations
     0114 34840000
 297 0118 0000000C	        syscall
 298 011c                       
 299 011c 3C040000	        la      $a0, param_block
     0120 34840000
 300 0124 3C050000	        la      $a1, illegal_point
     0128 34A50000
 301 012c 0C000000	        jal     get_B_cells
 302 0130                       
 303 0130                       # == test input grabbing == #
 304 0130               
 305 0130 3C040000	        la      $a0, param_block
     0134 34840000
 306 0138 0C000146	        jal     debug_params
 307 013c               
 308 013c                       # == set up board == #
 309 013c               
 310 013c 3C040000	        la      $a0, board_1
     0140 34840000
 311 0144 0C0000C1	        jal     setup_board
 312 0148 3C040000	        la      $a0, board_1
     014c 34840000
 313 0150 0C00006F	        jal     print_board
 314 0154               
 315 0154 3C040000	        la      $a0, board_2
     0158 34840000
 316 015c 0C0000C1	        jal     setup_board
 317 0160 3C040000	        la      $a0, board_2
     0164 34840000
 318 0168 0C00006F	        jal     print_board
 319 016c                       #jal     run_conway
 320 016c               
 321 016c               end_main:
 322 016c 8FBF002C	        lw      $ra, -4+FRAMESIZE_48($sp)
 323 0170 23BD0030	        addi    $sp, $sp, FRAMESIZE_48
 324 0174 03E00008	        jr      $ra
 325 0178               
 326 0178               # =========================================================
 327 0178               # Name:             run_conway
 328 0178               # =========================================================
 329 0178               # Description:      this is the main function for running
 330 0178               #                   the game of life variation
 331 0178               #                   
 332 0178               # Parameters:
 333 0178               #
 334 0178               # S Registers:
 335 0178               #       s0 -        generations needed to run
 336 0178               #       s1 -        first game board
 337 0178               #       s2 -        second game board
 338 0178               #       s3 -        the current cell being considered
 339 0178               #       s4 -        the current generation we're on
 340 0178               #
 341 0178               # T Registers:
 342 0178               #       t0 -        pointer to a game board at (col, row)
 343 0178               #
 344 0178               # =========================================================
 345 0178               
 346 0178               run_conway:
 347 0178 23BDFFE8	        addi    $sp, $sp, -REGISTERS_5
 348 017c AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 349 0180 AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 350 0184 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 351 0188 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 352 018c AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 353 0190 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 354 0194               
 355 0194               conway_loop:
 356 0194 0214482A	        slt     $t1, $s0, $s4                       # while(i < gens)
 357 0198 15200000	        bne     $t1, $zero, conway_end              # {
 358 019c               
 359 019c               
 360 019c               
 361 019c                                                                   # }
 362 019c               conway_end:
 363 019c AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 364 01a0 AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 365 01a4 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 366 01a8 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 367 01ac AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 368 01b0 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 369 01b4 23BD0018	        addi    $sp, $sp, REGISTERS_5
 370 01b8 03E00008	        jr      $ra
 371 01bc               
 372 01bc               # =========================================================
 373 01bc               # Name:             print_board 
 374 01bc               # =========================================================
 375 01bc               # Description:      print the board as a 2D array
 376 01bc               #                   
 377 01bc               # Parameters:
 378 01bc               #       a0 -        the addr of the board to print
 379 01bc               #
 380 01bc               # Parameters:
 381 01bc               #       s0 -        the dim of the board
 382 01bc               #       s1 -        the pointer to the row to print
 383 01bc               #       s2 -        the addr ofthe array
 384 01bc               #
 385 01bc               # T Registers:
 386 01bc               #       t0 -        row loop flag
 387 01bc               #       t1 -        row loop counter
 388 01bc               #       t2 -        col loop counter
 389 01bc               #       t3 -        pointer for col in row / banner counter
 390 01bc               #       t4 -        column loop flag
 391 01bc               #
 392 01bc               # =========================================================
 393 01bc               
 394 01bc               print_board: 
 395 01bc 23BDFFF0	        addi    $sp, $sp, -16 
 396 01c0 AFBF000C	        sw      $ra, 12($sp)
 397 01c4 AFB00008	        sw      $s0, 8($sp)
 398 01c8 AFB10004	        sw      $s1, 4($sp)
 399 01cc 8FB20000	        lw      $s2, 0($sp)
 400 01d0               
 401 01d0 00808821	        move     $s1, $a0 
 402 01d4 00809021	        move     $s2, $a0 
 403 01d8               
 404 01d8                       # print top of board #
 405 01d8               
 406 01d8 0C0000A5	        jal     print_top_bottom
 407 01dc               
 408 01dc                       # get board dim #
 409 01dc               
 410 01dc 0C00010D	        jal     get_board_dim
 411 01e0 00408021	        move    $s0, $v0
 412 01e4               
 413 01e4                       # calculate row to start at#
 414 01e4               
 415 01e4 2209FFFF	        addi    $t1, $s0, -1                        # row = dim - 1
 416 01e8 00005021	        move    $t2, $zero                          # col = 0
 417 01ec               
 418 01ec                       
 419 01ec               print_row_loop:
 420 01ec 0120402A	        slt     $t0, $t1, $zero                     #while(row >= 0)
 421 01f0 15000021	        bne     $t0, $zero, print_board_end 
 422 01f4 3C040000	        la      $a0, bar                            #print("|")
     01f8 34840000
 423 01fc 34020004	        li      $v0, PRINT_STRING 
 424 0200 0000000C	        syscall
 425 0204               
 426 0204                       # calculate row address #
 427 0204 34010001	        mul     $s1, $s0, 1                         # len_c = size(char) * dim
     0208 02010018
     020c 00008812
 428 0210 02290018	        mul     $s1, $s1, $t1                       # offset = len_c * row
     0214 00008812
 429 0218 02518820	        add     $s1, $s2, $s1                       # r_addr = base + offset
 430 021c                       
 431 021c               print_col_loop:
 432 021c 0150602A	        slt     $t4, $t2, $s0                       #while(col < dim)
 433 0220 1180000A	        beq     $t4, $zero, end_col_loop
 434 0224               
 435 0224 02205821	        move    $t3, $s1                            #load addr of arr[row][0]
 436 0228               
 437 0228 34010001	        mul     $t5, $t2, 1                         #sizeof(char)*col_index
     022c 01410018
     0230 00006812
 438 0234 016D5820	        add     $t3, $t3, $t5                       #row base + offset
 439 0238               
 440 0238 81640000	        lb      $a0, 0($t3)
 441 023c 3402000B	        li      $v0, PRINT_CHAR
 442 0240 0000000C	        syscall                                     #print(arr[row][col])
 443 0244                       
 444 0244 214A0001	        addi    $t2, $t2, 1                         #col++
 445 0248 08000087	        j       print_col_loop
 446 024c               
 447 024c               end_col_loop:
 448 024c                       
 449 024c 3C040000	        la      $a0, bar                            #print("|")
     0250 34840000
 450 0254 34020004	        li      $v0, PRINT_STRING 
 451 0258 0000000C	        syscall
 452 025c               
 453 025c 3C040000	        la      $a0, newline                       #print("\n")
     0260 34840000
 454 0264 34020004	        li      $v0, PRINT_STRING 
 455 0268 0000000C	        syscall
 456 026c                       
 457 026c 00005021	        move    $t2, $zero                          # col = 0
 458 0270 2129FFFF	        addi    $t1, $t1, -1                        # row--
 459 0274 0800007B	        j       print_row_loop
 460 0278               
 461 0278               
 462 0278               print_board_end:
 463 0278 0C0000A5	        jal     print_top_bottom                    #print bottom board
 464 027c               
 465 027c 8FBF000C	        lw      $ra, 12($sp)
 466 0280 8FB00008	        lw      $s0, 8($sp)
 467 0284 8FB10004	        lw      $s1, 4($sp)
 468 0288 8FB20000	        lw      $s2, 0($sp)
 469 028c 23BD0010	        addi    $sp, $sp, 16
 470 0290 03E00008	        jr      $ra
 471 0294               
 472 0294               # =========================================================
 473 0294               # Name:             print_top_bottom
 474 0294               # =========================================================
 475 0294               # Description:      this prints the top banner of the board
 476 0294               #
 477 0294               # T Registers:
 478 0294               #       t0  -       loop counter
 479 0294               #       t1  -       board dimension
 480 0294               # =========================================================
 481 0294               
 482 0294               print_top_bottom:
 483 0294 23BDFFFC	        addi    $sp, $sp, -4
 484 0298 AFBF0000	        sw      $ra, 0($sp)
 485 029c               
 486 029c                       
 487 029c 0C00010D	        jal     get_board_dim
 488 02a0 00404821	        move    $t1, $v0
 489 02a4               
 490 02a4 3C040000	        la      $a0, plus                           #print("+")
     02a8 34840000
 491 02ac 34020004	        li      $v0, PRINT_STRING 
 492 02b0 0000000C	        syscall
 493 02b4               
 494 02b4 00004021	        move    $t0, $zero
 495 02b8                       
 496 02b8               tb_loop:
 497 02b8 0109582A	        slt     $t3, $t0, $t1                       #while(i < dim)
 498 02bc 11600006	        beq     $t3, $zero, tb_end
 499 02c0               
 500 02c0 3C040000	        la      $a0, minus                          #print("-")
     02c4 34840000
 501 02c8 34020004	        li      $v0, PRINT_STRING 
 502 02cc 0000000C	        syscall
 503 02d0                       
 504 02d0 21080001	        addi    $t0, $t0, 1
 505 02d4 080000AE	        j       tb_loop
 506 02d8               tb_end:
 507 02d8               
 508 02d8 3C040000	        la      $a0, plus                           #print("+")
     02dc 34840000
 509 02e0 34020004	        li      $v0, PRINT_STRING 
 510 02e4 0000000C	        syscall
 511 02e8               
 512 02e8 3C040000	        la      $a0, newline                        #print("\n")
     02ec 34840000
 513 02f0 34020004	        li      $v0, PRINT_STRING 
 514 02f4 0000000C	        syscall
 515 02f8                       
 516 02f8 8FBF0000	        lw      $ra, 0($sp)
 517 02fc 23BD0004	        addi    $sp, $sp, 4
 518 0300 03E00008	        jr      $ra
 519 0304               
 520 0304               
 521 0304               # =========================================================
 522 0304               # Name:             setup_board
 523 0304               # =========================================================
 524 0304               # Description:      this fills the spots in the array with 
 525 0304               #                   either an "A", "B", or " "(space)
 526 0304               #
 527 0304               # Parameters:
 528 0304               #       - a0        location of board to set up
 529 0304               # S Registers:
 530 0304               #       - s0        the board dimension
 531 0304               #       - s1        the pointer to pos in 2d array
 532 0304               #       - s2        the addr of the end 2d array
 533 0304               #
 534 0304               # T Registers:
 535 0304               #       - t2        addr of a_coordinates
 536 0304               #       - t3        addr of b_coordinates
 537 0304               #       - t9        pointer to curr in array
 538 0304               # =========================================================
 539 0304               
 540 0304               setup_board:
 541 0304 23BDFFF0	        addi    $sp, $sp, -16
 542 0308 AFBF000C	        sw      $ra, 12($sp)
 543 030c AFB00008	        sw      $s0, 8($sp)
 544 0310 AFB10004	        sw      $s1, 4($sp)
 545 0314 AFB20000	        sw      $s2, 0($sp)
 546 0318               
 547 0318 0C00010D	        jal     get_board_dim                       #get board dim
 548 031c 00408021	        move    $s0, $v0
 549 0320 00808821	        move    $s1, $a0
 550 0324                   
 551 0324 02100018	        mul     $t0, $s0, $s0                       #dim^2
     0328 00004012
 552 032c 01119020	        add     $s2, $t0, $s1                       #pointer to end of array
 553 0330               
 554 0330 34090020	        li      $t1, 32                             #t1 = ascii " "
 555 0334               
 556 0334               load_blanks:
 557 0334 0251402A	        slt     $t0, $s2, $s1                       # i == dim; break
 558 0338 15000003	        bne     $t0, $zero, fill_array
 559 033c                       
 560 033c A2290000	        sb      $t1, 0($s1)                         #arr[i] = ' ';
 561 0340               
 562 0340 22310001	        addi    $s1, $s1, 1                         #i++
 563 0344 080000CD	        j       load_blanks
 564 0348               
 565 0348               fill_array:
 566 0348 0C0000D9	        jal     fill_positions
 567 034c                       
 568 034c               
 569 034c               setup_end:
 570 034c 8FBF000C	        lw      $ra, 12($sp)
 571 0350 8FB00008	        lw      $s0, 8($sp)
 572 0354 8FB10004	        lw      $s1, 4($sp)
 573 0358 8FB20000	        lw      $s2, 0($sp)
 574 035c 23BD0010	        addi    $sp, $sp, 16
 575 0360 03E00008	        jr      $ra
 576 0364               
 577 0364               
 578 0364               # =========================================================
 579 0364               # Name:             fill_positions
 580 0364               # =========================================================
 581 0364               # Description:      this function takes the given board 
 582 0364               #                   passed in through a0 and fills it
 583 0364               #                   with positions from the a_coordinate
 584 0364               #                   and b_coordinate arrays
 585 0364               #
 586 0364               # Parameters:
 587 0364               #       - a0        location of board to set up
 588 0364               #
 589 0364               # S Registers:
 590 0364               #       - s0        number of values in a/b
 591 0364               #       - s1        current array (a or b)
 592 0364               #       - s2        board dimensions
 593 0364               #       - s3        current ascii value
 594 0364               #
 595 0364               # T Registers:
 596 0364               #       - t0        location of the a coordinate array
 597 0364               #       - t2        pointer to board[row][col]
 598 0364               #       - t3        x coordinate from array
 599 0364               #       - t4        y coordinate from array
 600 0364               # =========================================================
 601 0364               
 602 0364               fill_positions:
 603 0364 23BDFFE8	        addi    $sp, $sp, -REGISTERS_5
 604 0368 AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 605 036c AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 606 0370 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 607 0374 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 608 0378 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 609 037c AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 610 0380               
 611 0380 0C00010D	        jal     get_board_dim
 612 0384 00409021	        move    $s2, $v0
 613 0388                   
 614 0388 0C000115	        jal     get_a
 615 038c 00408021	        move    $s0, $v0
 616 0390               
 617 0390 3C110000	        la      $s1, a_coordinates
     0394 36310000
 618 0398 34130041	        li      $s3, 65
 619 039c                       
 620 039c 00805021	        move    $t2, $a0                            # pointer to boar_arr[0]
 621 03a0 0000C821	        move    $t9, $zero                          # i = 0
 622 03a4               
 623 03a4               fill_a:
 624 03a4 0330C02A	        slt     $t8, $t9, $s0                       # while(i < a_size)
 625 03a8 13000009	        beq     $t8, $zero, fill_a_end
 626 03ac                       
 627 03ac                       # add values into 2d board
 628 03ac               
 629 03ac 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
 630 03b0 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
 631 03b4 02403821	        move    $a3, $s2                            # get dim of board
 632 03b8                       
 633 03b8 0C00011D	        jal     get_pos
 634 03bc                       
 635 03bc A0530000	        sb      $s3, 0($v0)      
 636 03c0                       
 637 03c0 23390001	        addi    $t9, $t9, 1                         # i++
 638 03c4 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
 639 03c8 00805021	        move    $t2, $a0
 640 03cc 080000E9	        j       fill_a
 641 03d0               
 642 03d0               fill_a_end:
 643 03d0               
 644 03d0 0C000119	        jal     get_b           
 645 03d4 00408021	        move    $s0, $v0                            # get b address
 646 03d8 3C110000	        la      $s1, b_coordinates                  # get base of b_arr
     03dc 36310000
 647 03e0 34130042	        li      $s3, 66                             # ascii 'B'
 648 03e4 0000C821	        move    $t9, $zero                          # i = 0
 649 03e8               
 650 03e8               fill_b:
 651 03e8 0330C02A	        slt     $t8, $t9, $s0                       # while(i < b_size)
 652 03ec 13000009	        beq     $t8, $zero, fill_positions_end
 653 03f0                       
 654 03f0                       # add values into 2d board
 655 03f0               
 656 03f0 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
 657 03f4 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
 658 03f8 02403821	        move    $a3, $s2                            # get dim of board
 659 03fc                       
 660 03fc 0C00011D	        jal     get_pos
 661 0400                       
 662 0400 A0530000	        sb      $s3, 0($v0)      
 663 0404                       
 664 0404 23390001	        addi    $t9, $t9, 1                         # i++
 665 0408 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
 666 040c 00805021	        move    $t2, $a0
 667 0410 080000FA	        j       fill_b
 668 0414               
 669 0414               fill_positions_end:
 670 0414               
 671 0414 8FBF0014	        lw      $ra, -4+REGISTERS_5($sp)
 672 0418 8FB00010	        lw      $s0, -8+REGISTERS_5($sp)
 673 041c 8FB1000C	        lw      $s1, -12+REGISTERS_5($sp)
 674 0420 8FB20008	        lw      $s2, -16+REGISTERS_5($sp)
 675 0424 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 676 0428 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 677 042c 23BD0018	        addi    $sp, $sp, REGISTERS_5
 678 0430 03E00008	        jr      $ra
 679 0434               
 680 0434               ###########################################
 681 0434               # ======================================= #
 682 0434               # ||        Helper Code                || #
 683 0434               # ======================================= #
 684 0434               ###########################################
 685 0434               
 686 0434               get_board_dim:
 687 0434 3C080000	        la      $t0, board_dim
     0438 35080000
 688 043c 8D020000	        lw      $v0, 0($t0)
 689 0440 03E00008	        jr      $ra
 690 0444               
 691 0444               get_generations:
 692 0444 3C080000	        la      $t0, generations
     0448 35080000
 693 044c 8D020000	        lw      $v0, 0($t0)
 694 0450 03E00008	        jr      $ra
 695 0454               
 696 0454               get_a:
 697 0454 3C080000	        la      $t0, A_cells
     0458 35080000
 698 045c 8D020000	        lw      $v0, 0($t0)
 699 0460 03E00008	        jr      $ra
 700 0464               
 701 0464               get_b:
 702 0464 3C080000	        la      $t0, B_cells
     0468 35080000
 703 046c 8D020000	        lw      $v0, 0($t0)
 704 0470 03E00008	        jr      $ra
 705 0474               
 706 0474               # =========================================================
 707 0474               # Name:             get_pos
 708 0474               # =========================================================
 709 0474               # Description:      gets the addr of board[row][col] in 
 710 0474               #                   the given array
 711 0474               #
 712 0474               # Parameters:
 713 0474               #       a0 -        the location of array to access
 714 0474               #       a1 -        the row value
 715 0474               #       a2 -        the col value
 716 0474               #       a3 -        the dim of the board
 717 0474               #
 718 0474               # Returns:
 719 0474               #       v0 - the addr of board[row][col]
 720 0474               #     
 721 0474               # =========================================================
 722 0474               
 723 0474               get_pos:
 724 0474               
 725 0474                       # calculate row address #
 726 0474               
 727 0474 34010001	        mul     $v0, $a3, 1                         # len_c = size(char) * dim
     0478 00E10018
     047c 00001012
 728 0480 00450018	        mul     $v0, $v0, $a1                       # roffset = len_c * row
     0484 00001012
 729 0488 00821020	        add     $v0, $a0, $v0                      # r_addr = base + roffset
 730 048c                       
 731 048c                       # calculate column address #
 732 048c               
 733 048c 00461020	        add     $v0, $v0, $a2                       # addr = r_addr + col
 734 0490                       
 735 0490 03E00008	        jr      $ra
 736 0494                       
 737 0494               
 738 0494               # =========================================================
 739 0494               # Name:             print_locations
 740 0494               # =========================================================
 741 0494               # Description:      prints an array of location "structs"
 742 0494               #                   each structure is 8 bytes long where:
 743 0494               #                       - 0 -> x coordinate
 744 0494               #                       - 4 offset -> y coordinate
 745 0494               #
 746 0494               # Parameters:
 747 0494               #       a0 -        the location of array to print
 748 0494               #       a1 -        the size of the array
 749 0494               #
 750 0494               # T Registers:
 751 0494               #       t0 -        loop counter
 752 0494               #     
 753 0494               # =========================================================
 754 0494               
 755 0494               print_locations:
 756 0494 34080000	        li      $t0, 0                              # i == 0
 757 0498 00804821	        move    $t1, $a0                            # pointer
 758 049c               
 759 049c               print_loop:
 760 049c 11050019	        beq     $t0, $a1, print_done                #done if i == n 
 761 04a0               
 762 04a0 3C040000	        la      $a0, newline
     04a4 34840000
 763 04a8 34020004	        li      $v0, PRINT_STRING                   #print \n
 764 04ac 0000000C	        syscall
 765 04b0                       
 766 04b0 3C040000	        la      $a0, lp
     04b4 34840000
 767 04b8 34020004	        li      $v0, PRINT_STRING                   #print (
 768 04bc 0000000C	        syscall
 769 04c0                       
 770 04c0 8D240000	        lw      $a0, 0($t1)                         #get a[i].x
 771 04c4 34020001	        li      $v0, PRINT_INT
 772 04c8 0000000C	        syscall                                     #print a[i].x
 773 04cc               
 774 04cc 3C040000	        la      $a0, comma
     04d0 34840000
 775 04d4 34020004	        li      $v0, PRINT_STRING                   #print ,
 776 04d8 0000000C	        syscall
 777 04dc                       
 778 04dc 8D240004	        lw      $a0, 4($t1)                         #get a[i].y
 779 04e0 34020001	        li      $v0, PRINT_INT
 780 04e4 0000000C	        syscall                                     #print a[i].y
 781 04e8                       
 782 04e8 3C040000	        la      $a0, rp
     04ec 34840000
 783 04f0 34020004	        li      $v0, PRINT_STRING                   #print )
 784 04f4 0000000C	        syscall
 785 04f8                       
 786 04f8 21290008	        addi    $t1, $t1, 8                         #update pointer
 787 04fc 21080001	        addi    $t0, $t0, 1                         #i++
 788 0500 08000127	        j       print_loop
 789 0504               
 790 0504               print_done:
 791 0504 3C040000	        la      $a0, newline
     0508 34840000
 792 050c 34020004	        li      $v0, PRINT_STRING
 793 0510 0000000C	        syscall
 794 0514                       
 795 0514 03E00008	        jr      $ra
 796 0518               
 797 0518               # =========================================================
 798 0518               # Name:             debug_params
 799 0518               # =========================================================
 800 0518               # Description:      print the inputs in the param block
 801 0518               #
 802 0518               # Parameters:
 803 0518               #       a0 -        the parameter block
 804 0518               # S Registers:
 805 0518               #       s0 -        the saved parameter block
 806 0518               # =========================================================
 807 0518               
 808 0518               debug_params:
 809 0518                       
 810 0518 23BDFFF8	        addi    $sp, $sp, -8
 811 051c AFBF0004	        sw      $ra, 4($sp)
 812 0520 AFB00000	        sw      $s0, 0($sp)
 813 0524                       
 814 0524 00808021	        move    $s0, $a0                            #save param block
 815 0528               
 816 0528                       # print board dimensions #
 817 0528               
 818 0528 34020004	        li      $v0, PRINT_STRING
 819 052c 3C040000	        la      $a0, d_dim
     0530 34840000
 820 0534 0000000C	        syscall
 821 0538               
 822 0538 0C00010D	        jal     get_board_dim                       #get the value of board dim
 823 053c 00402021	        move    $a0, $v0
 824 0540 34020001	        li      $v0, PRINT_INT                      #print board dim
 825 0544 0000000C	        syscall
 826 0548               
 827 0548                       # print generations #
 828 0548               
 829 0548 34020004	        li      $v0, PRINT_STRING
 830 054c 3C040000	        la      $a0, d_gen
     0550 34840000
 831 0554 0000000C	        syscall
 832 0558 0C000111	        jal     get_generations                     #value of generations
 833 055c 00402021	        move    $a0, $v0
 834 0560 34020001	        li      $v0, PRINT_INT                      #print generations
 835 0564 0000000C	        syscall
 836 0568               
 837 0568                       # print colony A size #
 838 0568               
 839 0568 34020004	        li      $v0, PRINT_STRING
 840 056c 3C040000	        la      $a0, d_a_cells
     0570 34840000
 841 0574 0000000C	        syscall
 842 0578 0C000115	        jal     get_a                               #get size a
 843 057c 00402021	        move    $a0, $v0
 844 0580 34020001	        li      $v0, PRINT_INT                      #print size of a
 845 0584 0000000C	        syscall
 846 0588               
 847 0588                       # print locations #
 848 0588 34020004	        li      $v0, PRINT_STRING
 849 058c 3C040000	        la      $a0, d_a_loc
     0590 34840000
 850 0594 0000000C	        syscall
 851 0598               
 852 0598 3C040000	        la      $a0, a_coordinates
     059c 34840000
 853 05a0 0C000115	        jal     get_a                               #get size a
 854 05a4 00402821	        move    $a1, $v0
 855 05a8 0C000125	        jal     print_locations
 856 05ac               
 857 05ac               
 858 05ac                       # print colony B size#
 859 05ac               
 860 05ac 34020004	        li      $v0, PRINT_STRING
 861 05b0 3C040000	        la      $a0, d_b_cells
     05b4 34840000
 862 05b8 0000000C	        syscall
 863 05bc 0C000119	        jal     get_b                               #get size b
 864 05c0 00402021	        move    $a0, $v0
 865 05c4 34020001	        li      $v0, PRINT_INT                      #print it
 866 05c8 0000000C	        syscall
 867 05cc               
 868 05cc                       # print locations#
 869 05cc 34020004	        li      $v0, PRINT_STRING
 870 05d0 3C040000	        la      $a0, d_b_loc
     05d4 34840000
 871 05d8 0000000C	        syscall
 872 05dc               
 873 05dc 3C040000	        la      $a0, b_coordinates                  #get addr of arr
     05e0 34840000
 874 05e4 0C000119	        jal     get_b                               #get size b
 875 05e8 00402821	        move    $a1, $v0
 876 05ec 0C000125	        jal     print_locations
 877 05f0               
 878 05f0 34020004	        li      $v0, PRINT_STRING
 879 05f4 3C040000	        la      $a0, newline
     05f8 34840000
 880 05fc 0000000C	        syscall
 881 0600                       
 882 0600 8FBF0004	        lw      $ra, 4($sp)
 883 0604 8FB00000	        lw      $s0, 0($sp)
 884 0608 23BD0008	        addi    $sp, $sp, 8
 885 060c 03E00008	        jr      $ra
 886 0610               


A                     00000247 R  data 
A_ARRAY_OFFSET      = 00000018   
A_OFFSET            = 00000008   
A_cells               00000254 R  data 
B                     00000249 R  data 
B_ARRAY_OFFSET      = 0000001C   
B_OFFSET            = 0000000C   
B_cells               00000258 R  data 
DIM_OFFSET          = 00000000   
FRAMESIZE_24        = 00000018   
FRAMESIZE_40        = 00000028   
FRAMESIZE_48        = 00000030   
FRAMESIZE_8         = 00000008   
GEN_OFFSET          = 00000004   
NEXT_A_OFFSET       = 00000010   
NEXT_B_OFFSET       = 00000014   
PRINT_CHAR          = 0000000B   
PRINT_INT           = 00000001   
PRINT_STRING        = 00000004   
READ_INT            = 00000005   
READ_STRING         = 00000008   
REGISTERS_2         = 0000000C   
REGISTERS_3         = 00000010   
REGISTERS_4         = 00000014   
REGISTERS_5         = 00000018   
REGISTERS_6         = 0000001C   
REGISTER_1          = 00000008   
a_coordinates         00000260 R  data 
a_next                0000025C R  data 
b_coordinates         00001E84 R  data 
b_next                00001E80 R  data 
banner                000000AD R  data 
bar                   00000245 R  data 
board_1               00003AC4 R  data 
board_2               00003E48 R  data 
board_dim             0000024C R  data 
comma                 0000023C R  data 
conway_end            0000019C R  text 
conway_loop           00000194 R  text 
d_a_cells             000001F0 R  data 
d_a_loc               00000216 R  data 
d_b_cells             00000203 R  data 
d_b_loc               00000228 R  data 
d_dim                 000001CB R  data 
d_gen                 000001E0 R  data 
debug_params          00000518 R  text 
end_col_loop          0000024C R  text 
end_main              0000016C R  text 
enter_board_size      00000000 R  data 
enter_generations     00000014 R  data 
enter_locations       00000090 R  data 
fill_a                000003A4 R  text 
fill_a_end            000003D0 R  text 
fill_array            00000348 R  text 
fill_b                000003E8 R  text 
fill_positions        00000364 R  text 
fill_positions_end    00000414 R  text 
gen_banner_end        00000108 R  data 
gen_banner_start      000000F4 R  data 
generations           00000250 R  data 
get_A_cells           ******** XG
get_B_cells           ******** XG
get_a                 00000454 R  text 
get_b                 00000464 R  text 
get_board_dim         00000434 R  text 
get_generations       00000444 R  text 
get_integer           ******** XG
get_pos               00000474 R  text 
illegal_cells         00000175 R  data 
illegal_gens          00000140 R  data 
illegal_point         000001A9 R  data 
illegal_size          00000116 R  data 
live_cells_A          0000003A R  data 
live_cells_B          00000065 R  data 
load_blanks           00000334 R  text 
lp                    0000023A R  data 
main                  00000000 RG text 
minus                 00000243 R  data 
newline               00000112 R  data 
param_block           00003AA4 R  data 
plus                  00000241 R  data 
print_board           000001BC R  text 
print_board_end       00000278 R  text 
print_col_loop        0000021C R  text 
print_done            00000504 R  text 
print_locations       00000494 R  text 
print_loop            0000049C R  text 
print_row_loop        000001EC R  text 
print_top_bottom      00000294 R  text 
rp                    0000023F R  data 
run_conway            00000178 R  text 
setup_board           00000304 R  text 
setup_end             0000034C R  text 
space                 00000114 R  data 
tb_end                000002D8 R  text 
tb_loop               000002B8 R  text 
