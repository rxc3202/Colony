   1 0000               # File: $Id$
   2 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   3 0000               # Description: this file is the main file for the
   4 0000               #               cs250 project
   5 0000               
   6 0000               
   7 0000               
   8 0000               ###########################################
   9 0000               # ======================================= #
  10 0000               # ||        CONSTANTS BLOCK            || #
  11 0000               # ======================================= #
  12 0000               ###########################################
  13 0000               
  14 0000               # ===========================
  15 0000               # || param block constants ||
  16 0000               # ===========================
  17 0000               
  18 0000               DIM_OFFSET = 0
  19 0000               GEN_OFFSET = 4
  20 0000               A_OFFSET = 8
  21 0000               B_OFFSET = 12
  22 0000               NEXT_A_OFFSET = 16
  23 0000               NEXT_B_OFFSET = 20
  24 0000               A_ARRAY_OFFSET = 24
  25 0000               B_ARRAY_OFFSET = 28
  26 0000               
  27 0000               # syscall codes
  28 0000               
  29 0000               PRINT_INT =	1
  30 0000               PRINT_STRING = 	4
  31 0000               READ_INT = 	5
  32 0000               READ_STRING =	8
  33 0000               PRINT_CHAR = 11 
  34 0000               
  35 0000               # various frame sizes used by different routines
  36 0000               REGISTER_1 = 8
  37 0000               REGISTERS_2 = 12
  38 0000               REGISTERS_3 = 16
  39 0000               REGISTERS_4 = 20
  40 0000               REGISTERS_5 = 24
  41 0000               REGISTERS_6 = 28
  42 0000               
  43 0000               FRAMESIZE_8 = 	8
  44 0000               FRAMESIZE_24 =	24
  45 0000               FRAMESIZE_40 =	40
  46 0000               FRAMESIZE_48 =	48
  47 0000               
  48 0000                       .data
  49 0000                       .align      2
  50 0000               
  51 0000               # ====================
  52 0000               #    INPUT STRINGS 
  53 0000               # ====================
  54 0000               
  55 0000               enter_board_size:
  56 0000 0A456E74	        .asciiz "\nEnter board size: "
          65722062
          6F617264
          2073697A
          653A2000
  57 0014               
  58 0014               enter_generations: 
  59 0014 0A456E74	        .asciiz "\nEnter number of generations to run: "
          6572206E
          756D6265
          72206F66
          2067656E
          65726174
  60 003a               
  61 003a               live_cells_A:
  62 003a 0A456E74	        .asciiz "\nEnter number of live cells for colony A: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  63 0065               
  64 0065               live_cells_B:
  65 0065 0A456E74	        .asciiz "\nEnter number of live cells for colony B: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  66 0090               
  67 0090               enter_locations:
  68 0090 0A537461	        .asciiz "\nStart entering locations: \n"
          72742065
          6E746572
          696E6720
          6C6F6361
          74696F6E
  69 00ad               
  70 00ad               # ====================
  71 00ad               #    OTHER STRINGS 
  72 00ad               # ====================
  73 00ad               
  74 00ad               banner:
  75 00ad 0A2A2A2A	        .ascii "\n**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  76 00c5 2A2A2A2A	        .ascii "****    Colony    ****\n"
          20202020
          436F6C6F
          6E792020
          20202A2A
          2A2A0A  
  77 00dc 2A2A2A2A	        .asciiz "**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A0A00
  78 00f4               
  79 00f4               gen_banner_start:
  80 00f4 3D3D3D3D	        .asciiz "====    GENERATION "
          20202020
          47454E45
          52415449
          4F4E2000
  81 0108               
  82 0108               gen_banner_end:
  83 0108 20202020	        .asciiz "    ====\n"
          3D3D3D3D
          0A00    
  84 0112               
  85 0112               newline: 
  86 0112 0A00    	        .asciiz "\n"
  87 0114               
  88 0114               space:
  89 0114 2000    	        .asciiz " "
  90 0116               
  91 0116               # ====================
  92 0116               #    ERROR STRINGS 
  93 0116               # ====================
  94 0116               
  95 0116               illegal_size:
  96 0116 0A574152	        .asciiz "\nWARNING: illegal board size, try again: "
          4E494E47
          3A20696C
          6C656761
          6C20626F
          61726420
  97 0140               
  98 0140               illegal_gens:
  99 0140 0A574152	        .asciiz "\nWARNING: illegal number of generations, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 100 0175               
 101 0175               illegal_cells:
 102 0175 0A574152	        .asciiz "\nWARNING: illegal number of live cells, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 103 01a9               
 104 01a9               illegal_point:
 105 01a9 0A574152	        .asciiz "\nWARNING: illegal point location\n"
          4E494E47
          3A20696C
          6C656761
          6C20706F
          696E7420
 106 01cb               
 107 01cb               # ====================
 108 01cb               #    DEBUG STRINGS  
 109 01cb               # ====================
 110 01cb               
 111 01cb               d_dim:
 112 01cb 0A20426F	        .asciiz "\n Board Dimensions: "
          61726420
          44696D65
          6E73696F
          6E733A20
          00      
 113 01e0               
 114 01e0               d_gen:
 115 01e0 0A204765	        .asciiz "\n Generations: "
          6E657261
          74696F6E
          733A2000
 116 01f0               
 117 01f0               d_a_cells:
 118 01f0 0A20436F	        .asciiz "\n Colony A Cells: "
          6C6F6E79
          20412043
          656C6C73
          3A2000  
 119 0203               
 120 0203               d_b_cells:
 121 0203 0A20436F	        .asciiz "\n Colony B Cells: "
          6C6F6E79
          20422043
          656C6C73
          3A2000  
 122 0216               
 123 0216               d_a_loc:
 124 0216 0A204120	        .asciiz "\n A Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 125 0228               
 126 0228               d_b_loc:
 127 0228 0A204220	        .asciiz "\n B Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 128 023a               
 129 023a               lp:
 130 023a 2800    	        .asciiz "("
 131 023c               comma:
 132 023c 2C2000  	        .asciiz ", "
 133 023f               rp:
 134 023f 2900    	        .asciiz ")"
 135 0241               
 136 0241               # ====================
 137 0241               #    BOARD STRINGS  
 138 0241               # ====================
 139 0241               
 140 0241               plus:
 141 0241 2B00    	        .asciiz "+"
 142 0243               
 143 0243               minus:
 144 0243 2D00    	        .asciiz "-"
 145 0245               
 146 0245               bar:
 147 0245 7C00    	        .asciiz "|"
 148 0247               
 149 0247               A:
 150 0247 4100    	        .asciiz "A"
 151 0249               B:
 152 0249 4200    	        .asciiz "B"
 153 024b               
 154 024b               # ====================
 155 024b               #     GAME BUFFERS
 156 024b               # ====================
 157 024b               # These addresses will hold the values read in by the user
 158 024b               # if a negative one is detected in a register, the value will
 159 024b               # be known to not be read in correctly
 160 024b               
 161 024b               board_dim:
 162 024b 00      	        .word       -1
     024c FFFFFFFF
 163 0250               
 164 0250               generations:
 165 0250 FFFFFFFF	        .word       -1
 166 0254               
 167 0254               A_cells:
 168 0254 FFFFFFFF	        .word       -1
 169 0258               
 170 0258               B_cells:
 171 0258 FFFFFFFF	        .word       -1
 172 025c               
 173 025c               a_next:
 174 025c 00000260	        .word       a_coordinates
 175 0260               
 176 0260               a_coordinates:                                          
 177 0260 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 178 1e80                       .align      2
 179 1e80               
 180 1e80               b_next:
 181 1e80 00001E84	        .word       b_coordinates
 182 1e84               
 183 1e84               b_coordinates:
 184 1e84 00000000	        .space      7200                            #space for 300 y's
          00000000
          00000000
          00000000
          00000000
          00000000
 185 3aa4                       .align      2
 186 3aa4               
 187 3aa4                       #   === 32 byte structure ===   #
 188 3aa4               
 189 3aa4               param_block:
 190 3aa4 0000024C	        .word       board_dim                       #0 offset
 191 3aa8 00000250	        .word       generations                     #4 offset
 192 3aac 00000254	        .word       A_cells                         #8 offset
 193 3ab0 00000258	        .word       B_cells                         #12 offset
 194 3ab4 0000025C	        .word       a_next                          #16 offset
 195 3ab8 00001E80	        .word       b_next                          #20 offset
 196 3abc 00000260	        .word       a_coordinates                   #24 offset
 197 3ac0 00001E84	        .word       b_coordinates                   #28 offset
 198 3ac4               
 199 3ac4               board_1:
 200 3ac4 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 201 3e48                       .align      2
 202 3e48                       
 203 3e48               board_2:
 204 3e48 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 205 41cc                       .align      2
 206 41cc               
 207 41cc               ###########################################
 208 41cc               # ======================================= #
 209 41cc               # ||        MAIN CODE BLOCK            || #
 210 41cc               # ======================================= #
 211 41cc               ###########################################
 212 0000                       .text
 213 0000                       .align      2
 214 0000                       .globl      main
 215 0000                       .globl      get_integer
 216 0000                       .globl      get_A_cells
 217 0000                       .globl      get_B_cells
 218 0000               
 219 0000               main:       
 220 0000 23BDFFD0	        addi    $sp, $sp, -FRAMESIZE_48
 221 0004 AFBF002C	        sw      $ra, -4+FRAMESIZE_48($sp)
 222 0008                       
 223 0008 34020004	        li      $v0, PRINT_STRING                   #print banner
 224 000c 3C040000	        la      $a0, banner
     0010 34840000
 225 0014 0000000C	        syscall
 226 0018                       
 227 0018                       # ---------------------------- #
 228 0018                       #       Get user input         #
 229 0018                       # ---------------------------- #
 230 0018               
 231 0018                       # print and get board dimensions #
 232 0018               
 233 0018 34020004	        li      $v0, PRINT_STRING                    
 234 001c 3C040000	        la      $a0, enter_board_size
     0020 34840000
 235 0024 0000000C	        syscall
 236 0028                       
 237 0028 3C040000	        la      $a0, board_dim 
     002c 34840000
 238 0030 34050004	        li      $a1, 4
 239 0034 3406001E	        li      $a2, 30
 240 0038 3C070000	        la      $a3, illegal_size
     003c 34E70000
 241 0040 0C000000	        jal     get_integer
 242 0044                       
 243 0044                       # print and get generations #
 244 0044               
 245 0044 34020004	        li      $v0, PRINT_STRING                    
 246 0048 3C040000	        la      $a0, enter_generations
     004c 34840000
 247 0050 0000000C	        syscall
 248 0054                       
 249 0054 3C040000	        la      $a0, generations
     0058 34840000
 250 005c 34050000	        li      $a1, 0
 251 0060 34060014	        li      $a2, 20
 252 0064 3C070000	        la      $a3, illegal_gens
     0068 34E70000
 253 006c 0C000000	        jal     get_integer
 254 0070               
 255 0070                       # print and get A colony size #
 256 0070               
 257 0070 34020004	        li      $v0, PRINT_STRING                    
 258 0074 3C040000	        la      $a0, live_cells_A
     0078 34840000
 259 007c 0000000C	        syscall
 260 0080                       
 261 0080 3C040000	        la      $a0, A_cells
     0084 34840000
 262 0088 34050000	        li      $a1, 0
 263 008c 3C060000	        la      $a2, board_dim
     0090 34C60000
 264 0094 8CC60000	        lw      $a2, 0($a2)
 265 0098 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     009c 00003012
 266 00a0 3C070000	        la      $a3, illegal_cells
     00a4 34E70000
 267 00a8 0C000000	        jal     get_integer
 268 00ac               
 269 00ac                       # print and get A colony locations #
 270 00ac               
 271 00ac 34020004	        li      $v0, PRINT_STRING                    
 272 00b0 3C040000	        la      $a0, enter_locations
     00b4 34840000
 273 00b8 0000000C	        syscall
 274 00bc                       
 275 00bc 3C040000	        la      $a0, param_block
     00c0 34840000
 276 00c4 3C050000	        la      $a1, illegal_point
     00c8 34A50000
 277 00cc 0C000000	        jal     get_A_cells
 278 00d0               
 279 00d0                       # print and get B colony size #
 280 00d0               
 281 00d0 34020004	        li      $v0, PRINT_STRING                    
 282 00d4 3C040000	        la      $a0, live_cells_B
     00d8 34840000
 283 00dc 0000000C	        syscall
 284 00e0                       
 285 00e0 3C040000	        la      $a0, B_cells
     00e4 34840000
 286 00e8 34050000	        li      $a1, 0
 287 00ec 3C060000	        la      $a2, board_dim
     00f0 34C60000
 288 00f4 8CC60000	        lw      $a2, 0($a2)
 289 00f8 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     00fc 00003012
 290 0100 3C070000	        la      $a3, illegal_cells
     0104 34E70000
 291 0108 0C000000	        jal     get_integer
 292 010c                       
 293 010c                       # print and get B colony locations #
 294 010c               
 295 010c 34020004	        li      $v0, PRINT_STRING                    
 296 0110 3C040000	        la      $a0, enter_locations
     0114 34840000
 297 0118 0000000C	        syscall
 298 011c                       
 299 011c 3C040000	        la      $a0, param_block
     0120 34840000
 300 0124 3C050000	        la      $a1, illegal_point
     0128 34A50000
 301 012c 0C000000	        jal     get_B_cells
 302 0130                       
 303 0130                       # == test input grabbing == #
 304 0130               
 305 0130 3C040000	        la      $a0, param_block
     0134 34840000
 306 0138 0C00012F	        jal     debug_params
 307 013c               
 308 013c                       # == set up board == #
 309 013c               
 310 013c 3C040000	        la      $a0, board_1
     0140 34840000
 311 0144 0C0000AA	        jal     setup_board
 312 0148 3C040000	        la      $a0, board_1
     014c 34840000
 313 0150 0C000058	        jal     print_board
 314 0154                       #jal     run_conway
 315 0154               
 316 0154               end_main:
 317 0154 8FBF002C	        lw      $ra, -4+FRAMESIZE_48($sp)
 318 0158 23BD0030	        addi    $sp, $sp, FRAMESIZE_48
 319 015c 03E00008	        jr      $ra
 320 0160               
 321 0160               # =========================================================
 322 0160               # Name:             print_board 
 323 0160               # =========================================================
 324 0160               # Description:      print the board as a 2D array
 325 0160               #                   
 326 0160               # Parameters:
 327 0160               #       a0 -        the addr of the board to print
 328 0160               #
 329 0160               # Parameters:
 330 0160               #       s0 -        the dim of the board
 331 0160               #       s1 -        the pointer to the row to print
 332 0160               #       s2 -        the addr ofthe array
 333 0160               #
 334 0160               # T Registers:
 335 0160               #       t0 -        row loop flag
 336 0160               #       t1 -        row loop counter
 337 0160               #       t2 -        col loop counter
 338 0160               #       t3 -        pointer for col in row / banner counter
 339 0160               #       t4 -        column loop flag
 340 0160               #
 341 0160               # =========================================================
 342 0160               
 343 0160               print_board: 
 344 0160 23BDFFF0	        addi    $sp, $sp, -16 
 345 0164 AFBF000C	        sw      $ra, 12($sp)
 346 0168 AFB00008	        sw      $s0, 8($sp)
 347 016c AFB10004	        sw      $s1, 4($sp)
 348 0170 8FB20000	        lw      $s2, 0($sp)
 349 0174               
 350 0174 00808821	        move     $s1, $a0 
 351 0178 00809021	        move     $s2, $a0 
 352 017c               
 353 017c                       # print top of board #
 354 017c               
 355 017c 0C00008E	        jal     print_top_bottom
 356 0180               
 357 0180                       # get board dim #
 358 0180               
 359 0180 0C0000F6	        jal     get_board_dim
 360 0184 00408021	        move    $s0, $v0
 361 0188               
 362 0188                       # calculate row to start at#
 363 0188               
 364 0188 2209FFFF	        addi    $t1, $s0, -1                        # row = dim - 1
 365 018c 00005021	        move    $t2, $zero                          # col = 0
 366 0190               
 367 0190                       
 368 0190               print_row_loop:
 369 0190 0120402A	        slt     $t0, $t1, $zero                     #while(row >= 0)
 370 0194 15000021	        bne     $t0, $zero, print_board_end 
 371 0198 3C040000	        la      $a0, bar                            #print("|")
     019c 34840000
 372 01a0 34020004	        li      $v0, PRINT_STRING 
 373 01a4 0000000C	        syscall
 374 01a8               
 375 01a8                       # calculate row address #
 376 01a8 34010001	        mul     $s1, $s0, 1                         # len_c = size(char) * dim
     01ac 02010018
     01b0 00008812
 377 01b4 02290018	        mul     $s1, $s1, $t1                       # offset = len_c * row
     01b8 00008812
 378 01bc 02518820	        add     $s1, $s2, $s1                       # r_addr = base + offset
 379 01c0                       
 380 01c0               print_col_loop:
 381 01c0 0150602A	        slt     $t4, $t2, $s0                       #while(col < dim)
 382 01c4 1180000A	        beq     $t4, $zero, end_col_loop
 383 01c8               
 384 01c8 02205821	        move    $t3, $s1                            #load addr of arr[row][0]
 385 01cc               
 386 01cc 34010001	        mul     $t5, $t2, 1                         #sizeof(char)*col_index
     01d0 01410018
     01d4 00006812
 387 01d8 016D5820	        add     $t3, $t3, $t5                       #row base + offset
 388 01dc               
 389 01dc 81640000	        lb      $a0, 0($t3)
 390 01e0 3402000B	        li      $v0, PRINT_CHAR
 391 01e4 0000000C	        syscall                                     #print(arr[row][col])
 392 01e8                       
 393 01e8 214A0001	        addi    $t2, $t2, 1                         #col++
 394 01ec 08000070	        j       print_col_loop
 395 01f0               
 396 01f0               end_col_loop:
 397 01f0                       
 398 01f0 3C040000	        la      $a0, bar                            #print("|")
     01f4 34840000
 399 01f8 34020004	        li      $v0, PRINT_STRING 
 400 01fc 0000000C	        syscall
 401 0200               
 402 0200 3C040000	        la      $a0, newline                       #print("\n")
     0204 34840000
 403 0208 34020004	        li      $v0, PRINT_STRING 
 404 020c 0000000C	        syscall
 405 0210                       
 406 0210 00005021	        move    $t2, $zero                          # col = 0
 407 0214 2129FFFF	        addi    $t1, $t1, -1                        # row--
 408 0218 08000064	        j       print_row_loop
 409 021c               
 410 021c               
 411 021c               print_board_end:
 412 021c 0C00008E	        jal     print_top_bottom                    #print bottom board
 413 0220               
 414 0220 8FBF000C	        lw      $ra, 12($sp)
 415 0224 8FB00008	        lw      $s0, 8($sp)
 416 0228 8FB10004	        lw      $s1, 4($sp)
 417 022c 8FB20000	        lw      $s2, 0($sp)
 418 0230 23BD0010	        addi    $sp, $sp, 16
 419 0234 03E00008	        jr      $ra
 420 0238               
 421 0238               # =========================================================
 422 0238               # Name:             print_top_bottom
 423 0238               # =========================================================
 424 0238               # Description:      this prints the top banner of the board
 425 0238               #
 426 0238               # T Registers:
 427 0238               #       t0  -       loop counter
 428 0238               #       t1  -       board dimension
 429 0238               # =========================================================
 430 0238               
 431 0238               print_top_bottom:
 432 0238 23BDFFFC	        addi    $sp, $sp, -4
 433 023c AFBF0000	        sw      $ra, 0($sp)
 434 0240               
 435 0240                       
 436 0240 0C0000F6	        jal     get_board_dim
 437 0244 00404821	        move    $t1, $v0
 438 0248               
 439 0248 3C040000	        la      $a0, plus                           #print("+")
     024c 34840000
 440 0250 34020004	        li      $v0, PRINT_STRING 
 441 0254 0000000C	        syscall
 442 0258               
 443 0258 00004021	        move    $t0, $zero
 444 025c                       
 445 025c               tb_loop:
 446 025c 0109582A	        slt     $t3, $t0, $t1                       #while(i < dim)
 447 0260 11600006	        beq     $t3, $zero, tb_end
 448 0264               
 449 0264 3C040000	        la      $a0, minus                          #print("-")
     0268 34840000
 450 026c 34020004	        li      $v0, PRINT_STRING 
 451 0270 0000000C	        syscall
 452 0274                       
 453 0274 21080001	        addi    $t0, $t0, 1
 454 0278 08000097	        j       tb_loop
 455 027c               tb_end:
 456 027c               
 457 027c 3C040000	        la      $a0, plus                           #print("+")
     0280 34840000
 458 0284 34020004	        li      $v0, PRINT_STRING 
 459 0288 0000000C	        syscall
 460 028c               
 461 028c 3C040000	        la      $a0, newline                        #print("\n")
     0290 34840000
 462 0294 34020004	        li      $v0, PRINT_STRING 
 463 0298 0000000C	        syscall
 464 029c                       
 465 029c 8FBF0000	        lw      $ra, 0($sp)
 466 02a0 23BD0004	        addi    $sp, $sp, 4
 467 02a4 03E00008	        jr      $ra
 468 02a8               
 469 02a8               
 470 02a8               # =========================================================
 471 02a8               # Name:             setup_board
 472 02a8               # =========================================================
 473 02a8               # Description:      this fills the spots in the array with 
 474 02a8               #                   either an "A", "B", or " "(space)
 475 02a8               #
 476 02a8               # Parameters:
 477 02a8               #       - a0        location of board to set up
 478 02a8               # S Registers:
 479 02a8               #       - s0        the board dimension
 480 02a8               #       - s1        the pointer to pos in 2d array
 481 02a8               #       - s2        the addr of the end 2d array
 482 02a8               #
 483 02a8               # T Registers:
 484 02a8               #       - t2        addr of a_coordinates
 485 02a8               #       - t3        addr of b_coordinates
 486 02a8               #       - t9        pointer to curr in array
 487 02a8               # =========================================================
 488 02a8               
 489 02a8               setup_board:
 490 02a8 23BDFFF0	        addi    $sp, $sp, -16
 491 02ac AFBF000C	        sw      $ra, 12($sp)
 492 02b0 AFB00008	        sw      $s0, 8($sp)
 493 02b4 AFB10004	        sw      $s1, 4($sp)
 494 02b8 AFB20000	        sw      $s2, 0($sp)
 495 02bc               
 496 02bc 0C0000F6	        jal     get_board_dim                       #get board dim
 497 02c0 00408021	        move    $s0, $v0
 498 02c4 00808821	        move    $s1, $a0
 499 02c8                   
 500 02c8 02100018	        mul     $t0, $s0, $s0                       #dim^2
     02cc 00004012
 501 02d0 01119020	        add     $s2, $t0, $s1                       #pointer to end of array
 502 02d4               
 503 02d4 34090020	        li      $t1, 32                             #t1 = ascii " "
 504 02d8               
 505 02d8               load_blanks:
 506 02d8 0251402A	        slt     $t0, $s2, $s1                       # i == dim; break
 507 02dc 15000003	        bne     $t0, $zero, fill_array
 508 02e0                       
 509 02e0 A2290000	        sb      $t1, 0($s1)                         #arr[i] = ' ';
 510 02e4               
 511 02e4 22310001	        addi    $s1, $s1, 1                         #i++
 512 02e8 080000B6	        j       load_blanks
 513 02ec               
 514 02ec               fill_array:
 515 02ec 0C0000C2	        jal     fill_positions
 516 02f0                       
 517 02f0               
 518 02f0               setup_end:
 519 02f0 8FBF000C	        lw      $ra, 12($sp)
 520 02f4 8FB00008	        lw      $s0, 8($sp)
 521 02f8 8FB10004	        lw      $s1, 4($sp)
 522 02fc 8FB20000	        lw      $s2, 0($sp)
 523 0300 23BD0010	        addi    $sp, $sp, 16
 524 0304 03E00008	        jr      $ra
 525 0308               
 526 0308               
 527 0308               # =========================================================
 528 0308               # Name:             fill_positions
 529 0308               # =========================================================
 530 0308               # Description:      this function takes the given board 
 531 0308               #                   passed in through a0 and fills it
 532 0308               #                   with positions from the a_coordinate
 533 0308               #                   and b_coordinate arrays
 534 0308               #
 535 0308               # Parameters:
 536 0308               #       - a0        location of board to set up
 537 0308               #
 538 0308               # S Registers:
 539 0308               #       - s0        number of values in a/b
 540 0308               #       - s1        current array (a or b)
 541 0308               #       - s2        board dimensions
 542 0308               #       - s3        current ascii value
 543 0308               #
 544 0308               # T Registers:
 545 0308               #       - t0        location of the a coordinate array
 546 0308               #       - t2        pointer to board[row][col]
 547 0308               #       - t3        x coordinate from array
 548 0308               #       - t4        y coordinate from array
 549 0308               # =========================================================
 550 0308               
 551 0308               fill_positions:
 552 0308 23BDFFE8	        addi    $sp, $sp, -REGISTERS_5
 553 030c AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 554 0310 AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 555 0314 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 556 0318 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 557 031c AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 558 0320 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 559 0324               
 560 0324 0C0000F6	        jal     get_board_dim
 561 0328 00409021	        move    $s2, $v0
 562 032c                   
 563 032c 0C0000FE	        jal     get_a
 564 0330 00408021	        move    $s0, $v0
 565 0334               
 566 0334 3C110000	        la      $s1, a_coordinates
     0338 36310000
 567 033c 34130041	        li      $s3, 65
 568 0340                       
 569 0340 00805021	        move    $t2, $a0                            # pointer to boar_arr[0]
 570 0344 0000C821	        move    $t9, $zero                          # i = 0
 571 0348               
 572 0348               fill_a:
 573 0348 0330C02A	        slt     $t8, $t9, $s0                       # while(i < a_size)
 574 034c 13000009	        beq     $t8, $zero, fill_a_end
 575 0350                       
 576 0350                       # add values into 2d board
 577 0350               
 578 0350 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
 579 0354 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
 580 0358 02403821	        move    $a3, $s2                            # get dim of board
 581 035c                       
 582 035c 0C000106	        jal     get_pos
 583 0360                       
 584 0360 A0530000	        sb      $s3, 0($v0)      
 585 0364                       
 586 0364 23390001	        addi    $t9, $t9, 1                         # i++
 587 0368 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
 588 036c 00805021	        move    $t2, $a0
 589 0370 080000D2	        j       fill_a
 590 0374               
 591 0374               fill_a_end:
 592 0374               
 593 0374 0C000102	        jal     get_b           
 594 0378 00408021	        move    $s0, $v0                            # get b address
 595 037c 3C110000	        la      $s1, b_coordinates                  # get base of b_arr
     0380 36310000
 596 0384 34130042	        li      $s3, 66                             # ascii 'B'
 597 0388 0000C821	        move    $t9, $zero                          # i = 0
 598 038c               
 599 038c               fill_b:
 600 038c 0330C02A	        slt     $t8, $t9, $s0                       # while(i < b_size)
 601 0390 13000009	        beq     $t8, $zero, fill_positions_end
 602 0394                       
 603 0394                       # add values into 2d board
 604 0394               
 605 0394 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
 606 0398 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
 607 039c 02403821	        move    $a3, $s2                            # get dim of board
 608 03a0                       
 609 03a0 0C000106	        jal     get_pos
 610 03a4                       
 611 03a4 A0530000	        sb      $s3, 0($v0)      
 612 03a8                       
 613 03a8 23390001	        addi    $t9, $t9, 1                         # i++
 614 03ac 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
 615 03b0 00805021	        move    $t2, $a0
 616 03b4 080000E3	        j       fill_b
 617 03b8               
 618 03b8               fill_positions_end:
 619 03b8               
 620 03b8 8FBF0014	        lw      $ra, -4+REGISTERS_5($sp)
 621 03bc 8FB00010	        lw      $s0, -8+REGISTERS_5($sp)
 622 03c0 8FB1000C	        lw      $s1, -12+REGISTERS_5($sp)
 623 03c4 8FB20008	        lw      $s2, -16+REGISTERS_5($sp)
 624 03c8 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 625 03cc AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 626 03d0 23BD0018	        addi    $sp, $sp, REGISTERS_5
 627 03d4 03E00008	        jr      $ra
 628 03d8               
 629 03d8               ###########################################
 630 03d8               # ======================================= #
 631 03d8               # ||        Helper Code                || #
 632 03d8               # ======================================= #
 633 03d8               ###########################################
 634 03d8               
 635 03d8               get_board_dim:
 636 03d8 3C080000	        la      $t0, board_dim
     03dc 35080000
 637 03e0 8D020000	        lw      $v0, 0($t0)
 638 03e4 03E00008	        jr      $ra
 639 03e8               
 640 03e8               get_generations:
 641 03e8 3C080000	        la      $t0, generations
     03ec 35080000
 642 03f0 8D020000	        lw      $v0, 0($t0)
 643 03f4 03E00008	        jr      $ra
 644 03f8               
 645 03f8               get_a:
 646 03f8 3C080000	        la      $t0, A_cells
     03fc 35080000
 647 0400 8D020000	        lw      $v0, 0($t0)
 648 0404 03E00008	        jr      $ra
 649 0408               
 650 0408               get_b:
 651 0408 3C080000	        la      $t0, B_cells
     040c 35080000
 652 0410 8D020000	        lw      $v0, 0($t0)
 653 0414 03E00008	        jr      $ra
 654 0418               
 655 0418               # =========================================================
 656 0418               # Name:             get_pos
 657 0418               # =========================================================
 658 0418               # Description:      gets the addr of board[row][col] in 
 659 0418               #                   the given array
 660 0418               #
 661 0418               # Parameters:
 662 0418               #       a0 -        the location of array to access
 663 0418               #       a1 -        the row value
 664 0418               #       a2 -        the col value
 665 0418               #       a3 -        the dim of the board
 666 0418               #
 667 0418               # Returns:
 668 0418               #       v0 - the addr of board[row][col]
 669 0418               #     
 670 0418               # =========================================================
 671 0418               
 672 0418               get_pos:
 673 0418               
 674 0418                       # calculate row address #
 675 0418               
 676 0418 34010001	        mul     $v0, $a3, 1                         # len_c = size(char) * dim
     041c 00E10018
     0420 00001012
 677 0424 00450018	        mul     $v0, $v0, $a1                       # roffset = len_c * row
     0428 00001012
 678 042c 00821020	        add     $v0, $a0, $v0                      # r_addr = base + roffset
 679 0430                       
 680 0430                       # calculate column address #
 681 0430               
 682 0430 00461020	        add     $v0, $v0, $a2                       # addr = r_addr + col
 683 0434                       
 684 0434 03E00008	        jr      $ra
 685 0438                       
 686 0438               
 687 0438               # =========================================================
 688 0438               # Name:             print_locations
 689 0438               # =========================================================
 690 0438               # Description:      prints an array of location "structs"
 691 0438               #                   each structure is 8 bytes long where:
 692 0438               #                       - 0 -> x coordinate
 693 0438               #                       - 4 offset -> y coordinate
 694 0438               #
 695 0438               # Parameters:
 696 0438               #       a0 -        the location of array to print
 697 0438               #       a1 -        the size of the array
 698 0438               #
 699 0438               # T Registers:
 700 0438               #       t0 -        loop counter
 701 0438               #     
 702 0438               # =========================================================
 703 0438               
 704 0438               print_locations:
 705 0438 34080000	        li      $t0, 0                              # i == 0
 706 043c 00804821	        move    $t1, $a0                            # pointer
 707 0440               
 708 0440               print_loop:
 709 0440 11050019	        beq     $t0, $a1, print_done                #done if i == n 
 710 0444               
 711 0444 3C040000	        la      $a0, newline
     0448 34840000
 712 044c 34020004	        li      $v0, PRINT_STRING                   #print \n
 713 0450 0000000C	        syscall
 714 0454                       
 715 0454 3C040000	        la      $a0, lp
     0458 34840000
 716 045c 34020004	        li      $v0, PRINT_STRING                   #print (
 717 0460 0000000C	        syscall
 718 0464                       
 719 0464 8D240000	        lw      $a0, 0($t1)                         #get a[i].x
 720 0468 34020001	        li      $v0, PRINT_INT
 721 046c 0000000C	        syscall                                     #print a[i].x
 722 0470               
 723 0470 3C040000	        la      $a0, comma
     0474 34840000
 724 0478 34020004	        li      $v0, PRINT_STRING                   #print ,
 725 047c 0000000C	        syscall
 726 0480                       
 727 0480 8D240004	        lw      $a0, 4($t1)                         #get a[i].y
 728 0484 34020001	        li      $v0, PRINT_INT
 729 0488 0000000C	        syscall                                     #print a[i].y
 730 048c                       
 731 048c 3C040000	        la      $a0, rp
     0490 34840000
 732 0494 34020004	        li      $v0, PRINT_STRING                   #print )
 733 0498 0000000C	        syscall
 734 049c                       
 735 049c 21290008	        addi    $t1, $t1, 8                         #update pointer
 736 04a0 21080001	        addi    $t0, $t0, 1                         #i++
 737 04a4 08000110	        j       print_loop
 738 04a8               
 739 04a8               print_done:
 740 04a8 3C040000	        la      $a0, newline
     04ac 34840000
 741 04b0 34020004	        li      $v0, PRINT_STRING
 742 04b4 0000000C	        syscall
 743 04b8                       
 744 04b8 03E00008	        jr      $ra
 745 04bc               
 746 04bc               # =========================================================
 747 04bc               # Name:             debug_params
 748 04bc               # =========================================================
 749 04bc               # Description:      print the inputs in the param block
 750 04bc               #
 751 04bc               # Parameters:
 752 04bc               #       a0 -        the parameter block
 753 04bc               # S Registers:
 754 04bc               #       s0 -        the saved parameter block
 755 04bc               # =========================================================
 756 04bc               
 757 04bc               debug_params:
 758 04bc                       
 759 04bc 23BDFFF8	        addi    $sp, $sp, -8
 760 04c0 AFBF0004	        sw      $ra, 4($sp)
 761 04c4 AFB00000	        sw      $s0, 0($sp)
 762 04c8                       
 763 04c8 00808021	        move    $s0, $a0                            #save param block
 764 04cc               
 765 04cc                       # print board dimensions #
 766 04cc               
 767 04cc 34020004	        li      $v0, PRINT_STRING
 768 04d0 3C040000	        la      $a0, d_dim
     04d4 34840000
 769 04d8 0000000C	        syscall
 770 04dc               
 771 04dc 0C0000F6	        jal     get_board_dim                       #get the value of board dim
 772 04e0 00402021	        move    $a0, $v0
 773 04e4 34020001	        li      $v0, PRINT_INT                      #print board dim
 774 04e8 0000000C	        syscall
 775 04ec               
 776 04ec                       # print generations #
 777 04ec               
 778 04ec 34020004	        li      $v0, PRINT_STRING
 779 04f0 3C040000	        la      $a0, d_gen
     04f4 34840000
 780 04f8 0000000C	        syscall
 781 04fc 0C0000FA	        jal     get_generations                     #value of generations
 782 0500 00402021	        move    $a0, $v0
 783 0504 34020001	        li      $v0, PRINT_INT                      #print generations
 784 0508 0000000C	        syscall
 785 050c               
 786 050c                       # print colony A size #
 787 050c               
 788 050c 34020004	        li      $v0, PRINT_STRING
 789 0510 3C040000	        la      $a0, d_a_cells
     0514 34840000
 790 0518 0000000C	        syscall
 791 051c 0C0000FE	        jal     get_a                               #get size a
 792 0520 00402021	        move    $a0, $v0
 793 0524 34020001	        li      $v0, PRINT_INT                      #print size of a
 794 0528 0000000C	        syscall
 795 052c               
 796 052c                       # print locations #
 797 052c 34020004	        li      $v0, PRINT_STRING
 798 0530 3C040000	        la      $a0, d_a_loc
     0534 34840000
 799 0538 0000000C	        syscall
 800 053c               
 801 053c 3C040000	        la      $a0, a_coordinates
     0540 34840000
 802 0544 0C0000FE	        jal     get_a                               #get size a
 803 0548 00402821	        move    $a1, $v0
 804 054c 0C00010E	        jal     print_locations
 805 0550               
 806 0550               
 807 0550                       # print colony B size#
 808 0550               
 809 0550 34020004	        li      $v0, PRINT_STRING
 810 0554 3C040000	        la      $a0, d_b_cells
     0558 34840000
 811 055c 0000000C	        syscall
 812 0560 0C000102	        jal     get_b                               #get size b
 813 0564 00402021	        move    $a0, $v0
 814 0568 34020001	        li      $v0, PRINT_INT                      #print it
 815 056c 0000000C	        syscall
 816 0570               
 817 0570                       # print locations#
 818 0570 34020004	        li      $v0, PRINT_STRING
 819 0574 3C040000	        la      $a0, d_b_loc
     0578 34840000
 820 057c 0000000C	        syscall
 821 0580               
 822 0580 3C040000	        la      $a0, b_coordinates                  #get addr of arr
     0584 34840000
 823 0588 0C000102	        jal     get_b                               #get size b
 824 058c 00402821	        move    $a1, $v0
 825 0590 0C00010E	        jal     print_locations
 826 0594               
 827 0594 34020004	        li      $v0, PRINT_STRING
 828 0598 3C040000	        la      $a0, newline
     059c 34840000
 829 05a0 0000000C	        syscall
 830 05a4                       
 831 05a4 8FBF0004	        lw      $ra, 4($sp)
 832 05a8 8FB00000	        lw      $s0, 0($sp)
 833 05ac 23BD0008	        addi    $sp, $sp, 8
 834 05b0 03E00008	        jr      $ra
 835 05b4               


A                     00000247 R  data 
A_ARRAY_OFFSET      = 00000018   
A_OFFSET            = 00000008   
A_cells               00000254 R  data 
B                     00000249 R  data 
B_ARRAY_OFFSET      = 0000001C   
B_OFFSET            = 0000000C   
B_cells               00000258 R  data 
DIM_OFFSET          = 00000000   
FRAMESIZE_24        = 00000018   
FRAMESIZE_40        = 00000028   
FRAMESIZE_48        = 00000030   
FRAMESIZE_8         = 00000008   
GEN_OFFSET          = 00000004   
NEXT_A_OFFSET       = 00000010   
NEXT_B_OFFSET       = 00000014   
PRINT_CHAR          = 0000000B   
PRINT_INT           = 00000001   
PRINT_STRING        = 00000004   
READ_INT            = 00000005   
READ_STRING         = 00000008   
REGISTERS_2         = 0000000C   
REGISTERS_3         = 00000010   
REGISTERS_4         = 00000014   
REGISTERS_5         = 00000018   
REGISTERS_6         = 0000001C   
REGISTER_1          = 00000008   
a_coordinates         00000260 R  data 
a_next                0000025C R  data 
b_coordinates         00001E84 R  data 
b_next                00001E80 R  data 
banner                000000AD R  data 
bar                   00000245 R  data 
board_1               00003AC4 R  data 
board_2               00003E48 R  data 
board_dim             0000024C R  data 
comma                 0000023C R  data 
d_a_cells             000001F0 R  data 
d_a_loc               00000216 R  data 
d_b_cells             00000203 R  data 
d_b_loc               00000228 R  data 
d_dim                 000001CB R  data 
d_gen                 000001E0 R  data 
debug_params          000004BC R  text 
end_col_loop          000001F0 R  text 
end_main              00000154 R  text 
enter_board_size      00000000 R  data 
enter_generations     00000014 R  data 
enter_locations       00000090 R  data 
fill_a                00000348 R  text 
fill_a_end            00000374 R  text 
fill_array            000002EC R  text 
fill_b                0000038C R  text 
fill_positions        00000308 R  text 
fill_positions_end    000003B8 R  text 
gen_banner_end        00000108 R  data 
gen_banner_start      000000F4 R  data 
generations           00000250 R  data 
get_A_cells           ******** XG
get_B_cells           ******** XG
get_a                 000003F8 R  text 
get_b                 00000408 R  text 
get_board_dim         000003D8 R  text 
get_generations       000003E8 R  text 
get_integer           ******** XG
get_pos               00000418 R  text 
illegal_cells         00000175 R  data 
illegal_gens          00000140 R  data 
illegal_point         000001A9 R  data 
illegal_size          00000116 R  data 
live_cells_A          0000003A R  data 
live_cells_B          00000065 R  data 
load_blanks           000002D8 R  text 
lp                    0000023A R  data 
main                  00000000 RG text 
minus                 00000243 R  data 
newline               00000112 R  data 
param_block           00003AA4 R  data 
plus                  00000241 R  data 
print_board           00000160 R  text 
print_board_end       0000021C R  text 
print_col_loop        000001C0 R  text 
print_done            000004A8 R  text 
print_locations       00000438 R  text 
print_loop            00000440 R  text 
print_row_loop        00000190 R  text 
print_top_bottom      00000238 R  text 
rp                    0000023F R  data 
setup_board           000002A8 R  text 
setup_end             000002F0 R  text 
space                 00000114 R  data 
tb_end                0000027C R  text 
tb_loop               0000025C R  text 
