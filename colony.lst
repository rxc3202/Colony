   1 0000               # File: $Id$
   2 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   3 0000               # Description: this file is the main file for the
   4 0000               #               cs250 project
   5 0000               
   6 0000               
   7 0000               
   8 0000               ###########################################
   9 0000               # ======================================= #
  10 0000               # ||        CONSTANTS BLOCK            || #
  11 0000               # ======================================= #
  12 0000               ###########################################
  13 0000               
  14 0000               # ===========================
  15 0000               # || param block constants ||
  16 0000               # ===========================
  17 0000               
  18 0000               DIM_OFFSET = 0
  19 0000               GEN_OFFSET = 4
  20 0000               A_OFFSET = 8
  21 0000               B_OFFSET = 12
  22 0000               NEXT_A_OFFSET = 16
  23 0000               NEXT_B_OFFSET = 20
  24 0000               A_ARRAY_OFFSET = 24
  25 0000               B_ARRAY_OFFSET = 28
  26 0000               
  27 0000               # syscall codes
  28 0000               
  29 0000               PRINT_INT =	1
  30 0000               PRINT_STRING = 	4
  31 0000               READ_INT = 	5
  32 0000               READ_STRING =	8
  33 0000               PRINT_CHAR = 11 
  34 0000               
  35 0000               # various frame sizes used by different routines
  36 0000               REGISTER_1 = 8
  37 0000               REGISTERS_2 = 12
  38 0000               REGISTERS_3 = 16
  39 0000               REGISTERS_4 = 20
  40 0000               REGISTERS_5 = 24
  41 0000               REGISTERS_6 = 28
  42 0000               
  43 0000               FRAMESIZE_8 = 	8
  44 0000               FRAMESIZE_24 =	24
  45 0000               FRAMESIZE_40 =	40
  46 0000               FRAMESIZE_48 =	48
  47 0000               
  48 0000                       .data
  49 0000                       .align      2
  50 0000               
  51 0000               # ====================
  52 0000               #    INPUT STRINGS 
  53 0000               # ====================
  54 0000               
  55 0000               enter_board_size:
  56 0000 0A456E74	        .asciiz "\nEnter board size: "
          65722062
          6F617264
          2073697A
          653A2000
  57 0014               
  58 0014               enter_generations: 
  59 0014 0A456E74	        .asciiz "\nEnter number of generations to run: "
          6572206E
          756D6265
          72206F66
          2067656E
          65726174
  60 003a               
  61 003a               live_cells_A:
  62 003a 0A456E74	        .asciiz "\nEnter number of live cells for colony A: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  63 0065               
  64 0065               live_cells_B:
  65 0065 0A456E74	        .asciiz "\nEnter number of live cells for colony B: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  66 0090               
  67 0090               enter_locations:
  68 0090 0A537461	        .asciiz "\nStart entering locations: \n"
          72742065
          6E746572
          696E6720
          6C6F6361
          74696F6E
  69 00ad               
  70 00ad               # ====================
  71 00ad               #    OTHER STRINGS 
  72 00ad               # ====================
  73 00ad               
  74 00ad               banner:
  75 00ad 0A2A2A2A	        .ascii "\n**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  76 00c5 2A2A2A2A	        .ascii "****    Colony    ****\n"
          20202020
          436F6C6F
          6E792020
          20202A2A
          2A2A0A  
  77 00dc 2A2A2A2A	        .asciiz "**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A0A00
  78 00f4               
  79 00f4               gen_banner_start:
  80 00f4 3D3D3D3D	        .asciiz "====    GENERATION "
          20202020
          47454E45
          52415449
          4F4E2000
  81 0108               
  82 0108               gen_banner_end:
  83 0108 20202020	        .asciiz "    ====\n"
          3D3D3D3D
          0A00    
  84 0112               
  85 0112               newline: 
  86 0112 0A00    	        .asciiz "\n"
  87 0114               
  88 0114               space:
  89 0114 2000    	        .asciiz " "
  90 0116               
  91 0116               # ====================
  92 0116               #    ERROR STRINGS 
  93 0116               # ====================
  94 0116               
  95 0116               illegal_size:
  96 0116 0A574152	        .asciiz "\nWARNING: illegal board size, try again: "
          4E494E47
          3A20696C
          6C656761
          6C20626F
          61726420
  97 0140               
  98 0140               illegal_gens:
  99 0140 0A574152	        .asciiz "\nWARNING: illegal number of generations, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 100 0175               
 101 0175               illegal_cells:
 102 0175 0A574152	        .asciiz "\nWARNING: illegal number of live cells, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 103 01a9               
 104 01a9               illegal_point:
 105 01a9 0A574152	        .asciiz "\nWARNING: illegal point location\n"
          4E494E47
          3A20696C
          6C656761
          6C20706F
          696E7420
 106 01cb               
 107 01cb               # ====================
 108 01cb               #    DEBUG STRINGS  
 109 01cb               # ====================
 110 01cb               
 111 01cb               d_dim:
 112 01cb 0A20426F	        .asciiz "\n Board Dimensions: "
          61726420
          44696D65
          6E73696F
          6E733A20
          00      
 113 01e0               
 114 01e0               d_gen:
 115 01e0 0A204765	        .asciiz "\n Generations: "
          6E657261
          74696F6E
          733A2000
 116 01f0               
 117 01f0               d_a_cells:
 118 01f0 0A20436F	        .asciiz "\n Colony A Cells: "
          6C6F6E79
          20412043
          656C6C73
          3A2000  
 119 0203               
 120 0203               d_b_cells:
 121 0203 0A20436F	        .asciiz "\n Colony B Cells: "
          6C6F6E79
          20422043
          656C6C73
          3A2000  
 122 0216               
 123 0216               d_a_loc:
 124 0216 0A204120	        .asciiz "\n A Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 125 0228               
 126 0228               d_b_loc:
 127 0228 0A204220	        .asciiz "\n B Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 128 023a               
 129 023a               lp:
 130 023a 2800    	        .asciiz "("
 131 023c               comma:
 132 023c 2C2000  	        .asciiz ", "
 133 023f               rp:
 134 023f 2900    	        .asciiz ")"
 135 0241               
 136 0241               # ====================
 137 0241               #    BOARD STRINGS  
 138 0241               # ====================
 139 0241               
 140 0241               plus:
 141 0241 2B00    	        .asciiz "+"
 142 0243               
 143 0243               minus:
 144 0243 2D00    	        .asciiz "-"
 145 0245               
 146 0245               bar:
 147 0245 7C00    	        .asciiz "|"
 148 0247               
 149 0247               A:
 150 0247 4100    	        .asciiz "A"
 151 0249               B:
 152 0249 4200    	        .asciiz "B"
 153 024b               
 154 024b               # ====================
 155 024b               #     GAME BUFFERS
 156 024b               # ====================
 157 024b               # These addresses will hold the values read in by the user
 158 024b               # if a negative one is detected in a register, the value will
 159 024b               # be known to not be read in correctly
 160 024b               
 161 024b               board_dim:
 162 024b 00      	        .word       -1
     024c FFFFFFFF
 163 0250               
 164 0250               generations:
 165 0250 FFFFFFFF	        .word       -1
 166 0254               
 167 0254               A_cells:
 168 0254 FFFFFFFF	        .word       -1
 169 0258               
 170 0258               B_cells:
 171 0258 FFFFFFFF	        .word       -1
 172 025c               
 173 025c               a_next:
 174 025c 00000260	        .word       a_coordinates
 175 0260               
 176 0260               a_coordinates:                                          
 177 0260 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 178 1e80                       .align      2
 179 1e80               
 180 1e80               b_next:
 181 1e80 00001E84	        .word       b_coordinates
 182 1e84               
 183 1e84               b_coordinates:
 184 1e84 00000000	        .space      7200                            #space for 300 y's
          00000000
          00000000
          00000000
          00000000
          00000000
 185 3aa4                       .align      2
 186 3aa4               
 187 3aa4                       #   === 32 byte structure ===   #
 188 3aa4               
 189 3aa4               param_block:
 190 3aa4 0000024C	        .word       board_dim                       #0 offset
 191 3aa8 00000250	        .word       generations                     #4 offset
 192 3aac 00000254	        .word       A_cells                         #8 offset
 193 3ab0 00000258	        .word       B_cells                         #12 offset
 194 3ab4 0000025C	        .word       a_next                          #16 offset
 195 3ab8 00001E80	        .word       b_next                          #20 offset
 196 3abc 00000260	        .word       a_coordinates                   #24 offset
 197 3ac0 00001E84	        .word       b_coordinates                   #28 offset
 198 3ac4               
 199 3ac4               board_1:
 200 3ac4 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 201 3e48                       .align      2
 202 3e48                       
 203 3e48               board_2:
 204 3e48 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 205 41cc                       .align      2
 206 41cc               
 207 41cc               a_coordinates_2:
 208 41cc 00000000	        .space      7200
          00000000
          00000000
          00000000
          00000000
          00000000
 209 5dec                       .align      2
 210 5dec               
 211 5dec               b_coordinates_2:
 212 5dec 00000000	        .space      7200
          00000000
          00000000
          00000000
          00000000
          00000000
 213 7a0c                       .align      2
 214 7a0c               
 215 7a0c               ###########################################
 216 7a0c               # ======================================= #
 217 7a0c               # ||        MAIN CODE BLOCK            || #
 218 7a0c               # ======================================= #
 219 7a0c               ###########################################
 220 0000                       .text
 221 0000                       .align      2
 222 0000                       .globl      main
 223 0000                       .globl      get_integer
 224 0000                       .globl      get_A_cells
 225 0000                       .globl      get_B_cells
 226 0000               
 227 0000               main:       
 228 0000 23BDFFD0	        addi    $sp, $sp, -FRAMESIZE_48
 229 0004 AFBF002C	        sw      $ra, -4+FRAMESIZE_48($sp)
 230 0008                       
 231 0008 34020004	        li      $v0, PRINT_STRING                   #print banner
 232 000c 3C040000	        la      $a0, banner
     0010 34840000
 233 0014 0000000C	        syscall
 234 0018                       
 235 0018                       # ---------------------------- #
 236 0018                       #       Get user input         #
 237 0018                       # ---------------------------- #
 238 0018               
 239 0018                       # print and get board dimensions #
 240 0018               
 241 0018 34020004	        li      $v0, PRINT_STRING                    
 242 001c 3C040000	        la      $a0, enter_board_size
     0020 34840000
 243 0024 0000000C	        syscall
 244 0028                       
 245 0028 3C040000	        la      $a0, board_dim 
     002c 34840000
 246 0030 34050004	        li      $a1, 4
 247 0034 3406001E	        li      $a2, 30
 248 0038 3C070000	        la      $a3, illegal_size
     003c 34E70000
 249 0040 0C000000	        jal     get_integer
 250 0044                       
 251 0044                       # print and get generations #
 252 0044               
 253 0044 34020004	        li      $v0, PRINT_STRING                    
 254 0048 3C040000	        la      $a0, enter_generations
     004c 34840000
 255 0050 0000000C	        syscall
 256 0054                       
 257 0054 3C040000	        la      $a0, generations
     0058 34840000
 258 005c 34050000	        li      $a1, 0
 259 0060 34060014	        li      $a2, 20
 260 0064 3C070000	        la      $a3, illegal_gens
     0068 34E70000
 261 006c 0C000000	        jal     get_integer
 262 0070               
 263 0070                       # print and get A colony size #
 264 0070               
 265 0070 34020004	        li      $v0, PRINT_STRING                    
 266 0074 3C040000	        la      $a0, live_cells_A
     0078 34840000
 267 007c 0000000C	        syscall
 268 0080                       
 269 0080 3C040000	        la      $a0, A_cells
     0084 34840000
 270 0088 34050000	        li      $a1, 0
 271 008c 3C060000	        la      $a2, board_dim
     0090 34C60000
 272 0094 8CC60000	        lw      $a2, 0($a2)
 273 0098 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     009c 00003012
 274 00a0 3C070000	        la      $a3, illegal_cells
     00a4 34E70000
 275 00a8 0C000000	        jal     get_integer
 276 00ac               
 277 00ac                       # print and get A colony locations #
 278 00ac               
 279 00ac 34020004	        li      $v0, PRINT_STRING                    
 280 00b0 3C040000	        la      $a0, enter_locations
     00b4 34840000
 281 00b8 0000000C	        syscall
 282 00bc                       
 283 00bc 3C040000	        la      $a0, param_block
     00c0 34840000
 284 00c4 3C050000	        la      $a1, illegal_point
     00c8 34A50000
 285 00cc 3C060000	        la      $a2, a_coordinates_2
     00d0 34C60000
 286 00d4 0C000000	        jal     get_A_cells
 287 00d8               
 288 00d8                       # print and get B colony size #
 289 00d8               
 290 00d8 34020004	        li      $v0, PRINT_STRING                    
 291 00dc 3C040000	        la      $a0, live_cells_B
     00e0 34840000
 292 00e4 0000000C	        syscall
 293 00e8                       
 294 00e8 3C040000	        la      $a0, B_cells
     00ec 34840000
 295 00f0 34050000	        li      $a1, 0
 296 00f4 3C060000	        la      $a2, board_dim
     00f8 34C60000
 297 00fc 8CC60000	        lw      $a2, 0($a2)
 298 0100 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     0104 00003012
 299 0108 3C070000	        la      $a3, illegal_cells
     010c 34E70000
 300 0110 0C000000	        jal     get_integer
 301 0114                       
 302 0114                       # print and get B colony locations #
 303 0114               
 304 0114 34020004	        li      $v0, PRINT_STRING                    
 305 0118 3C040000	        la      $a0, enter_locations
     011c 34840000
 306 0120 0000000C	        syscall
 307 0124                       
 308 0124 3C040000	        la      $a0, param_block
     0128 34840000
 309 012c 3C050000	        la      $a1, illegal_point
     0130 34A50000
 310 0134 3C060000	        la      $a2, b_coordinates_2
     0138 34C60000
 311 013c 0C000000	        jal     get_B_cells
 312 0140                       
 313 0140                       # == test input grabbing == #
 314 0140               
 315 0140 3C040000	        la      $a0, param_block
     0144 34840000
 316 0148 0C00014A	        jal     debug_params
 317 014c               
 318 014c                       # == set up board == #
 319 014c               
 320 014c 3C040000	        la      $a0, board_1
     0150 34840000
 321 0154 0C0000C5	        jal     setup_board
 322 0158 3C040000	        la      $a0, board_1
     015c 34840000
 323 0160 0C000073	        jal     print_board
 324 0164               
 325 0164 3C040000	        la      $a0, board_2
     0168 34840000
 326 016c 0C0000C5	        jal     setup_board
 327 0170 3C040000	        la      $a0, board_2
     0174 34840000
 328 0178 0C000073	        jal     print_board
 329 017c                       #jal     run_conway
 330 017c               
 331 017c               end_main:
 332 017c 8FBF002C	        lw      $ra, -4+FRAMESIZE_48($sp)
 333 0180 23BD0030	        addi    $sp, $sp, FRAMESIZE_48
 334 0184 03E00008	        jr      $ra
 335 0188               
 336 0188               # =========================================================
 337 0188               # Name:             run_conway
 338 0188               # =========================================================
 339 0188               # Description:      this is the main function for running
 340 0188               #                   the game of life variation
 341 0188               #                   
 342 0188               # Parameters:
 343 0188               #
 344 0188               # S Registers:
 345 0188               #       s0 -        generations needed to run
 346 0188               #       s1 -        first game board
 347 0188               #       s2 -        second game board
 348 0188               #       s3 -        the current cell being considered
 349 0188               #       s4 -        the current generation we're on
 350 0188               #
 351 0188               # T Registers:
 352 0188               #       t0 -        pointer to a game board at (col, row)
 353 0188               #       t1 -        loop true var / n friendly
 354 0188               #
 355 0188               # =========================================================
 356 0188               
 357 0188               run_conway:
 358 0188 23BDFFE8	        addi    $sp, $sp, -REGISTERS_5
 359 018c AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 360 0190 AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 361 0194 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 362 0198 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 363 019c AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 364 01a0 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 365 01a4               
 366 01a4               conway_loop:
 367 01a4 0214482A	        slt     $t1, $s0, $s4                       # while(i < gens)
 368 01a8 15200000	        bne     $t1, $zero, conway_end              # {
 369 01ac               
 370 01ac                       # calculate friendly neighors #
 371 01ac                       
 372 01ac                       
 373 01ac               
 374 01ac               
 375 01ac               
 376 01ac                                                                   # }
 377 01ac               conway_end:
 378 01ac AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 379 01b0 AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 380 01b4 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 381 01b8 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 382 01bc AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 383 01c0 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 384 01c4 23BD0018	        addi    $sp, $sp, REGISTERS_5
 385 01c8 03E00008	        jr      $ra
 386 01cc               
 387 01cc               # =========================================================
 388 01cc               # Name:             print_board 
 389 01cc               # =========================================================
 390 01cc               # Description:      print the board as a 2D array
 391 01cc               #                   
 392 01cc               # Parameters:
 393 01cc               #       a0 -        the addr of the board to print
 394 01cc               #
 395 01cc               # Parameters:
 396 01cc               #       s0 -        the dim of the board
 397 01cc               #       s1 -        the pointer to the row to print
 398 01cc               #       s2 -        the addr ofthe array
 399 01cc               #
 400 01cc               # T Registers:
 401 01cc               #       t0 -        row loop flag
 402 01cc               #       t1 -        row loop counter
 403 01cc               #       t2 -        col loop counter
 404 01cc               #       t3 -        pointer for col in row / banner counter
 405 01cc               #       t4 -        column loop flag
 406 01cc               #
 407 01cc               # =========================================================
 408 01cc               
 409 01cc               print_board: 
 410 01cc 23BDFFF0	        addi    $sp, $sp, -16 
 411 01d0 AFBF000C	        sw      $ra, 12($sp)
 412 01d4 AFB00008	        sw      $s0, 8($sp)
 413 01d8 AFB10004	        sw      $s1, 4($sp)
 414 01dc 8FB20000	        lw      $s2, 0($sp)
 415 01e0               
 416 01e0 00808821	        move     $s1, $a0 
 417 01e4 00809021	        move     $s2, $a0 
 418 01e8               
 419 01e8                       # print top of board #
 420 01e8               
 421 01e8 0C0000A9	        jal     print_top_bottom
 422 01ec               
 423 01ec                       # get board dim #
 424 01ec               
 425 01ec 0C000111	        jal     get_board_dim
 426 01f0 00408021	        move    $s0, $v0
 427 01f4               
 428 01f4                       # calculate row to start at#
 429 01f4               
 430 01f4 2209FFFF	        addi    $t1, $s0, -1                        # row = dim - 1
 431 01f8 00005021	        move    $t2, $zero                          # col = 0
 432 01fc               
 433 01fc                       
 434 01fc               print_row_loop:
 435 01fc 0120402A	        slt     $t0, $t1, $zero                     #while(row >= 0)
 436 0200 15000021	        bne     $t0, $zero, print_board_end 
 437 0204 3C040000	        la      $a0, bar                            #print("|")
     0208 34840000
 438 020c 34020004	        li      $v0, PRINT_STRING 
 439 0210 0000000C	        syscall
 440 0214               
 441 0214                       # calculate row address #
 442 0214 34010001	        mul     $s1, $s0, 1                         # len_c = size(char) * dim
     0218 02010018
     021c 00008812
 443 0220 02290018	        mul     $s1, $s1, $t1                       # offset = len_c * row
     0224 00008812
 444 0228 02518820	        add     $s1, $s2, $s1                       # r_addr = base + offset
 445 022c                       
 446 022c               print_col_loop:
 447 022c 0150602A	        slt     $t4, $t2, $s0                       #while(col < dim)
 448 0230 1180000A	        beq     $t4, $zero, end_col_loop
 449 0234               
 450 0234 02205821	        move    $t3, $s1                            #load addr of arr[row][0]
 451 0238               
 452 0238 34010001	        mul     $t5, $t2, 1                         #sizeof(char)*col_index
     023c 01410018
     0240 00006812
 453 0244 016D5820	        add     $t3, $t3, $t5                       #row base + offset
 454 0248               
 455 0248 81640000	        lb      $a0, 0($t3)
 456 024c 3402000B	        li      $v0, PRINT_CHAR
 457 0250 0000000C	        syscall                                     #print(arr[row][col])
 458 0254                       
 459 0254 214A0001	        addi    $t2, $t2, 1                         #col++
 460 0258 0800008B	        j       print_col_loop
 461 025c               
 462 025c               end_col_loop:
 463 025c                       
 464 025c 3C040000	        la      $a0, bar                            #print("|")
     0260 34840000
 465 0264 34020004	        li      $v0, PRINT_STRING 
 466 0268 0000000C	        syscall
 467 026c               
 468 026c 3C040000	        la      $a0, newline                       #print("\n")
     0270 34840000
 469 0274 34020004	        li      $v0, PRINT_STRING 
 470 0278 0000000C	        syscall
 471 027c                       
 472 027c 00005021	        move    $t2, $zero                          # col = 0
 473 0280 2129FFFF	        addi    $t1, $t1, -1                        # row--
 474 0284 0800007F	        j       print_row_loop
 475 0288               
 476 0288               
 477 0288               print_board_end:
 478 0288 0C0000A9	        jal     print_top_bottom                    #print bottom board
 479 028c               
 480 028c 8FBF000C	        lw      $ra, 12($sp)
 481 0290 8FB00008	        lw      $s0, 8($sp)
 482 0294 8FB10004	        lw      $s1, 4($sp)
 483 0298 8FB20000	        lw      $s2, 0($sp)
 484 029c 23BD0010	        addi    $sp, $sp, 16
 485 02a0 03E00008	        jr      $ra
 486 02a4               
 487 02a4               # =========================================================
 488 02a4               # Name:             print_top_bottom
 489 02a4               # =========================================================
 490 02a4               # Description:      this prints the top banner of the board
 491 02a4               #
 492 02a4               # T Registers:
 493 02a4               #       t0  -       loop counter
 494 02a4               #       t1  -       board dimension
 495 02a4               # =========================================================
 496 02a4               
 497 02a4               print_top_bottom:
 498 02a4 23BDFFFC	        addi    $sp, $sp, -4
 499 02a8 AFBF0000	        sw      $ra, 0($sp)
 500 02ac               
 501 02ac                       
 502 02ac 0C000111	        jal     get_board_dim
 503 02b0 00404821	        move    $t1, $v0
 504 02b4               
 505 02b4 3C040000	        la      $a0, plus                           #print("+")
     02b8 34840000
 506 02bc 34020004	        li      $v0, PRINT_STRING 
 507 02c0 0000000C	        syscall
 508 02c4               
 509 02c4 00004021	        move    $t0, $zero
 510 02c8                       
 511 02c8               tb_loop:
 512 02c8 0109582A	        slt     $t3, $t0, $t1                       #while(i < dim)
 513 02cc 11600006	        beq     $t3, $zero, tb_end
 514 02d0               
 515 02d0 3C040000	        la      $a0, minus                          #print("-")
     02d4 34840000
 516 02d8 34020004	        li      $v0, PRINT_STRING 
 517 02dc 0000000C	        syscall
 518 02e0                       
 519 02e0 21080001	        addi    $t0, $t0, 1
 520 02e4 080000B2	        j       tb_loop
 521 02e8               tb_end:
 522 02e8               
 523 02e8 3C040000	        la      $a0, plus                           #print("+")
     02ec 34840000
 524 02f0 34020004	        li      $v0, PRINT_STRING 
 525 02f4 0000000C	        syscall
 526 02f8               
 527 02f8 3C040000	        la      $a0, newline                        #print("\n")
     02fc 34840000
 528 0300 34020004	        li      $v0, PRINT_STRING 
 529 0304 0000000C	        syscall
 530 0308                       
 531 0308 8FBF0000	        lw      $ra, 0($sp)
 532 030c 23BD0004	        addi    $sp, $sp, 4
 533 0310 03E00008	        jr      $ra
 534 0314               
 535 0314               
 536 0314               # =========================================================
 537 0314               # Name:             setup_board
 538 0314               # =========================================================
 539 0314               # Description:      this fills the spots in the array with 
 540 0314               #                   either an "A", "B", or " "(space)
 541 0314               #
 542 0314               # Parameters:
 543 0314               #       - a0        location of board to set up
 544 0314               # S Registers:
 545 0314               #       - s0        the board dimension
 546 0314               #       - s1        the pointer to pos in 2d array
 547 0314               #       - s2        the addr of the end 2d array
 548 0314               #
 549 0314               # T Registers:
 550 0314               #       - t2        addr of a_coordinates
 551 0314               #       - t3        addr of b_coordinates
 552 0314               #       - t9        pointer to curr in array
 553 0314               # =========================================================
 554 0314               
 555 0314               setup_board:
 556 0314 23BDFFF0	        addi    $sp, $sp, -16
 557 0318 AFBF000C	        sw      $ra, 12($sp)
 558 031c AFB00008	        sw      $s0, 8($sp)
 559 0320 AFB10004	        sw      $s1, 4($sp)
 560 0324 AFB20000	        sw      $s2, 0($sp)
 561 0328               
 562 0328 0C000111	        jal     get_board_dim                       #get board dim
 563 032c 00408021	        move    $s0, $v0
 564 0330 00808821	        move    $s1, $a0
 565 0334                   
 566 0334 02100018	        mul     $t0, $s0, $s0                       #dim^2
     0338 00004012
 567 033c 01119020	        add     $s2, $t0, $s1                       #pointer to end of array
 568 0340               
 569 0340 34090020	        li      $t1, 32                             #t1 = ascii " "
 570 0344               
 571 0344               load_blanks:
 572 0344 0251402A	        slt     $t0, $s2, $s1                       # i == dim; break
 573 0348 15000003	        bne     $t0, $zero, fill_array
 574 034c                       
 575 034c A2290000	        sb      $t1, 0($s1)                         #arr[i] = ' ';
 576 0350               
 577 0350 22310001	        addi    $s1, $s1, 1                         #i++
 578 0354 080000D1	        j       load_blanks
 579 0358               
 580 0358               fill_array:
 581 0358 0C0000DD	        jal     fill_positions
 582 035c                       
 583 035c               
 584 035c               setup_end:
 585 035c 8FBF000C	        lw      $ra, 12($sp)
 586 0360 8FB00008	        lw      $s0, 8($sp)
 587 0364 8FB10004	        lw      $s1, 4($sp)
 588 0368 8FB20000	        lw      $s2, 0($sp)
 589 036c 23BD0010	        addi    $sp, $sp, 16
 590 0370 03E00008	        jr      $ra
 591 0374               
 592 0374               
 593 0374               # =========================================================
 594 0374               # Name:             fill_positions
 595 0374               # =========================================================
 596 0374               # Description:      this function takes the given board 
 597 0374               #                   passed in through a0 and fills it
 598 0374               #                   with positions from the a_coordinate
 599 0374               #                   and b_coordinate arrays
 600 0374               #
 601 0374               # Parameters:
 602 0374               #       - a0        location of board to set up
 603 0374               #
 604 0374               # S Registers:
 605 0374               #       - s0        number of values in a/b
 606 0374               #       - s1        current array (a or b)
 607 0374               #       - s2        board dimensions
 608 0374               #       - s3        current ascii value
 609 0374               #
 610 0374               # T Registers:
 611 0374               #       - t0        location of the a coordinate array
 612 0374               #       - t2        pointer to board[row][col]
 613 0374               #       - t3        x coordinate from array
 614 0374               #       - t4        y coordinate from array
 615 0374               # =========================================================
 616 0374               
 617 0374               fill_positions:
 618 0374 23BDFFE8	        addi    $sp, $sp, -REGISTERS_5
 619 0378 AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 620 037c AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 621 0380 AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 622 0384 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 623 0388 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 624 038c AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 625 0390               
 626 0390 0C000111	        jal     get_board_dim
 627 0394 00409021	        move    $s2, $v0
 628 0398                   
 629 0398 0C000119	        jal     get_a
 630 039c 00408021	        move    $s0, $v0
 631 03a0               
 632 03a0 3C110000	        la      $s1, a_coordinates
     03a4 36310000
 633 03a8 34130041	        li      $s3, 65
 634 03ac                       
 635 03ac 00805021	        move    $t2, $a0                            # pointer to boar_arr[0]
 636 03b0 0000C821	        move    $t9, $zero                          # i = 0
 637 03b4               
 638 03b4               fill_a:
 639 03b4 0330C02A	        slt     $t8, $t9, $s0                       # while(i < a_size)
 640 03b8 13000009	        beq     $t8, $zero, fill_a_end
 641 03bc                       
 642 03bc                       # add values into 2d board
 643 03bc               
 644 03bc 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
 645 03c0 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
 646 03c4 02403821	        move    $a3, $s2                            # get dim of board
 647 03c8                       
 648 03c8 0C000121	        jal     get_pos
 649 03cc                       
 650 03cc A0530000	        sb      $s3, 0($v0)      
 651 03d0                       
 652 03d0 23390001	        addi    $t9, $t9, 1                         # i++
 653 03d4 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
 654 03d8 00805021	        move    $t2, $a0
 655 03dc 080000ED	        j       fill_a
 656 03e0               
 657 03e0               fill_a_end:
 658 03e0               
 659 03e0 0C00011D	        jal     get_b           
 660 03e4 00408021	        move    $s0, $v0                            # get b address
 661 03e8 3C110000	        la      $s1, b_coordinates                  # get base of b_arr
     03ec 36310000
 662 03f0 34130042	        li      $s3, 66                             # ascii 'B'
 663 03f4 0000C821	        move    $t9, $zero                          # i = 0
 664 03f8               
 665 03f8               fill_b:
 666 03f8 0330C02A	        slt     $t8, $t9, $s0                       # while(i < b_size)
 667 03fc 13000009	        beq     $t8, $zero, fill_positions_end
 668 0400                       
 669 0400                       # add values into 2d board
 670 0400               
 671 0400 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
 672 0404 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
 673 0408 02403821	        move    $a3, $s2                            # get dim of board
 674 040c                       
 675 040c 0C000121	        jal     get_pos
 676 0410                       
 677 0410 A0530000	        sb      $s3, 0($v0)      
 678 0414                       
 679 0414 23390001	        addi    $t9, $t9, 1                         # i++
 680 0418 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
 681 041c 00805021	        move    $t2, $a0
 682 0420 080000FE	        j       fill_b
 683 0424               
 684 0424               fill_positions_end:
 685 0424               
 686 0424 8FBF0014	        lw      $ra, -4+REGISTERS_5($sp)
 687 0428 8FB00010	        lw      $s0, -8+REGISTERS_5($sp)
 688 042c 8FB1000C	        lw      $s1, -12+REGISTERS_5($sp)
 689 0430 8FB20008	        lw      $s2, -16+REGISTERS_5($sp)
 690 0434 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 691 0438 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 692 043c 23BD0018	        addi    $sp, $sp, REGISTERS_5
 693 0440 03E00008	        jr      $ra
 694 0444               
 695 0444               ###########################################
 696 0444               # ======================================= #
 697 0444               # ||        Helper Code                || #
 698 0444               # ======================================= #
 699 0444               ###########################################
 700 0444               
 701 0444               get_board_dim:
 702 0444 3C080000	        la      $t0, board_dim
     0448 35080000
 703 044c 8D020000	        lw      $v0, 0($t0)
 704 0450 03E00008	        jr      $ra
 705 0454               
 706 0454               get_generations:
 707 0454 3C080000	        la      $t0, generations
     0458 35080000
 708 045c 8D020000	        lw      $v0, 0($t0)
 709 0460 03E00008	        jr      $ra
 710 0464               
 711 0464               get_a:
 712 0464 3C080000	        la      $t0, A_cells
     0468 35080000
 713 046c 8D020000	        lw      $v0, 0($t0)
 714 0470 03E00008	        jr      $ra
 715 0474               
 716 0474               get_b:
 717 0474 3C080000	        la      $t0, B_cells
     0478 35080000
 718 047c 8D020000	        lw      $v0, 0($t0)
 719 0480 03E00008	        jr      $ra
 720 0484               
 721 0484               # =========================================================
 722 0484               # Name:             get_pos
 723 0484               # =========================================================
 724 0484               # Description:      gets the addr of board[row][col] in 
 725 0484               #                   the given array
 726 0484               #
 727 0484               # Parameters:
 728 0484               #       a0 -        the location of array to access
 729 0484               #       a1 -        the row value
 730 0484               #       a2 -        the col value
 731 0484               #       a3 -        the dim of the board
 732 0484               #
 733 0484               # Returns:
 734 0484               #       v0 - the addr of board[row][col]
 735 0484               #     
 736 0484               # =========================================================
 737 0484               
 738 0484               get_pos:
 739 0484               
 740 0484                       # calculate row address #
 741 0484               
 742 0484 34010001	        mul     $v0, $a3, 1                         # len_c = size(char) * dim
     0488 00E10018
     048c 00001012
 743 0490 00450018	        mul     $v0, $v0, $a1                       # roffset = len_c * row
     0494 00001012
 744 0498 00821020	        add     $v0, $a0, $v0                      # r_addr = base + roffset
 745 049c                       
 746 049c                       # calculate column address #
 747 049c               
 748 049c 00461020	        add     $v0, $v0, $a2                       # addr = r_addr + col
 749 04a0                       
 750 04a0 03E00008	        jr      $ra
 751 04a4                       
 752 04a4               
 753 04a4               # =========================================================
 754 04a4               # Name:             print_locations
 755 04a4               # =========================================================
 756 04a4               # Description:      prints an array of location "structs"
 757 04a4               #                   each structure is 8 bytes long where:
 758 04a4               #                       - 0 -> x coordinate
 759 04a4               #                       - 4 offset -> y coordinate
 760 04a4               #
 761 04a4               # Parameters:
 762 04a4               #       a0 -        the location of array to print
 763 04a4               #       a1 -        the size of the array
 764 04a4               #
 765 04a4               # T Registers:
 766 04a4               #       t0 -        loop counter
 767 04a4               #     
 768 04a4               # =========================================================
 769 04a4               
 770 04a4               print_locations:
 771 04a4 34080000	        li      $t0, 0                              # i == 0
 772 04a8 00804821	        move    $t1, $a0                            # pointer
 773 04ac               
 774 04ac               print_loop:
 775 04ac 11050019	        beq     $t0, $a1, print_done                #done if i == n 
 776 04b0               
 777 04b0 3C040000	        la      $a0, newline
     04b4 34840000
 778 04b8 34020004	        li      $v0, PRINT_STRING                   #print \n
 779 04bc 0000000C	        syscall
 780 04c0                       
 781 04c0 3C040000	        la      $a0, lp
     04c4 34840000
 782 04c8 34020004	        li      $v0, PRINT_STRING                   #print (
 783 04cc 0000000C	        syscall
 784 04d0                       
 785 04d0 8D240000	        lw      $a0, 0($t1)                         #get a[i].x
 786 04d4 34020001	        li      $v0, PRINT_INT
 787 04d8 0000000C	        syscall                                     #print a[i].x
 788 04dc               
 789 04dc 3C040000	        la      $a0, comma
     04e0 34840000
 790 04e4 34020004	        li      $v0, PRINT_STRING                   #print ,
 791 04e8 0000000C	        syscall
 792 04ec                       
 793 04ec 8D240004	        lw      $a0, 4($t1)                         #get a[i].y
 794 04f0 34020001	        li      $v0, PRINT_INT
 795 04f4 0000000C	        syscall                                     #print a[i].y
 796 04f8                       
 797 04f8 3C040000	        la      $a0, rp
     04fc 34840000
 798 0500 34020004	        li      $v0, PRINT_STRING                   #print )
 799 0504 0000000C	        syscall
 800 0508                       
 801 0508 21290008	        addi    $t1, $t1, 8                         #update pointer
 802 050c 21080001	        addi    $t0, $t0, 1                         #i++
 803 0510 0800012B	        j       print_loop
 804 0514               
 805 0514               print_done:
 806 0514 3C040000	        la      $a0, newline
     0518 34840000
 807 051c 34020004	        li      $v0, PRINT_STRING
 808 0520 0000000C	        syscall
 809 0524                       
 810 0524 03E00008	        jr      $ra
 811 0528               
 812 0528               # =========================================================
 813 0528               # Name:             debug_params
 814 0528               # =========================================================
 815 0528               # Description:      print the inputs in the param block
 816 0528               #
 817 0528               # Parameters:
 818 0528               #       a0 -        the parameter block
 819 0528               # S Registers:
 820 0528               #       s0 -        the saved parameter block
 821 0528               # =========================================================
 822 0528               
 823 0528               debug_params:
 824 0528                       
 825 0528 23BDFFF8	        addi    $sp, $sp, -8
 826 052c AFBF0004	        sw      $ra, 4($sp)
 827 0530 AFB00000	        sw      $s0, 0($sp)
 828 0534                       
 829 0534 00808021	        move    $s0, $a0                            #save param block
 830 0538               
 831 0538                       # print board dimensions #
 832 0538               
 833 0538 34020004	        li      $v0, PRINT_STRING
 834 053c 3C040000	        la      $a0, d_dim
     0540 34840000
 835 0544 0000000C	        syscall
 836 0548               
 837 0548 0C000111	        jal     get_board_dim                       #get the value of board dim
 838 054c 00402021	        move    $a0, $v0
 839 0550 34020001	        li      $v0, PRINT_INT                      #print board dim
 840 0554 0000000C	        syscall
 841 0558               
 842 0558                       # print generations #
 843 0558               
 844 0558 34020004	        li      $v0, PRINT_STRING
 845 055c 3C040000	        la      $a0, d_gen
     0560 34840000
 846 0564 0000000C	        syscall
 847 0568 0C000115	        jal     get_generations                     #value of generations
 848 056c 00402021	        move    $a0, $v0
 849 0570 34020001	        li      $v0, PRINT_INT                      #print generations
 850 0574 0000000C	        syscall
 851 0578               
 852 0578                       # print colony A size #
 853 0578               
 854 0578 34020004	        li      $v0, PRINT_STRING
 855 057c 3C040000	        la      $a0, d_a_cells
     0580 34840000
 856 0584 0000000C	        syscall
 857 0588 0C000119	        jal     get_a                               #get size a
 858 058c 00402021	        move    $a0, $v0
 859 0590 34020001	        li      $v0, PRINT_INT                      #print size of a
 860 0594 0000000C	        syscall
 861 0598               
 862 0598                       # print locations #
 863 0598 34020004	        li      $v0, PRINT_STRING
 864 059c 3C040000	        la      $a0, d_a_loc
     05a0 34840000
 865 05a4 0000000C	        syscall
 866 05a8               
 867 05a8 3C040000	        la      $a0, a_coordinates
     05ac 34840000
 868 05b0 0C000119	        jal     get_a                               #get size a
 869 05b4 00402821	        move    $a1, $v0
 870 05b8 0C000129	        jal     print_locations
 871 05bc               
 872 05bc               
 873 05bc                       # print colony B size#
 874 05bc               
 875 05bc 34020004	        li      $v0, PRINT_STRING
 876 05c0 3C040000	        la      $a0, d_b_cells
     05c4 34840000
 877 05c8 0000000C	        syscall
 878 05cc 0C00011D	        jal     get_b                               #get size b
 879 05d0 00402021	        move    $a0, $v0
 880 05d4 34020001	        li      $v0, PRINT_INT                      #print it
 881 05d8 0000000C	        syscall
 882 05dc               
 883 05dc                       # print locations#
 884 05dc 34020004	        li      $v0, PRINT_STRING
 885 05e0 3C040000	        la      $a0, d_b_loc
     05e4 34840000
 886 05e8 0000000C	        syscall
 887 05ec               
 888 05ec 3C040000	        la      $a0, b_coordinates                  #get addr of arr
     05f0 34840000
 889 05f4 0C00011D	        jal     get_b                               #get size b
 890 05f8 00402821	        move    $a1, $v0
 891 05fc 0C000129	        jal     print_locations
 892 0600               
 893 0600 34020004	        li      $v0, PRINT_STRING
 894 0604 3C040000	        la      $a0, newline
     0608 34840000
 895 060c 0000000C	        syscall
 896 0610                       
 897 0610 8FBF0004	        lw      $ra, 4($sp)
 898 0614 8FB00000	        lw      $s0, 0($sp)
 899 0618 23BD0008	        addi    $sp, $sp, 8
 900 061c 03E00008	        jr      $ra
 901 0620               


A                     00000247 R  data 
A_ARRAY_OFFSET      = 00000018   
A_OFFSET            = 00000008   
A_cells               00000254 R  data 
B                     00000249 R  data 
B_ARRAY_OFFSET      = 0000001C   
B_OFFSET            = 0000000C   
B_cells               00000258 R  data 
DIM_OFFSET          = 00000000   
FRAMESIZE_24        = 00000018   
FRAMESIZE_40        = 00000028   
FRAMESIZE_48        = 00000030   
FRAMESIZE_8         = 00000008   
GEN_OFFSET          = 00000004   
NEXT_A_OFFSET       = 00000010   
NEXT_B_OFFSET       = 00000014   
PRINT_CHAR          = 0000000B   
PRINT_INT           = 00000001   
PRINT_STRING        = 00000004   
READ_INT            = 00000005   
READ_STRING         = 00000008   
REGISTERS_2         = 0000000C   
REGISTERS_3         = 00000010   
REGISTERS_4         = 00000014   
REGISTERS_5         = 00000018   
REGISTERS_6         = 0000001C   
REGISTER_1          = 00000008   
a_coordinates         00000260 R  data 
a_coordinates_2       000041CC R  data 
a_next                0000025C R  data 
b_coordinates         00001E84 R  data 
b_coordinates_2       00005DEC R  data 
b_next                00001E80 R  data 
banner                000000AD R  data 
bar                   00000245 R  data 
board_1               00003AC4 R  data 
board_2               00003E48 R  data 
board_dim             0000024C R  data 
comma                 0000023C R  data 
conway_end            000001AC R  text 
conway_loop           000001A4 R  text 
d_a_cells             000001F0 R  data 
d_a_loc               00000216 R  data 
d_b_cells             00000203 R  data 
d_b_loc               00000228 R  data 
d_dim                 000001CB R  data 
d_gen                 000001E0 R  data 
debug_params          00000528 R  text 
end_col_loop          0000025C R  text 
end_main              0000017C R  text 
enter_board_size      00000000 R  data 
enter_generations     00000014 R  data 
enter_locations       00000090 R  data 
fill_a                000003B4 R  text 
fill_a_end            000003E0 R  text 
fill_array            00000358 R  text 
fill_b                000003F8 R  text 
fill_positions        00000374 R  text 
fill_positions_end    00000424 R  text 
gen_banner_end        00000108 R  data 
gen_banner_start      000000F4 R  data 
generations           00000250 R  data 
get_A_cells           ******** XG
get_B_cells           ******** XG
get_a                 00000464 R  text 
get_b                 00000474 R  text 
get_board_dim         00000444 R  text 
get_generations       00000454 R  text 
get_integer           ******** XG
get_pos               00000484 R  text 
illegal_cells         00000175 R  data 
illegal_gens          00000140 R  data 
illegal_point         000001A9 R  data 
illegal_size          00000116 R  data 
live_cells_A          0000003A R  data 
live_cells_B          00000065 R  data 
load_blanks           00000344 R  text 
lp                    0000023A R  data 
main                  00000000 RG text 
minus                 00000243 R  data 
newline               00000112 R  data 
param_block           00003AA4 R  data 
plus                  00000241 R  data 
print_board           000001CC R  text 
print_board_end       00000288 R  text 
print_col_loop        0000022C R  text 
print_done            00000514 R  text 
print_locations       000004A4 R  text 
print_loop            000004AC R  text 
print_row_loop        000001FC R  text 
print_top_bottom      000002A4 R  text 
rp                    0000023F R  data 
run_conway            00000188 R  text 
setup_board           00000314 R  text 
setup_end             0000035C R  text 
space                 00000114 R  data 
tb_end                000002E8 R  text 
tb_loop               000002C8 R  text 
