   1 0000               # File: $Id$
   2 0000               # Author: Ryan Cervantes (rxc3202@rit.edu)
   3 0000               # Description: this file is the main file for the
   4 0000               #               cs250 project
   5 0000               
   6 0000               
   7 0000               
   8 0000               ###########################################
   9 0000               # ======================================= #
  10 0000               # ||        CONSTANTS BLOCK            || #
  11 0000               # ======================================= #
  12 0000               ###########################################
  13 0000               
  14 0000               # ===========================
  15 0000               # || param block constants ||
  16 0000               # ===========================
  17 0000               
  18 0000               DIM_OFFSET = 0
  19 0000               GEN_OFFSET = 4
  20 0000               A_OFFSET = 8
  21 0000               B_OFFSET = 12
  22 0000               NEXT_A_OFFSET = 16
  23 0000               NEXT_B_OFFSET = 20
  24 0000               A_ARRAY_OFFSET = 24
  25 0000               B_ARRAY_OFFSET = 28
  26 0000               
  27 0000               # syscall codes
  28 0000               
  29 0000               PRINT_INT =	1
  30 0000               PRINT_STRING = 	4
  31 0000               READ_INT = 	5
  32 0000               READ_STRING =	8
  33 0000               PRINT_CHAR = 11 
  34 0000               
  35 0000               # various frame sizes used by different routines
  36 0000               REGISTER_1 = 8
  37 0000               REGISTERS_2 = 12
  38 0000               REGISTERS_3 = 16
  39 0000               REGISTERS_4 = 20
  40 0000               REGISTERS_5 = 24
  41 0000               REGISTERS_6 = 28
  42 0000               
  43 0000               FRAMESIZE_48 =	48
  44 0000               
  45 0000                       .data
  46 0000                       .align      2
  47 0000               
  48 0000               # ====================
  49 0000               #    INPUT STRINGS 
  50 0000               # ====================
  51 0000               
  52 0000               enter_board_size:
  53 0000 0A456E74	        .asciiz "\nEnter board size: "
          65722062
          6F617264
          2073697A
          653A2000
  54 0014               
  55 0014               enter_generations: 
  56 0014 0A456E74	        .asciiz "\nEnter number of generations to run: "
          6572206E
          756D6265
          72206F66
          2067656E
          65726174
  57 003a               
  58 003a               live_cells_A:
  59 003a 0A456E74	        .asciiz "\nEnter number of live cells for colony A: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  60 0065               
  61 0065               live_cells_B:
  62 0065 0A456E74	        .asciiz "\nEnter number of live cells for colony B: "
          6572206E
          756D6265
          72206F66
          206C6976
          65206365
  63 0090               
  64 0090               enter_locations:
  65 0090 0A537461	        .asciiz "\nStart entering locations: \n"
          72742065
          6E746572
          696E6720
          6C6F6361
          74696F6E
  66 00ad               
  67 00ad               # ====================
  68 00ad               #    OTHER STRINGS 
  69 00ad               # ====================
  70 00ad               
  71 00ad               banner:
  72 00ad 0A2A2A2A	        .ascii "\n**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  73 00c5 2A2A2A2A	        .ascii "****    Colony    ****\n"
          20202020
          436F6C6F
          6E792020
          20202A2A
          2A2A0A  
  74 00dc 2A2A2A2A	        .asciiz "**********************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A0A00
  75 00f4               
  76 00f4               gen_banner_start:
  77 00f4 3D3D3D3D	        .asciiz "====    GENERATION "
          20202020
          47454E45
          52415449
          4F4E2000
  78 0108               
  79 0108               gen_banner_end:
  80 0108 20202020	        .asciiz "    ====\n"
          3D3D3D3D
          0A00    
  81 0112               
  82 0112               newline: 
  83 0112 0A00    	        .asciiz "\n"
  84 0114               
  85 0114               space:
  86 0114 2000    	        .asciiz " "
  87 0116               
  88 0116               # ====================
  89 0116               #    ERROR STRINGS 
  90 0116               # ====================
  91 0116               
  92 0116               illegal_size:
  93 0116 0A574152	        .asciiz "\nWARNING: illegal board size, try again: "
          4E494E47
          3A20696C
          6C656761
          6C20626F
          61726420
  94 0140               
  95 0140               illegal_gens:
  96 0140 0A574152	        .asciiz "\nWARNING: illegal number of generations, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
  97 0175               
  98 0175               illegal_cells:
  99 0175 0A574152	        .asciiz "\nWARNING: illegal number of live cells, try again: "
          4E494E47
          3A20696C
          6C656761
          6C206E75
          6D626572
 100 01a9               
 101 01a9               illegal_point:
 102 01a9 0A574152	        .asciiz "\nWARNING: illegal point location\n"
          4E494E47
          3A20696C
          6C656761
          6C20706F
          696E7420
 103 01cb               
 104 01cb               # ====================
 105 01cb               #    DEBUG STRINGS  
 106 01cb               # ====================
 107 01cb               
 108 01cb               d_dim:
 109 01cb 0A20426F	        .asciiz "\n Board Dimensions: "
          61726420
          44696D65
          6E73696F
          6E733A20
          00      
 110 01e0               
 111 01e0               d_gen:
 112 01e0 0A204765	        .asciiz "\n Generations: "
          6E657261
          74696F6E
          733A2000
 113 01f0               
 114 01f0               d_a_cells:
 115 01f0 0A20436F	        .asciiz "\n Colony A Cells: "
          6C6F6E79
          20412043
          656C6C73
          3A2000  
 116 0203               
 117 0203               d_b_cells:
 118 0203 0A20436F	        .asciiz "\n Colony B Cells: "
          6C6F6E79
          20422043
          656C6C73
          3A2000  
 119 0216               
 120 0216               d_a_loc:
 121 0216 0A204120	        .asciiz "\n A Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 122 0228               
 123 0228               d_b_loc:
 124 0228 0A204220	        .asciiz "\n B Coordinates: "
          436F6F72
          64696E61
          7465733A
          2000    
 125 023a               
 126 023a               lp:
 127 023a 2800    	        .asciiz "("
 128 023c               comma:
 129 023c 2C2000  	        .asciiz ", "
 130 023f               rp:
 131 023f 2900    	        .asciiz ")"
 132 0241               
 133 0241               # ====================
 134 0241               #    BOARD STRINGS  
 135 0241               # ====================
 136 0241               
 137 0241               plus:
 138 0241 2B00    	        .asciiz "+"
 139 0243               
 140 0243               minus:
 141 0243 2D00    	        .asciiz "-"
 142 0245               
 143 0245               bar:
 144 0245 7C00    	        .asciiz "|"
 145 0247               
 146 0247               A:
 147 0247 4100    	        .asciiz "A"
 148 0249               B:
 149 0249 4200    	        .asciiz "B"
 150 024b               
 151 024b               # ====================
 152 024b               #     GAME BUFFERS
 153 024b               # ====================
 154 024b               # These addresses will hold the values read in by the user
 155 024b               # if a negative one is detected in a register, the value will
 156 024b               # be known to not be read in correctly
 157 024b               
 158 024b               board_dim:
 159 024b 00      	        .word       -1
     024c FFFFFFFF
 160 0250               
 161 0250               generations:
 162 0250 FFFFFFFF	        .word       -1
 163 0254               
 164 0254               A_cells:
 165 0254 FFFFFFFF	        .word       -1
 166 0258               
 167 0258               B_cells:
 168 0258 FFFFFFFF	        .word       -1
 169 025c               
 170 025c               a_next:
 171 025c 00000260	        .word       a_coordinates
 172 0260               
 173 0260               a_coordinates:                                          
 174 0260 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 175 1e80                       .align      2
 176 1e80               
 177 1e80               b_next:
 178 1e80 00001E84	        .word       b_coordinates
 179 1e84               
 180 1e84               b_coordinates:
 181 1e84 00000000	        .space      7200                            #space for 300 y's
          00000000
          00000000
          00000000
          00000000
          00000000
 182 3aa4                       .align      2
 183 3aa4               
 184 3aa4                       #   === 32 byte structure ===   #
 185 3aa4               
 186 3aa4               param_block:
 187 3aa4 0000024C	        .word       board_dim                       #0 offset
 188 3aa8 00000250	        .word       generations                     #4 offset
 189 3aac 00000254	        .word       A_cells                         #8 offset
 190 3ab0 00000258	        .word       B_cells                         #12 offset
 191 3ab4 0000025C	        .word       a_next                          #16 offset
 192 3ab8 00001E80	        .word       b_next                          #20 offset
 193 3abc 00000260	        .word       a_coordinates                   #24 offset
 194 3ac0 00001E84	        .word       b_coordinates                   #28 offset
 195 3ac4               
 196 3ac4               board_1:
 197 3ac4 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 198 3e48                       .align      2
 199 3e48                       
 200 3e48               board_2:
 201 3e48 00000000	        .space      900                             #30x30 char array
          00000000
          00000000
          00000000
          00000000
          00000000
 202 41cc                       .align      2
 203 41cc               
 204 41cc               a_coordinates_2:                                          
 205 41cc 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 206 5dec                       .align      2
 207 5dec               
 208 5dec               b_coordinates_2:                                          
 209 5dec 00000000	        .space      7200                            #space for 300 x's
          00000000
          00000000
          00000000
          00000000
          00000000
 210 7a0c                       .align      2
 211 7a0c               ###########################################
 212 7a0c               # ======================================= #
 213 7a0c               # ||        MAIN CODE BLOCK            || #
 214 7a0c               # ======================================= #
 215 7a0c               ###########################################
 216 0000                       .text
 217 0000                       .align      2
 218 0000                       .globl      main
 219 0000                       .globl      get_integer
 220 0000                       .globl      get_A_cells
 221 0000                       .globl      get_B_cells
 222 0000               
 223 0000               main:       
 224 0000 23BDFFD0	        addi    $sp, $sp, -FRAMESIZE_48
 225 0004 AFBF002C	        sw      $ra, -4+FRAMESIZE_48($sp)
 226 0008                       
 227 0008 34020004	        li      $v0, PRINT_STRING                   #print banner
 228 000c 3C040000	        la      $a0, banner
     0010 34840000
 229 0014 0000000C	        syscall
 230 0018                       
 231 0018                       # ---------------------------- #
 232 0018                       #       Get user input         #
 233 0018                       # ---------------------------- #
 234 0018               
 235 0018                       # print and get board dimensions #
 236 0018               
 237 0018 34020004	        li      $v0, PRINT_STRING                    
 238 001c 3C040000	        la      $a0, enter_board_size
     0020 34840000
 239 0024 0000000C	        syscall
 240 0028                       
 241 0028 3C040000	        la      $a0, board_dim 
     002c 34840000
 242 0030 34050004	        li      $a1, 4
 243 0034 3406001E	        li      $a2, 30
 244 0038 3C070000	        la      $a3, illegal_size
     003c 34E70000
 245 0040 0C000000	        jal     get_integer
 246 0044                       
 247 0044                       # print and get generations #
 248 0044               
 249 0044 34020004	        li      $v0, PRINT_STRING                    
 250 0048 3C040000	        la      $a0, enter_generations
     004c 34840000
 251 0050 0000000C	        syscall
 252 0054                       
 253 0054 3C040000	        la      $a0, generations
     0058 34840000
 254 005c 34050000	        li      $a1, 0
 255 0060 34060014	        li      $a2, 20
 256 0064 3C070000	        la      $a3, illegal_gens
     0068 34E70000
 257 006c 0C000000	        jal     get_integer
 258 0070               
 259 0070                       # print and get A colony size #
 260 0070               
 261 0070 34020004	        li      $v0, PRINT_STRING                    
 262 0074 3C040000	        la      $a0, live_cells_A
     0078 34840000
 263 007c 0000000C	        syscall
 264 0080                       
 265 0080 3C040000	        la      $a0, A_cells
     0084 34840000
 266 0088 34050000	        li      $a1, 0
 267 008c 3C060000	        la      $a2, board_dim
     0090 34C60000
 268 0094 8CC60000	        lw      $a2, 0($a2)
 269 0098 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     009c 00003012
 270 00a0 3C070000	        la      $a3, illegal_cells
     00a4 34E70000
 271 00a8 0C000000	        jal     get_integer
 272 00ac               
 273 00ac                       # print and get A colony locations #
 274 00ac               
 275 00ac 34020004	        li      $v0, PRINT_STRING                    
 276 00b0 3C040000	        la      $a0, enter_locations
     00b4 34840000
 277 00b8 0000000C	        syscall
 278 00bc                       
 279 00bc 3C040000	        la      $a0, param_block
     00c0 34840000
 280 00c4 3C050000	        la      $a1, illegal_point
     00c8 34A50000
 281 00cc 3C060000	        la      $a2, a_coordinates_2
     00d0 34C60000
 282 00d4 0C000000	        jal     get_A_cells
 283 00d8               
 284 00d8                       # print and get B colony size #
 285 00d8               
 286 00d8 34020004	        li      $v0, PRINT_STRING                    
 287 00dc 3C040000	        la      $a0, live_cells_B
     00e0 34840000
 288 00e4 0000000C	        syscall
 289 00e8                       
 290 00e8 3C040000	        la      $a0, B_cells
     00ec 34840000
 291 00f0 34050000	        li      $a1, 0
 292 00f4 3C060000	        la      $a2, board_dim
     00f8 34C60000
 293 00fc 8CC60000	        lw      $a2, 0($a2)
 294 0100 00C60018	        mul     $a2, $a2, $a2                       #dim^2
     0104 00003012
 295 0108 3C070000	        la      $a3, illegal_cells
     010c 34E70000
 296 0110 0C000000	        jal     get_integer
 297 0114                       
 298 0114                       # print and get B colony locations #
 299 0114               
 300 0114 34020004	        li      $v0, PRINT_STRING                    
 301 0118 3C040000	        la      $a0, enter_locations
     011c 34840000
 302 0120 0000000C	        syscall
 303 0124                       
 304 0124 3C040000	        la      $a0, param_block
     0128 34840000
 305 012c 3C050000	        la      $a1, illegal_point
     0130 34A50000
 306 0134 3C060000	        la      $a2, b_coordinates_2
     0138 34C60000
 307 013c 0C000000	        jal     get_B_cells
 308 0140                       
 309 0140                       # == test input grabbing == #
 310 0140               
 311 0140 3C040000	        la      $a0, param_block
     0144 34840000
 312 0148 0C000221	        jal     debug_params
 313 014c               
 314 014c                       # == set up board == #
 315 014c               
 316 014c                       # print generation 0
 317 014c 3C040000	        la      $a0, board_1
     0150 34840000
 318 0154 0C00019C	        jal     setup_board
 319 0158 3C040000	        la      $a0, board_1
     015c 34840000
 320 0160 0C00014A	        jal     print_board
 321 0164               
 322 0164 3C040000	        la      $a0, board_2
     0168 34840000
 323 016c 0C00019C	        jal     setup_board
 324 0170 3C040000	        la      $a0, board_2
     0174 34840000
 325 0178                       #jal     print_board
 326 0178               
 327 0178 0C0001EC	        jal     get_generations
 328 017c 00402021	        move    $a0, $v0
 329 0180               
 330 0180 0C0001E8	        jal     get_board_dim
 331 0184 00402821	        move    $a1, $v0
 332 0188                       
 333 0188 0C000066	        jal     run_conway
 334 018c               
 335 018c               end_main:
 336 018c 8FBF002C	        lw      $ra, -4+FRAMESIZE_48($sp)
 337 0190 23BD0030	        addi    $sp, $sp, FRAMESIZE_48
 338 0194 03E00008	        jr      $ra
 339 0198               
 340 0198               # =========================================================
 341 0198               # Name:             run_conway
 342 0198               # =========================================================
 343 0198               # Description:      this is the main function for running
 344 0198               #                   the game of life variation
 345 0198               #                   
 346 0198               # Parameters:
 347 0198               #       a0 -        generations needed to run
 348 0198               #       a1 -        board dimension
 349 0198               #
 350 0198               # S Registers:
 351 0198               #       s0 -        the generation toggle
 352 0198               #       s1 -        gen count
 353 0198               #       s2 -        the addr of the current board
 354 0198               #       s3 -        the curr row
 355 0198               #       s4 -        the current col
 356 0198               #       s5 -        n = number of neighbors
 357 0198               #
 358 0198               # T Registers:
 359 0198               #       t1 -        row counter
 360 0198               #       t2 -        col counter
 361 0198               # =========================================================
 362 0198               
 363 0198               run_conway:
 364 0198 23BDFFE4	        addi    $sp, $sp, -REGISTERS_6
 365 019c AFBF0018	        sw      $ra, -4+REGISTERS_6($sp)
 366 01a0 AFB00014	        sw      $s0, -8+REGISTERS_6($sp)
 367 01a4 AFB10010	        sw      $s1, -12+REGISTERS_6($sp)
 368 01a8 AFB2000C	        sw      $s2, -16+REGISTERS_6($sp)
 369 01ac AFB30008	        sw      $s3, -20+REGISTERS_6($sp)
 370 01b0 AFB40004	        sw      $s4, -24+REGISTERS_6($sp)
 371 01b4 AFB50000	        sw      $s5, -28+REGISTERS_6($sp)
 372 01b8                   
 373 01b8 34100000	        li      $s0, 0                              # gen_toggle = 0
 374 01bc 00008821	        move    $s1, $zero                          # gen_count = 0
 375 01c0               
 376 01c0               conway_loop:
 377 01c0 0224482A	        slt     $t1, $s1, $a0                       # while(i < gens)
 378 01c4 11200070	        beq     $t1, $zero, conway_end              # {
 379 01c8               
 380 01c8 12000001	        beq     $s0, $zero, even_generation         #if(toggle = 0) then even;
 381 01cc 16000003	        bne     $s0, $zero, odd_generation          #else odd;
 382 01d0               
 383 01d0               even_generation:
 384 01d0 3C120000	        la      $s2, board_1
     01d4 36520000
 385 01d8 08000079	        j       start_loop
 386 01dc               odd_generation:
 387 01dc 3C120000	        la      $s2, board_2
     01e0 36520000
 388 01e4               
 389 01e4               start_loop:
 390 01e4 00009821	        move    $s3, $zero                          # row = 0
 391 01e8 0000A021	        move    $s4, $zero                          # col = 0
 392 01ec               
 393 01ec                       # for(i = 0; i < row; i++) {
 394 01ec                       
 395 01ec               even_row_loop:
 396 01ec 0265402A	        slt     $t0, $s3, $a1                       # if(row < dim)                    
 397 01f0 11000055	        beq     $t0, $zero, end_conway_loop
 398 01f4                       
 399 01f4                       # for(j = 0; j < col; j++)
 400 01f4               
 401 01f4               even_col_loop:
 402 01f4 0285402A	        slt     $t0, $s4, $a1                       #while(col < dim)
 403 01f8 11000051	        beq     $t0, $zero, even_row_end
 404 01fc               
 405 01fc                       # == store parameters == #
 406 01fc               
 407 01fc 23BDFFF8	        addi    $sp, $sp, -8
 408 0200 AFA40000	        sw      $a0, 0($sp)
 409 0204 AFA50004	        sw      $a1, 4($sp)
 410 0208               
 411 0208                       # == counting neighbors == #
 412 0208               
 413 0208 02402021	        move    $a0, $s2                            # p1 = board addr
 414 020c 02602821	        move    $a1, $s3                            # p2 = row
 415 0210 02803021	        move    $a2, $s4                            # p3 = col
 416 0214 8FA70004	        lw      $a3, 4($sp)                         # p4 = dim
 417 0218 0C0001F8	        jal     get_pos                             # get board[row][col]
 418 021c 00405821	        move    $t3, $v0
 419 0220 816B0000	        lb      $t3, 0($t3)
 420 0224               
 421 0224 340C0041	        li      $t4, 65
 422 0228 340D0042	        li      $t5, 66
 423 022c               
 424 022c                       # == set generation i - 1 == #
 425 022c               
 426 022c 12000003	        beq     $s0, $zero, set_odd_board           # if(toggle = 0)
 427 0230 3C120000	        la      $s2, board_1                        # { set odd (board 1) }
     0234 36520000
 428 0238 08000091	        j       set_prev_done
 429 023c               
 430 023c               set_odd_board:
 431 023c 3C120000	        la      $s2, board_2                        # else { set board2 }
     0240 36520000
 432 0244               
 433 0244               set_prev_done:
 434 0244 116C000F	        beq     $t3, $t4, a_neighbors               #if(baord[row][col] == 'A')
 435 0248 116D0001	        beq     $t3, $t5, b_neighbors               #if(board[row][col] == B)
 436 024c                       #TODO(how do we make it alive?)
 437 024c 080000CB	        j       even_col_end                        #else make alive?
 438 0250               
 439 0250               b_neighbors:
 440 0250 02402021	        move    $a0, $s2                            # param1 = prev_board
 441 0254 02602821	        move    $a1, $s3                            # param2 = curr row
 442 0258 02803021	        move    $a2, $s4                            # param3 = curr col
 443 025c 34070042	        li      $a3, 66                             # param4 = B
 444 0260 0C0000EB	        jal     count_neighbors
 445 0264 0040A821	        move    $s5, $v0                            # N = #B's
 446 0268               
 447 0268 02402021	        move    $a0, $s2
 448 026c 02602821	        move    $a1, $s3
 449 0270 02803021	        move    $a2, $s4
 450 0274 34070041	        li      $a3, 65                             
 451 0278 0C0000EB	        jal     count_neighbors                     # ret = #A's
 452 027c 02A2A822	        sub     $s5, $s5, $v0                       # N = Bs - As
 453 0280 080000AD	        j       live_die_logic
 454 0284                       
 455 0284               a_neighbors:
 456 0284 02402021	        move    $a0, $s2
 457 0288 02602821	        move    $a1, $s3
 458 028c 02803021	        move    $a2, $s4
 459 0290 34070041	        li      $a3, 65                             # param4 = A
 460 0294 0C0000EB	        jal     count_neighbors
 461 0298 0040A821	        move    $s5, $v0
 462 029c                       
 463 029c 02402021	        move    $a0, $s2
 464 02a0 02602821	        move    $a1, $s3
 465 02a4 02803021	        move    $a2, $s4
 466 02a8 34070042	        li      $a3, 66                             
 467 02ac 0C0000EB	        jal     count_neighbors                     # ret = #Bs
 468 02b0 02A2A822	        sub     $s5, $s5, $v0                       # N = As - Bs
 469 02b4                       #j       live_die_logic
 470 02b4               
 471 02b4                       # now do the rest of the logic #
 472 02b4               
 473 02b4               live_die_logic:
 474 02b4               
 475 02b4                       #   get generation i  #
 476 02b4               
 477 02b4 12000001	        beq     $s0, $zero, reset_to_even           #if(toggle = 0) then even;
 478 02b8 16000008	        bne     $s0, $zero, reset_to_odd            #else odd;
 479 02bc               
 480 02bc               reset_to_even:
 481 02bc 3C120000	        la      $s2, board_1
     02c0 36520000
 482 02c4 02402021	        move    $a0, $s2                            # set params for later use
 483 02c8 02602821	        move    $a1, $s3
 484 02cc 02803021	        move    $a2, $s4
 485 02d0 0C0001E8	        jal     get_board_dim
 486 02d4 00403821	        move    $a3, $v0
 487 02d8 080000BE	        j       n_lt_2
 488 02dc               reset_to_odd:
 489 02dc 3C120000	        la      $s2, board_2
     02e0 36520000
 490 02e4 02402021	        move    $a0, $s2                            #set params for later use
 491 02e8 02602821	        move    $a1, $s3
 492 02ec 02803021	        move    $a2, $s4
 493 02f0 0C0001E8	        jal     get_board_dim
 494 02f4 00403821	        move    $a3, $v0
 495 02f8               
 496 02f8               
 497 02f8               n_lt_2:
 498 02f8               
 499 02f8                       # == if N < 2 == #
 500 02f8               
 501 02f8 2AA90002	        slti    $t1, $s5, 2                       
 502 02fc 11200004	        beq     $t1, $zero, n_gt_3
 503 0300 0C0001F8	        jal     get_pos                             # get board_i[col][row]
 504 0304 34090020	        li      $t1, 32
 505 0308 A0490000	        sb      $t1, 0($v0)
 506 030c 080000CB	        j       even_col_end
 507 0310               
 508 0310               
 509 0310               n_gt_3:
 510 0310               
 511 0310                       # == if N >= 4 == #
 512 0310               
 513 0310 2AA90004	        slti    $t1, $s5, 4
 514 0314 15200004	        bne     $t1, $zero, n_2_or_3
 515 0318 0C0001F8	        jal     get_pos
 516 031c 34090020	        li      $t1, 32
 517 0320 A0490000	        sb      $t1, 0($v0)
 518 0324 080000CB	        j       even_col_end
 519 0328                       
 520 0328               n_2_or_3:
 521 0328                      
 522 0328                       # == if N == 2 or 3 == #
 523 0328                       # do nothing because the cell stays alive
 524 0328 080000CB	        j       even_col_end
 525 032c               
 526 032c               even_col_end:
 527 032c                       # restore original params #
 528 032c               
 529 032c 8FA40000	        lw      $a0, 0($sp)
 530 0330 8FA50004	        lw      $a1, 4($sp)
 531 0334 23BD0008	        addi    $sp, $sp, 8
 532 0338               
 533 0338               
 534 0338 22940001	        addi    $s4, $s4, 1                         # col++
 535 033c 0800007D	        j       even_col_loop
 536 0340               
 537 0340               even_row_end:
 538 0340 22730001	        addi    $s3, $s3, 1                         # row++
 539 0344 0800007B	        j       even_row_loop
 540 0348               
 541 0348               end_conway_loop:
 542 0348                       
 543 0348                       # == print board == #
 544 0348 23BDFFFC	        addi    $sp, $sp, -4
 545 034c AFA40000	        sw      $a0, 0($sp)
 546 0350               
 547 0350 12000003	        beq     $s0, $zero, prt_b_1
 548 0354 3C040000	        la      $a0, board_1
     0358 34840000
 549 035c 080000DA	        j       print_generation
 550 0360               
 551 0360               prt_b_1:
 552 0360 3C040000	        la      $a0, board_1
     0364 34840000
 553 0368               
 554 0368               print_generation:
 555 0368 0C00014A	        jal     print_board
 556 036c 8FA40000	        lw      $a0, 0($sp)
 557 0370 23BD0004	        addi    $sp, $sp, 4
 558 0374               
 559 0374 22310001	        addi    $s1, $s1, 1                         #gens ++
 560 0378 34010002	        rem     $s0, $s1, 2                         #toggle = gen_count % 2
     037c 0221001A
     0380 00008010
 561 0384 08000070	        j       conway_loop
 562 0388                                                                   # }
 563 0388               conway_end:
 564 0388 8FBF0018	        lw      $ra, -4+REGISTERS_6($sp)
 565 038c 8FB00014	        lw      $s0, -8+REGISTERS_6($sp)
 566 0390 8FB10010	        lw      $s1, -12+REGISTERS_6($sp)
 567 0394 8FB2000C	        lw      $s2, -16+REGISTERS_6($sp)
 568 0398 8FB30008	        lw      $s3, -20+REGISTERS_6($sp)
 569 039c 8FB40004	        lw      $s4, -24+REGISTERS_6($sp)
 570 03a0 8FB50000	        lw      $s5, -28+REGISTERS_6($sp)
 571 03a4 23BD001C	        addi    $sp, $sp, REGISTERS_6
 572 03a8 03E00008	        jr      $ra
 573 03ac               
 574 03ac               # =========================================================
 575 03ac               # Name:             count_neighbors
 576 03ac               # =========================================================
 577 03ac               # Description:      count neihbors of cell (a2, a1) that
 578 03ac               #                   are 'A's
 579 03ac               #                   
 580 03ac               # Parameters:
 581 03ac               #       a0 -        the addr of the board to check
 582 03ac               #       a1 -        row number
 583 03ac               #       a2 -        col number
 584 03ac               #       a3 -        char to check against
 585 03ac               #
 586 03ac               # S Registers:
 587 03ac               #       s0 -        the board dim
 588 03ac               #       s1 -        the current row
 589 03ac               #       s2 -        the current col
 590 03ac               #       s3 -        the char to check against
 591 03ac               #       s4 -        the count
 592 03ac               #       s5 -        the opposite char
 593 03ac               #
 594 03ac               # T Registers:
 595 03ac               #       t1 -        bot
 596 03ac               #       t2 -        top 
 597 03ac               #       t3 -        left
 598 03ac               #       t4 -        right
 599 03ac               #
 600 03ac               # =========================================================
 601 03ac               
 602 03ac               count_neighbors:
 603 03ac 23BDFFE4	        addi    $sp, $sp, -REGISTERS_6
 604 03b0 AFBF0018	        sw      $ra, -4+REGISTERS_6($sp)
 605 03b4 AFB00014	        sw      $s0, -8+REGISTERS_6($sp)
 606 03b8 AFB10010	        sw      $s1, -12+REGISTERS_6($sp)
 607 03bc AFB2000C	        sw      $s2, -16+REGISTERS_6($sp)
 608 03c0 AFB30008	        sw      $s3, -20+REGISTERS_6($sp)
 609 03c4 AFB40004	        sw      $s4, -24+REGISTERS_6($sp)
 610 03c8 AFB50000	        sw      $s5, -28+REGISTERS_6($sp)
 611 03cc               
 612 03cc 0C0001E8	        jal     get_board_dim
 613 03d0 00408021	        move    $s0, $v0
 614 03d4               
 615 03d4 0000C021	        move    $t8, $zero
 616 03d8               
 617 03d8 00A08821	        move    $s1, $a1
 618 03dc 00C09021	        move    $s2, $a2
 619 03e0 00E09821	        move    $s3, $a3
 620 03e4 0000A021	        move    $s4, $zero                          #count = 0
 621 03e8               
 622 03e8 34090041	        li      $t1, 65
 623 03ec 12690002	        beq     $s3, $t1, opp_is_B                  # if(char == A) {
 624 03f0 34150041	        li      $s5, 65                             # opp == B
 625 03f4 080000FF	        j       start_count                         # } else {
 626 03f8               
 627 03f8               opp_is_B:                               
 628 03f8 34150042	        li      $s5, 66                             # opp == A }
 629 03fc               
 630 03fc               start_count: 
 631 03fc 20A9FFFF	        addi    $t1, $a1, -1                        # bot = row - 1
 632 0400 20AA0001	        addi    $t2, $a1, 1                         # top = row + 1
 633 0404 20CBFFFF	        addi    $t3, $a2, -1                        # lft = col - 1
 634 0408 20CC0001	        addi    $t4, $a2, 1                         # rht = col + 1
 635 040c               
 636 040c                       # if(bot < 0) bot = dim - 1 #
 637 040c 0120C82A	        slt     $t9, $t1, $zero
 638 0410 13200001	        beq     $t9, $zero, check_top
 639 0414 2209FFFF	        addi    $t1, $s0, -1
 640 0418               
 641 0418               check_top:
 642 0418 0150C82A	        slt     $t9, $t2, $s0                       
 643 041c 17200001	        bne     $t9, $zero, check_left              # if(top < dim) skip wrap
 644 0420 00005021	        move    $t2, $zero
 645 0424               
 646 0424               check_left:
 647 0424 0160C82A	        slt     $t9, $t3, $zero
 648 0428 13200001	        beq     $t9, $zero, check_right
 649 042c 220BFFFF	        addi    $t3, $s0, -1
 650 0430               
 651 0430               check_right:
 652 0430 0190C82A	        slt     $t9, $t4, $s0
 653 0434 17200001	        bne     $t9, $zero, validate_nbrs
 654 0438 00006021	        move    $t4, $zero
 655 043c               
 656 043c               validate_nbrs:
 657 043c               
 658 043c 02003821	        move    $a3, $s0                            # param 4 = dim
 659 0440                       # == check above == #
 660 0440 01202821	        move    $a1, $t1
 661 0444 02403021	        move    $a2, $s2
 662 0448 0C0001F8	        jal     get_pos                             # get (col, top)
 663 044c 80420000	        lb      $v0, 0($v0)
 664 0450                       
 665 0450 14530001	        bne     $v0, $s3, cmp_bot
 666 0454 23180001	        addi    $t8, $t8, 1
 667 0458                       
 668 0458               cmp_bot:
 669 0458                       # == check below== #
 670 0458 01402821	        move    $a1, $t2
 671 045c 02403021	        move    $a2, $s2
 672 0460 0C0001F8	        jal     get_pos                             #get board[col][bot]
 673 0464 80420000	        lb      $v0, 0($v0)
 674 0468               
 675 0468 14530001	        bne     $v0, $s3, cmp_left
 676 046c 23180001	        addi    $t8, $t8, 1
 677 0470               
 678 0470               cmp_left:
 679 0470                       # == check left == #
 680 0470 02202821	        move    $a1, $s1
 681 0474 01603021	        move    $a2, $t3
 682 0478 0C0001F8	        jal     get_pos
 683 047c 80420000	        lb      $v0, 0($v0)                         #get board[lft][row]
 684 0480               
 685 0480 14530001	        bne     $v0, $s3, cmp_right
 686 0484 23180001	        addi    $t8, $t8, 1
 687 0488               
 688 0488               cmp_right:
 689 0488                       # == check right == #
 690 0488 02202821	        move    $a1, $s1
 691 048c 01803021	        move    $a2, $t4
 692 0490 0C0001F8	        jal     get_pos
 693 0494 80420000	        lb      $v0, 0($v0)                         #get board[rht][row]
 694 0498               
 695 0498 14530001	        bne     $v0, $s3, cmp_top_left
 696 049c 23180001	        addi    $t8, $t8, 1
 697 04a0               
 698 04a0               cmp_top_left:
 699 04a0 01202821	        move    $a1, $t1                            #top
 700 04a4 01603021	        move    $a2, $t3                            #left
 701 04a8 0C0001F8	        jal     get_pos
 702 04ac 80420000	        lb      $v0, 0($v0)                         #get board[left][top]
 703 04b0               
 704 04b0 14530001	        bne     $v0, $s3, cmp_top_right
 705 04b4 23180001	        addi    $t8, $t8, 1
 706 04b8               
 707 04b8               cmp_top_right:
 708 04b8 01202821	        move    $a1, $t1                            #top
 709 04bc 01803021	        move    $a2, $t4                            #right
 710 04c0 0C0001F8	        jal     get_pos
 711 04c4 80420000	        lb      $v0, 0($v0)                         #get board[right][top]
 712 04c8               
 713 04c8 14530001	        bne     $v0, $s3, cmp_bot_left
 714 04cc 23180001	        addi    $t8, $t8, 1
 715 04d0               
 716 04d0               cmp_bot_left:
 717 04d0 01402821	        move    $a1, $t2                            #bot
 718 04d4 01603021	        move    $a2, $t3                            #left
 719 04d8 0C0001F8	        jal     get_pos
 720 04dc 80420000	        lb      $v0, 0($v0)                         #get board[left][bot]
 721 04e0               
 722 04e0 14530001	        bne     $v0, $s3, cmp_bot_right
 723 04e4 23180001	        addi    $t8, $t8, 1
 724 04e8               
 725 04e8               cmp_bot_right:
 726 04e8 01402821	        move    $a1, $t2                            #bot
 727 04ec 01803021	        move    $a2, $t4                            #right
 728 04f0 0C0001F8	        jal     get_pos
 729 04f4 80420000	        lb      $v0, 0($v0)                         #get board[right][bot]
 730 04f8               
 731 04f8 14530001	        bne     $v0, $s3, count_neighbors_end
 732 04fc 23180001	        addi    $t8, $t8, 1
 733 0500               
 734 0500               count_neighbors_end:
 735 0500               
 736 0500 03001021	        move    $v0, $t8    
 737 0504                   
 738 0504 8FBF0018	        lw      $ra, -4+REGISTERS_6($sp)
 739 0508 8FB00014	        lw      $s0, -8+REGISTERS_6($sp)
 740 050c 8FB10010	        lw      $s1, -12+REGISTERS_6($sp)
 741 0510 8FB2000C	        lw      $s2, -16+REGISTERS_6($sp)
 742 0514 8FB30008	        lw      $s3, -20+REGISTERS_6($sp)
 743 0518 8FB40004	        lw      $s4, -24+REGISTERS_6($sp)
 744 051c 8FB50000	        lw      $s5, -28+REGISTERS_6($sp)
 745 0520 23BD001C	        addi    $sp, $sp, REGISTERS_6
 746 0524 03E00008	        jr      $ra
 747 0528               
 748 0528               # =========================================================
 749 0528               # Name:             print_board 
 750 0528               # =========================================================
 751 0528               # Description:      print the board as a 2D array
 752 0528               #                   
 753 0528               # Parameters:
 754 0528               #       a0 -        the addr of the board to print
 755 0528               #
 756 0528               # Parameters:
 757 0528               #       s0 -        the dim of the board
 758 0528               #       s1 -        the pointer to the row to print
 759 0528               #       s2 -        the addr ofthe array
 760 0528               #
 761 0528               # T Registers:
 762 0528               #       t0 -        row loop flag
 763 0528               #       t1 -        row loop counter
 764 0528               #       t2 -        col loop counter
 765 0528               #       t3 -        pointer for col in row / banner counter
 766 0528               #       t4 -        column loop flag
 767 0528               #
 768 0528               # =========================================================
 769 0528               
 770 0528               print_board: 
 771 0528 23BDFFF0	        addi    $sp, $sp, -16 
 772 052c AFBF000C	        sw      $ra, 12($sp)
 773 0530 AFB00008	        sw      $s0, 8($sp)
 774 0534 AFB10004	        sw      $s1, 4($sp)
 775 0538 8FB20000	        lw      $s2, 0($sp)
 776 053c               
 777 053c 00808821	        move     $s1, $a0 
 778 0540 00809021	        move     $s2, $a0 
 779 0544               
 780 0544                       # print top of board #
 781 0544               
 782 0544 0C000180	        jal     print_top_bottom
 783 0548               
 784 0548                       # get board dim #
 785 0548               
 786 0548 0C0001E8	        jal     get_board_dim
 787 054c 00408021	        move    $s0, $v0
 788 0550               
 789 0550                       # calculate row to start at#
 790 0550               
 791 0550 2209FFFF	        addi    $t1, $s0, -1                        # row = dim - 1
 792 0554 00005021	        move    $t2, $zero                          # col = 0
 793 0558               
 794 0558                       
 795 0558               print_row_loop:
 796 0558 0120402A	        slt     $t0, $t1, $zero                     #while(row >= 0)
 797 055c 15000021	        bne     $t0, $zero, print_board_end 
 798 0560 3C040000	        la      $a0, bar                            #print("|")
     0564 34840000
 799 0568 34020004	        li      $v0, PRINT_STRING 
 800 056c 0000000C	        syscall
 801 0570               
 802 0570                       # calculate row address #
 803 0570 34010001	        mul     $s1, $s0, 1                         # len_c = size(char) * dim
     0574 02010018
     0578 00008812
 804 057c 02290018	        mul     $s1, $s1, $t1                       # offset = len_c * row
     0580 00008812
 805 0584 02518820	        add     $s1, $s2, $s1                       # r_addr = base + offset
 806 0588                       
 807 0588               print_col_loop:
 808 0588 0150602A	        slt     $t4, $t2, $s0                       #while(col < dim)
 809 058c 1180000A	        beq     $t4, $zero, end_col_loop
 810 0590               
 811 0590 02205821	        move    $t3, $s1                            #load addr of arr[row][0]
 812 0594               
 813 0594 34010001	        mul     $t5, $t2, 1                         #sizeof(char)*col_index
     0598 01410018
     059c 00006812
 814 05a0 016D5820	        add     $t3, $t3, $t5                       #row base + offset
 815 05a4               
 816 05a4 81640000	        lb      $a0, 0($t3)
 817 05a8 3402000B	        li      $v0, PRINT_CHAR
 818 05ac 0000000C	        syscall                                     #print(arr[row][col])
 819 05b0                       
 820 05b0 214A0001	        addi    $t2, $t2, 1                         #col++
 821 05b4 08000162	        j       print_col_loop
 822 05b8               
 823 05b8               end_col_loop:
 824 05b8                       
 825 05b8 3C040000	        la      $a0, bar                            #print("|")
     05bc 34840000
 826 05c0 34020004	        li      $v0, PRINT_STRING 
 827 05c4 0000000C	        syscall
 828 05c8               
 829 05c8 3C040000	        la      $a0, newline                       #print("\n")
     05cc 34840000
 830 05d0 34020004	        li      $v0, PRINT_STRING 
 831 05d4 0000000C	        syscall
 832 05d8                       
 833 05d8 00005021	        move    $t2, $zero                          # col = 0
 834 05dc 2129FFFF	        addi    $t1, $t1, -1                        # row--
 835 05e0 08000156	        j       print_row_loop
 836 05e4               
 837 05e4               
 838 05e4               print_board_end:
 839 05e4 0C000180	        jal     print_top_bottom                    #print bottom board
 840 05e8               
 841 05e8 8FBF000C	        lw      $ra, 12($sp)
 842 05ec 8FB00008	        lw      $s0, 8($sp)
 843 05f0 8FB10004	        lw      $s1, 4($sp)
 844 05f4 8FB20000	        lw      $s2, 0($sp)
 845 05f8 23BD0010	        addi    $sp, $sp, 16
 846 05fc 03E00008	        jr      $ra
 847 0600               
 848 0600               # =========================================================
 849 0600               # Name:             print_top_bottom
 850 0600               # =========================================================
 851 0600               # Description:      this prints the top banner of the board
 852 0600               #
 853 0600               # T Registers:
 854 0600               #       t0  -       loop counter
 855 0600               #       t1  -       board dimension
 856 0600               # =========================================================
 857 0600               
 858 0600               print_top_bottom:
 859 0600 23BDFFFC	        addi    $sp, $sp, -4
 860 0604 AFBF0000	        sw      $ra, 0($sp)
 861 0608               
 862 0608                       
 863 0608 0C0001E8	        jal     get_board_dim
 864 060c 00404821	        move    $t1, $v0
 865 0610               
 866 0610 3C040000	        la      $a0, plus                           #print("+")
     0614 34840000
 867 0618 34020004	        li      $v0, PRINT_STRING 
 868 061c 0000000C	        syscall
 869 0620               
 870 0620 00004021	        move    $t0, $zero
 871 0624                       
 872 0624               tb_loop:
 873 0624 0109582A	        slt     $t3, $t0, $t1                       #while(i < dim)
 874 0628 11600006	        beq     $t3, $zero, tb_end
 875 062c               
 876 062c 3C040000	        la      $a0, minus                          #print("-")
     0630 34840000
 877 0634 34020004	        li      $v0, PRINT_STRING 
 878 0638 0000000C	        syscall
 879 063c                       
 880 063c 21080001	        addi    $t0, $t0, 1
 881 0640 08000189	        j       tb_loop
 882 0644               tb_end:
 883 0644               
 884 0644 3C040000	        la      $a0, plus                           #print("+")
     0648 34840000
 885 064c 34020004	        li      $v0, PRINT_STRING 
 886 0650 0000000C	        syscall
 887 0654               
 888 0654 3C040000	        la      $a0, newline                        #print("\n")
     0658 34840000
 889 065c 34020004	        li      $v0, PRINT_STRING 
 890 0660 0000000C	        syscall
 891 0664                       
 892 0664 8FBF0000	        lw      $ra, 0($sp)
 893 0668 23BD0004	        addi    $sp, $sp, 4
 894 066c 03E00008	        jr      $ra
 895 0670               
 896 0670               
 897 0670               # =========================================================
 898 0670               # Name:             setup_board
 899 0670               # =========================================================
 900 0670               # Description:      this fills the spots in the array with 
 901 0670               #                   either an "A", "B", or " "(space)
 902 0670               #
 903 0670               # Parameters:
 904 0670               #       - a0        location of board to set up
 905 0670               # S Registers:
 906 0670               #       - s0        the board dimension
 907 0670               #       - s1        the pointer to pos in 2d array
 908 0670               #       - s2        the addr of the end 2d array
 909 0670               #
 910 0670               # T Registers:
 911 0670               #       - t2        addr of a_coordinates
 912 0670               #       - t3        addr of b_coordinates
 913 0670               #       - t9        pointer to curr in array
 914 0670               # =========================================================
 915 0670               
 916 0670               setup_board:
 917 0670 23BDFFF0	        addi    $sp, $sp, -16
 918 0674 AFBF000C	        sw      $ra, 12($sp)
 919 0678 AFB00008	        sw      $s0, 8($sp)
 920 067c AFB10004	        sw      $s1, 4($sp)
 921 0680 AFB20000	        sw      $s2, 0($sp)
 922 0684               
 923 0684 0C0001E8	        jal     get_board_dim                       #get board dim
 924 0688 00408021	        move    $s0, $v0
 925 068c 00808821	        move    $s1, $a0
 926 0690                   
 927 0690 02100018	        mul     $t0, $s0, $s0                       #dim^2
     0694 00004012
 928 0698 01119020	        add     $s2, $t0, $s1                       #pointer to end of array
 929 069c               
 930 069c 34090020	        li      $t1, 32                             #t1 = ascii " "
 931 06a0               
 932 06a0               load_blanks:
 933 06a0 0251402A	        slt     $t0, $s2, $s1                       # i == dim; break
 934 06a4 15000003	        bne     $t0, $zero, fill_array
 935 06a8                       
 936 06a8 A2290000	        sb      $t1, 0($s1)                         #arr[i] = ' ';
 937 06ac               
 938 06ac 22310001	        addi    $s1, $s1, 1                         #i++
 939 06b0 080001A8	        j       load_blanks
 940 06b4               
 941 06b4               fill_array:
 942 06b4 0C0001B4	        jal     fill_positions
 943 06b8                       
 944 06b8               
 945 06b8               setup_end:
 946 06b8 8FBF000C	        lw      $ra, 12($sp)
 947 06bc 8FB00008	        lw      $s0, 8($sp)
 948 06c0 8FB10004	        lw      $s1, 4($sp)
 949 06c4 8FB20000	        lw      $s2, 0($sp)
 950 06c8 23BD0010	        addi    $sp, $sp, 16
 951 06cc 03E00008	        jr      $ra
 952 06d0               
 953 06d0               
 954 06d0               # =========================================================
 955 06d0               # Name:             fill_positions
 956 06d0               # =========================================================
 957 06d0               # Description:      this function takes the given board 
 958 06d0               #                   passed in through a0 and fills it
 959 06d0               #                   with positions from the a_coordinate
 960 06d0               #                   and b_coordinate arrays
 961 06d0               #
 962 06d0               # Parameters:
 963 06d0               #       - a0        location of board to set up
 964 06d0               #
 965 06d0               # S Registers:
 966 06d0               #       - s0        number of values in a/b
 967 06d0               #       - s1        current array (a or b)
 968 06d0               #       - s2        board dimensions
 969 06d0               #       - s3        current ascii value
 970 06d0               #
 971 06d0               # T Registers:
 972 06d0               #       - t0        location of the a coordinate array
 973 06d0               #       - t2        pointer to board[row][col]
 974 06d0               #       - t3        x coordinate from array
 975 06d0               #       - t4        y coordinate from array
 976 06d0               # =========================================================
 977 06d0               
 978 06d0               fill_positions:
 979 06d0 23BDFFE8	        addi    $sp, $sp, -REGISTERS_5
 980 06d4 AFBF0014	        sw      $ra, -4+REGISTERS_5($sp)
 981 06d8 AFB00010	        sw      $s0, -8+REGISTERS_5($sp)
 982 06dc AFB1000C	        sw      $s1, -12+REGISTERS_5($sp)
 983 06e0 AFB20008	        sw      $s2, -16+REGISTERS_5($sp)
 984 06e4 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
 985 06e8 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
 986 06ec               
 987 06ec 0C0001E8	        jal     get_board_dim
 988 06f0 00409021	        move    $s2, $v0
 989 06f4                   
 990 06f4 0C0001F0	        jal     get_a
 991 06f8 00408021	        move    $s0, $v0
 992 06fc               
 993 06fc 3C110000	        la      $s1, a_coordinates
     0700 36310000
 994 0704 34130041	        li      $s3, 65
 995 0708                       
 996 0708 00805021	        move    $t2, $a0                            # pointer to boar_arr[0]
 997 070c 0000C821	        move    $t9, $zero                          # i = 0
 998 0710               
 999 0710               fill_a:
1000 0710 0330C02A	        slt     $t8, $t9, $s0                       # while(i < a_size)
1001 0714 13000009	        beq     $t8, $zero, fill_a_end
1002 0718                       
1003 0718                       # add values into 2d board
1004 0718               
1005 0718 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
1006 071c 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
1007 0720 02403821	        move    $a3, $s2                            # get dim of board
1008 0724                       
1009 0724 0C0001F8	        jal     get_pos
1010 0728                       
1011 0728 A0530000	        sb      $s3, 0($v0)      
1012 072c                       
1013 072c 23390001	        addi    $t9, $t9, 1                         # i++
1014 0730 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
1015 0734 00805021	        move    $t2, $a0
1016 0738 080001C4	        j       fill_a
1017 073c               
1018 073c               fill_a_end:
1019 073c               
1020 073c 0C0001F4	        jal     get_b           
1021 0740 00408021	        move    $s0, $v0                            # get b address
1022 0744 3C110000	        la      $s1, b_coordinates                  # get base of b_arr
     0748 36310000
1023 074c 34130042	        li      $s3, 66                             # ascii 'B'
1024 0750 0000C821	        move    $t9, $zero                          # i = 0
1025 0754               
1026 0754               fill_b:
1027 0754 0330C02A	        slt     $t8, $t9, $s0                       # while(i < b_size)
1028 0758 13000009	        beq     $t8, $zero, fill_positions_end
1029 075c                       
1030 075c                       # add values into 2d board
1031 075c               
1032 075c 8E250000	        lw      $a1, 0($s1)                         # get row coordinate
1033 0760 8E260004	        lw      $a2, 4($s1)                         # get col coordinate
1034 0764 02403821	        move    $a3, $s2                            # get dim of board
1035 0768                       
1036 0768 0C0001F8	        jal     get_pos
1037 076c                       
1038 076c A0530000	        sb      $s3, 0($v0)      
1039 0770                       
1040 0770 23390001	        addi    $t9, $t9, 1                         # i++
1041 0774 22310008	        addi    $s1, $s1, 8                         # update a_coordinates[i]
1042 0778 00805021	        move    $t2, $a0
1043 077c 080001D5	        j       fill_b
1044 0780               
1045 0780               fill_positions_end:
1046 0780               
1047 0780 8FBF0014	        lw      $ra, -4+REGISTERS_5($sp)
1048 0784 8FB00010	        lw      $s0, -8+REGISTERS_5($sp)
1049 0788 8FB1000C	        lw      $s1, -12+REGISTERS_5($sp)
1050 078c 8FB20008	        lw      $s2, -16+REGISTERS_5($sp)
1051 0790 AFB30004	        sw      $s3, -20+REGISTERS_5($sp)
1052 0794 AFB40000	        sw      $s4, -24+REGISTERS_5($sp)
1053 0798 23BD0018	        addi    $sp, $sp, REGISTERS_5
1054 079c 03E00008	        jr      $ra
1055 07a0               
1056 07a0               ###########################################
1057 07a0               # ======================================= #
1058 07a0               # ||        Helper Code                || #
1059 07a0               # ======================================= #
1060 07a0               ###########################################
1061 07a0               
1062 07a0               get_board_dim:
1063 07a0 3C080000	        la      $t0, board_dim
     07a4 35080000
1064 07a8 8D020000	        lw      $v0, 0($t0)
1065 07ac 03E00008	        jr      $ra
1066 07b0               
1067 07b0               get_generations:
1068 07b0 3C080000	        la      $t0, generations
     07b4 35080000
1069 07b8 8D020000	        lw      $v0, 0($t0)
1070 07bc 03E00008	        jr      $ra
1071 07c0               
1072 07c0               get_a:
1073 07c0 3C080000	        la      $t0, A_cells
     07c4 35080000
1074 07c8 8D020000	        lw      $v0, 0($t0)
1075 07cc 03E00008	        jr      $ra
1076 07d0               
1077 07d0               get_b:
1078 07d0 3C080000	        la      $t0, B_cells
     07d4 35080000
1079 07d8 8D020000	        lw      $v0, 0($t0)
1080 07dc 03E00008	        jr      $ra
1081 07e0               
1082 07e0               # =========================================================
1083 07e0               # Name:             get_pos
1084 07e0               # =========================================================
1085 07e0               # Description:      gets the addr of board[row][col] in 
1086 07e0               #                   the given array
1087 07e0               #
1088 07e0               # Parameters:
1089 07e0               #       a0 -        the location of array to access
1090 07e0               #       a1 -        the row value
1091 07e0               #       a2 -        the col value
1092 07e0               #       a3 -        the dim of the board
1093 07e0               #
1094 07e0               # Returns:
1095 07e0               #       v0 - the addr of board[row][col]
1096 07e0               #     
1097 07e0               # =========================================================
1098 07e0               
1099 07e0               get_pos:
1100 07e0               
1101 07e0                       # calculate row address #
1102 07e0               
1103 07e0 34010001	        mul     $v0, $a3, 1                         # len_c = size(char) * dim
     07e4 00E10018
     07e8 00001012
1104 07ec 00450018	        mul     $v0, $v0, $a1                       # roffset = len_c * row
     07f0 00001012
1105 07f4 00821020	        add     $v0, $a0, $v0                      # r_addr = base + roffset
1106 07f8                       
1107 07f8                       # calculate column address #
1108 07f8               
1109 07f8 00461020	        add     $v0, $v0, $a2                       # addr = r_addr + col
1110 07fc                       
1111 07fc 03E00008	        jr      $ra
1112 0800                       
1113 0800               
1114 0800               # =========================================================
1115 0800               # Name:             print_locations
1116 0800               # =========================================================
1117 0800               # Description:      prints an array of location "structs"
1118 0800               #                   each structure is 8 bytes long where:
1119 0800               #                       - 0 -> x coordinate
1120 0800               #                       - 4 offset -> y coordinate
1121 0800               #
1122 0800               # Parameters:
1123 0800               #       a0 -        the location of array to print
1124 0800               #       a1 -        the size of the array
1125 0800               #
1126 0800               # T Registers:
1127 0800               #       t0 -        loop counter
1128 0800               #     
1129 0800               # =========================================================
1130 0800               
1131 0800               print_locations:
1132 0800 34080000	        li      $t0, 0                              # i == 0
1133 0804 00804821	        move    $t1, $a0                            # pointer
1134 0808               
1135 0808               print_loop:
1136 0808 11050019	        beq     $t0, $a1, print_done                #done if i == n 
1137 080c               
1138 080c 3C040000	        la      $a0, newline
     0810 34840000
1139 0814 34020004	        li      $v0, PRINT_STRING                   #print \n
1140 0818 0000000C	        syscall
1141 081c                       
1142 081c 3C040000	        la      $a0, lp
     0820 34840000
1143 0824 34020004	        li      $v0, PRINT_STRING                   #print (
1144 0828 0000000C	        syscall
1145 082c                       
1146 082c 8D240000	        lw      $a0, 0($t1)                         #get a[i].x
1147 0830 34020001	        li      $v0, PRINT_INT
1148 0834 0000000C	        syscall                                     #print a[i].x
1149 0838               
1150 0838 3C040000	        la      $a0, comma
     083c 34840000
1151 0840 34020004	        li      $v0, PRINT_STRING                   #print ,
1152 0844 0000000C	        syscall
1153 0848                       
1154 0848 8D240004	        lw      $a0, 4($t1)                         #get a[i].y
1155 084c 34020001	        li      $v0, PRINT_INT
1156 0850 0000000C	        syscall                                     #print a[i].y
1157 0854                       
1158 0854 3C040000	        la      $a0, rp
     0858 34840000
1159 085c 34020004	        li      $v0, PRINT_STRING                   #print )
1160 0860 0000000C	        syscall
1161 0864                       
1162 0864 21290008	        addi    $t1, $t1, 8                         #update pointer
1163 0868 21080001	        addi    $t0, $t0, 1                         #i++
1164 086c 08000202	        j       print_loop
1165 0870               
1166 0870               print_done:
1167 0870 3C040000	        la      $a0, newline
     0874 34840000
1168 0878 34020004	        li      $v0, PRINT_STRING
1169 087c 0000000C	        syscall
1170 0880                       
1171 0880 03E00008	        jr      $ra
1172 0884               
1173 0884               # =========================================================
1174 0884               # Name:             debug_params
1175 0884               # =========================================================
1176 0884               # Description:      print the inputs in the param block
1177 0884               #
1178 0884               # Parameters:
1179 0884               #       a0 -        the parameter block
1180 0884               # S Registers:
1181 0884               #       s0 -        the saved parameter block
1182 0884               # =========================================================
1183 0884               
1184 0884               debug_params:
1185 0884                       
1186 0884 23BDFFF8	        addi    $sp, $sp, -8
1187 0888 AFBF0004	        sw      $ra, 4($sp)
1188 088c AFB00000	        sw      $s0, 0($sp)
1189 0890                       
1190 0890 00808021	        move    $s0, $a0                            #save param block
1191 0894               
1192 0894                       # print board dimensions #
1193 0894               
1194 0894 34020004	        li      $v0, PRINT_STRING
1195 0898 3C040000	        la      $a0, d_dim
     089c 34840000
1196 08a0 0000000C	        syscall
1197 08a4               
1198 08a4 0C0001E8	        jal     get_board_dim                       #get the value of board dim
1199 08a8 00402021	        move    $a0, $v0
1200 08ac 34020001	        li      $v0, PRINT_INT                      #print board dim
1201 08b0 0000000C	        syscall
1202 08b4               
1203 08b4                       # print generations #
1204 08b4               
1205 08b4 34020004	        li      $v0, PRINT_STRING
1206 08b8 3C040000	        la      $a0, d_gen
     08bc 34840000
1207 08c0 0000000C	        syscall
1208 08c4 0C0001EC	        jal     get_generations                     #value of generations
1209 08c8 00402021	        move    $a0, $v0
1210 08cc 34020001	        li      $v0, PRINT_INT                      #print generations
1211 08d0 0000000C	        syscall
1212 08d4               
1213 08d4                       # print colony A size #
1214 08d4               
1215 08d4 34020004	        li      $v0, PRINT_STRING
1216 08d8 3C040000	        la      $a0, d_a_cells
     08dc 34840000
1217 08e0 0000000C	        syscall
1218 08e4 0C0001F0	        jal     get_a                               #get size a
1219 08e8 00402021	        move    $a0, $v0
1220 08ec 34020001	        li      $v0, PRINT_INT                      #print size of a
1221 08f0 0000000C	        syscall
1222 08f4               
1223 08f4                       # print locations #
1224 08f4 34020004	        li      $v0, PRINT_STRING
1225 08f8 3C040000	        la      $a0, d_a_loc
     08fc 34840000
1226 0900 0000000C	        syscall
1227 0904               
1228 0904 3C040000	        la      $a0, a_coordinates
     0908 34840000
1229 090c 0C0001F0	        jal     get_a                               #get size a
1230 0910 00402821	        move    $a1, $v0
1231 0914 0C000200	        jal     print_locations
1232 0918               
1233 0918               
1234 0918                       # print colony B size#
1235 0918               
1236 0918 34020004	        li      $v0, PRINT_STRING
1237 091c 3C040000	        la      $a0, d_b_cells
     0920 34840000
1238 0924 0000000C	        syscall
1239 0928 0C0001F4	        jal     get_b                               #get size b
1240 092c 00402021	        move    $a0, $v0
1241 0930 34020001	        li      $v0, PRINT_INT                      #print it
1242 0934 0000000C	        syscall
1243 0938               
1244 0938                       # print locations#
1245 0938 34020004	        li      $v0, PRINT_STRING
1246 093c 3C040000	        la      $a0, d_b_loc
     0940 34840000
1247 0944 0000000C	        syscall
1248 0948               
1249 0948 3C040000	        la      $a0, b_coordinates                  #get addr of arr
     094c 34840000
1250 0950 0C0001F4	        jal     get_b                               #get size b
1251 0954 00402821	        move    $a1, $v0
1252 0958 0C000200	        jal     print_locations
1253 095c               
1254 095c 34020004	        li      $v0, PRINT_STRING
1255 0960 3C040000	        la      $a0, newline
     0964 34840000
1256 0968 0000000C	        syscall
1257 096c                       
1258 096c 8FBF0004	        lw      $ra, 4($sp)
1259 0970 8FB00000	        lw      $s0, 0($sp)
1260 0974 23BD0008	        addi    $sp, $sp, 8
1261 0978 03E00008	        jr      $ra
1262 097c               


A                      00000247 R  data 
A_ARRAY_OFFSET       = 00000018   
A_OFFSET             = 00000008   
A_cells                00000254 R  data 
B                      00000249 R  data 
B_ARRAY_OFFSET       = 0000001C   
B_OFFSET             = 0000000C   
B_cells                00000258 R  data 
DIM_OFFSET           = 00000000   
FRAMESIZE_48         = 00000030   
GEN_OFFSET           = 00000004   
NEXT_A_OFFSET        = 00000010   
NEXT_B_OFFSET        = 00000014   
PRINT_CHAR           = 0000000B   
PRINT_INT            = 00000001   
PRINT_STRING         = 00000004   
READ_INT             = 00000005   
READ_STRING          = 00000008   
REGISTERS_2          = 0000000C   
REGISTERS_3          = 00000010   
REGISTERS_4          = 00000014   
REGISTERS_5          = 00000018   
REGISTERS_6          = 0000001C   
REGISTER_1           = 00000008   
a_coordinates          00000260 R  data 
a_coordinates_2        000041CC R  data 
a_neighbors            00000284 R  text 
a_next                 0000025C R  data 
b_coordinates          00001E84 R  data 
b_coordinates_2        00005DEC R  data 
b_neighbors            00000250 R  text 
b_next                 00001E80 R  data 
banner                 000000AD R  data 
bar                    00000245 R  data 
board_1                00003AC4 R  data 
board_2                00003E48 R  data 
board_dim              0000024C R  data 
check_left             00000424 R  text 
check_right            00000430 R  text 
check_top              00000418 R  text 
cmp_bot                00000458 R  text 
cmp_bot_left           000004D0 R  text 
cmp_bot_right          000004E8 R  text 
cmp_left               00000470 R  text 
cmp_right              00000488 R  text 
cmp_top_left           000004A0 R  text 
cmp_top_right          000004B8 R  text 
comma                  0000023C R  data 
conway_end             00000388 R  text 
conway_loop            000001C0 R  text 
count_neighbors        000003AC R  text 
count_neighbors_end    00000500 R  text 
d_a_cells              000001F0 R  data 
d_a_loc                00000216 R  data 
d_b_cells              00000203 R  data 
d_b_loc                00000228 R  data 
d_dim                  000001CB R  data 
d_gen                  000001E0 R  data 
debug_params           00000884 R  text 
end_col_loop           000005B8 R  text 
end_conway_loop        00000348 R  text 
end_main               0000018C R  text 
enter_board_size       00000000 R  data 
enter_generations      00000014 R  data 
enter_locations        00000090 R  data 
even_col_end           0000032C R  text 
even_col_loop          000001F4 R  text 
even_generation        000001D0 R  text 
even_row_end           00000340 R  text 
even_row_loop          000001EC R  text 
fill_a                 00000710 R  text 
fill_a_end             0000073C R  text 
fill_array             000006B4 R  text 
fill_b                 00000754 R  text 
fill_positions         000006D0 R  text 
fill_positions_end     00000780 R  text 
gen_banner_end         00000108 R  data 
gen_banner_start       000000F4 R  data 
generations            00000250 R  data 
get_A_cells            ******** XG
get_B_cells            ******** XG
get_a                  000007C0 R  text 
get_b                  000007D0 R  text 
get_board_dim          000007A0 R  text 
get_generations        000007B0 R  text 
get_integer            ******** XG
get_pos                000007E0 R  text 
illegal_cells          00000175 R  data 
illegal_gens           00000140 R  data 
illegal_point          000001A9 R  data 
illegal_size           00000116 R  data 
live_cells_A           0000003A R  data 
live_cells_B           00000065 R  data 
live_die_logic         000002B4 R  text 
load_blanks            000006A0 R  text 
lp                     0000023A R  data 
main                   00000000 RG text 
minus                  00000243 R  data 
n_2_or_3               00000328 R  text 
n_gt_3                 00000310 R  text 
n_lt_2                 000002F8 R  text 
newline                00000112 R  data 
odd_generation         000001DC R  text 
opp_is_B               000003F8 R  text 
param_block            00003AA4 R  data 
plus                   00000241 R  data 
print_board            00000528 R  text 
print_board_end        000005E4 R  text 
print_col_loop         00000588 R  text 
print_done             00000870 R  text 
print_generation       00000368 R  text 
print_locations        00000800 R  text 
print_loop             00000808 R  text 
print_row_loop         00000558 R  text 
print_top_bottom       00000600 R  text 
prt_b_1                00000360 R  text 
reset_to_even          000002BC R  text 
reset_to_odd           000002DC R  text 
rp                     0000023F R  data 
run_conway             00000198 R  text 
set_odd_board          0000023C R  text 
set_prev_done          00000244 R  text 
setup_board            00000670 R  text 
setup_end              000006B8 R  text 
space                  00000114 R  data 
start_count            000003FC R  text 
start_loop             000001E4 R  text 
tb_end                 00000644 R  text 
tb_loop                00000624 R  text 
validate_nbrs          0000043C R  text 
